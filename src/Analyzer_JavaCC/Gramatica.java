/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
/** Analizador de expresiones aritmeticas sencillas. */
package Analyzer_JavaCC;
import java.util.LinkedList;
import AST.*;
import AST.Expresiones.*;
import AST.Sentencias.*;

public class Gramatica implements GramaticaConstants {
 Principal principal;
 public void setPrincipal(Principal principal) {
    this.principal = principal;
 }

/** Fin Lexico */


/** Producción inicial 
    Analizar -> (Instruccion)+ /** Producción inicial 
    AnEOF
*/
/* //////////////////////////////////////////////////////////////////////////////////////////////////////////////
(e=E())+ <EOF> {return e;}
S ::= DECLARACIONES:a
    {:
        principal.setNodos(a);
    :}
LinkedList<Nodo> 
;
*/
  final public LinkedList<Nodo> Analizar() throws ParseException {
 LinkedList<Nodo> e;
    e = DECLARACIONES();
    jj_consume_token(0);
                               principal.setNodos(e);{if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DECLARACIONES::= ---------------------------
    DECLARACIONES:a DECLARACION:b -------------------------
    {:
        RESULT = a;
        a.add(b); 
    :}
    | DECLARACION:a -------------
    {:
        RESULT = new LinkedList<Nodo>();
        RESULT.add(a);
    :}
;
*/
  final public LinkedList<Nodo> DECLARACIONES() throws ParseException {
 LinkedList<Nodo> e= new LinkedList<Nodo>();Nodo n;
    label_1:
    while (true) {
      n = DECLARACION();
                    e.add(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case res_if:
      case res_while:
      case res_for:
      case res_switch:
      case res_break:
      case res_continue:
      case res_return:
      case res_do:
      case id:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
                                  {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DECLARACION ::= revisar
        FUNCION:a --------------------------------------
    {:
        RESULT = a;
    :}
    | SENTENCIA:a --------------------------
    {:
        RESULT = a;
    :}
    | INSTRUCCION:a PUEDE_SEMICOLON ------------------------
    {:
        RESULT = a;
    :}
;
*/
  final public Nodo DECLARACION() throws ParseException {
 Nodo n;
    if (jj_2_1(3)) {
      n = FUNCION();
                                   {if (true) return n;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case res_if:
      case res_while:
      case res_for:
      case res_switch:
      case res_do:
        n = SENTENCIA();
                        {if (true) return n;}
        break;
      default:
        jj_la1[2] = jj_gen;
        if (jj_2_2(3)) {
          n = INSTRUCCION();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case puntocoma:
            jj_consume_token(puntocoma);
            break;
          default:
            jj_la1[1] = jj_gen;
            ;
          }
                                                       {if (true) return n;}
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCION ::=
            id:a igual res_function l_parent PARAMETROS:b r_parent l_llave BLOQUES:c r_llave -----------------
    {:
        RESULT = new Funcion(a,b,c,aleft+1,aright+1);
    :}
          | id:a igual l_parent PARAMETROS:b r_parent igual mayor l_llave BLOQUES:c r_llave------------
    {:
        RESULT = new Funcion(a,b,c,aleft+1,aright+1);
    :}
;

*/
  final public Sentencia FUNCION() throws ParseException {
 Token t;Expresion bb;LinkedList<Parametro> b= new LinkedList<Parametro>();LinkedList<Nodo> c= new LinkedList<Nodo>();
    t = jj_consume_token(id);
    jj_consume_token(igual);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case res_function:
      jj_consume_token(res_function);
      jj_consume_token(l_parent);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case id:
        b = LISTA_PARAMETROS();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(r_parent);
      jj_consume_token(l_llave);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case res_if:
      case res_while:
      case res_for:
      case res_switch:
      case res_break:
      case res_continue:
      case res_return:
      case res_do:
      case id:
        c = LISTA_BLOQUES();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(r_llave);
      {if (true) return new Funcion(t.image,b,c,t.beginLine, t.beginColumn);}
      break;
    default:
      jj_la1[7] = jj_gen;
      if (jj_2_3(10)) {
        jj_consume_token(l_parent);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case id:
          b = LISTA_PARAMETROS();
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        jj_consume_token(r_parent);
        jj_consume_token(igual);
        jj_consume_token(mayor);
        jj_consume_token(l_llave);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case res_if:
        case res_while:
        case res_for:
        case res_switch:
        case res_break:
        case res_continue:
        case res_return:
        case res_do:
        case id:
          c = LISTA_BLOQUES();
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        jj_consume_token(r_llave);
      {if (true) return new Funcion(t.image,b,c,t.beginLine, t.beginColumn);}
      } else if (jj_2_4(10)) {
        bb = E();
                            {if (true) return new Declaracion(t.image,bb,t.beginLine,t.beginColumn);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
PARAMETROS ::= ---------------------
LISTA_PARAMETROS:a
    {:
        RESULT = a;
    :}
    | 
    {:
        RESULT = new LinkedList<Parametro>();
    :}
;

LISTA_PARAMETROS ::= LISTA_PARAMETROS:a coma PARAMETRO:b
    {:
        RESULT = a;
        RESULT.add(b);
    :}
    | PARAMETRO:a
    {:
        RESULT = new LinkedList<Parametro>();
        RESULT.add(a);
    :}
;

PARAMETRO ::= id:a -------------------
    {:
        RESULT = new Parametro(a,null,aleft+1,aright+1);
    :}
    | id:a igual E:b
    {:
        RESULT = new Parametro(a,b,aleft+1,aright+1);
    :}
;

*/
  final public LinkedList<Parametro> LISTA_PARAMETROS() throws ParseException {
 Parametro a,b;LinkedList<Parametro> lista= new LinkedList<Parametro>();
    a = PARAMETRO();
                  lista.add(a);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      jj_consume_token(coma);
      b = PARAMETRO();
                                                       lista.add(b);
    }
                                                                          {if (true) return lista;}
    throw new Error("Missing return statement in function");
  }

  final public Parametro PARAMETRO() throws ParseException {
 Expresion a;Token t;
    t = jj_consume_token(id);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case igual:
      jj_consume_token(igual);
      a = E();
                               {if (true) return new Parametro(t.image,a,t.beginLine, t.beginColumn);}
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
         {if (true) return new Parametro(t.image,null,t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/* /////////////////////////////////////////////////////////////////////////////////////////////////////////////
    LOOKAHEAD(10)( a=E() {return new Parametro(null,a,token.beginLine, token.beginColumn);})
        | LOOKAHEAD(3)

 LOOKAHEAD(3)( t=<id> {return new Parametro(null,new Primitivo(t.image,Expresion.TIPO_PRIMITIVO.VARIABLE,t.beginLine, t.beginColumn),token.beginLine, token.beginColumn);})
       |LOOKAHEAD(3)

SENTENCIA ::= ?????????????
    IF:a -----------------------------
    {:
        RESULT = a;
    :}
    | SWITCH:a -------------------
    {:
        RESULT = a;
    :}
    | WHILE:a  -----------------------------
    {:
        RESULT = a;
    :}
    | DOWHILE:a ------------------
    {:
        RESULT = a;
    :}
    | FOR:a -------------------------
    {:
        RESULT = a;
    :}
;
*/
  final public Sentencia SENTENCIA() throws ParseException {
 Sentencia n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case res_if:
      n = IF();
                 {if (true) return n;}
      break;
    case res_switch:
      n = SWITCH();
                     {if (true) return n;}
      break;
    case res_while:
      n = WHILE();
                    {if (true) return n;}
      break;
    case res_do:
      n = DOWHILE();
                      {if (true) return n;}
      break;
    case res_for:
      n = FOR();
                  {if (true) return n;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
FOR ::= res_for l_parent id:a res_in E:b r_parent l_llave BLOQUES:c r_llave
    {:
        RESULT = new For(a,b,c,aleft+1,aright+1);
    :}
t=<res_do> <l_llave> (b=LISTA_BLOQUES())?  <r_llave> <res_while> <l_parent> a=E()<r_parent> <puntocoma>
;
*/
  final public Sentencia FOR() throws ParseException {
 Expresion a;Token t;Default c =null;LinkedList<Nodo> b= new LinkedList<Nodo>();
    jj_consume_token(res_for);
    jj_consume_token(l_parent);
    t = jj_consume_token(id);
    jj_consume_token(res_in);
    a = E();
    jj_consume_token(r_parent);
    jj_consume_token(l_llave);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case res_if:
    case res_while:
    case res_for:
    case res_switch:
    case res_break:
    case res_continue:
    case res_return:
    case res_do:
    case id:
      b = LISTA_BLOQUES();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(r_llave);
                                                                                                     {if (true) return new For(t.image,a,b,t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DOWHILE ::= ---------------------------------
  res_do:c l_llave BLOQUES:b r_llave res_while l_parent E:a r_parent puntocoma
    {:
        RESULT = new DoWhile(a,b,cleft+1,cright+1);
    :}
;
*/
  final public Sentencia DOWHILE() throws ParseException {
 Expresion a;Token t;Default c =null;LinkedList<Nodo> b= new LinkedList<Nodo>();
    t = jj_consume_token(res_do);
    jj_consume_token(l_llave);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case res_if:
    case res_while:
    case res_for:
    case res_switch:
    case res_break:
    case res_continue:
    case res_return:
    case res_do:
    case id:
      b = LISTA_BLOQUES();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(r_llave);
    jj_consume_token(res_while);
    jj_consume_token(l_parent);
    a = E();
    jj_consume_token(r_parent);
    jj_consume_token(puntocoma);
                                                                                                             {if (true) return new DoWhile(a,b,t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
WHILE ::=------------------------------------------
   res_while:c l_parent E:a r_parent l_llave BLOQUES:b r_llave
    {:
        RESULT = new While(a,b,cleft+1,cright+1);
    :}
;

*/
  final public Sentencia WHILE() throws ParseException {
 Expresion a;Token t;Default c =null;LinkedList<Nodo> b= new LinkedList<Nodo>();
    t = jj_consume_token(res_while);
    jj_consume_token(l_parent);
    a = E();
    jj_consume_token(r_parent);
    jj_consume_token(l_llave);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case res_if:
    case res_while:
    case res_for:
    case res_switch:
    case res_break:
    case res_continue:
    case res_return:
    case res_do:
    case id:
      b = LISTA_BLOQUES();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(r_llave);
                                                                                        {if (true) return new While(a,b,t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
SWITCH ::= ???????????????????????
          res_switch:d l_parent E:a r_parent l_llave LISTA_CASOS:b DEFAULT:c r_llave
    {:
        RESULT = new Switch(a,b,c,dleft+1,dright+1);
    :}
;
non terminal Default DEFAULT;
non terminal Parametro PARAMETRO;
non terminal LinkedList<Caso> LISTA_CASOS;
*/
  final public Sentencia SWITCH() throws ParseException {
 Nodo n;Expresion a;Token t;Default c =null;LinkedList<Caso> b= new LinkedList<Caso>();
    t = jj_consume_token(res_switch);
    jj_consume_token(l_parent);
    a = E();
    jj_consume_token(r_parent);
    jj_consume_token(l_llave);
    b = LISTA_CASOS();
    if (jj_2_5(2)) {
      c = DEFAULT();
    } else {
      ;
    }
    jj_consume_token(r_llave);
                                                                                                                   {if (true) return new Switch(a,b,c,t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
DEFAULT ::= res_default:a dospuntos BLOQUES:b
    {:
        RESULT = new Default(b,aleft+1,aright+1);
    :}
    | 
    {:
        RESULT = null;
    :}
;

*/
  final public Default DEFAULT() throws ParseException {
 Expresion a;Token t;Sentencia s1,s2;LinkedList<Nodo> b= new LinkedList<Nodo>(); LinkedList<Caso> lista= new LinkedList<Caso>();
    t = jj_consume_token(res_default);
    jj_consume_token(dospuntos);
    if (jj_2_6(2)) {
      b = LISTA_BLOQUES();
    } else {
      ;
    }
                                                                  {if (true) return new Default(b,t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
LISTA_CASOS ::= ?????????????????????????
LISTA_CASOS:a res_case:d E:b dospuntos BLOQUES:c -------------------
    {:
        RESULT = a;
        RESULT.add(new Caso(b,c,dleft+1,dright+1));
    :}
    | res_case:c E:a dospuntos BLOQUES:b------------------
    {:
        RESULT = new LinkedList<Caso>();
        RESULT.add(new Caso(a,b,cleft+1,cright+1));
    :}
;
*/
  final public LinkedList<Caso> LISTA_CASOS() throws ParseException {
 Caso c1,c2 ; LinkedList<Caso> lista= new LinkedList<Caso>();
    c1 = CASO111();
                    lista.add(c1);
    label_3:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_3;
      }
      c2 = CASO111();
                                                                   lista.add(c2);
    }
                                                                                     {if (true) return lista;}
    throw new Error("Missing return statement in function");
  }

  final public Caso CASO111() throws ParseException {
 Expresion a;Token t;Sentencia s1,s2;LinkedList<Nodo> b= new LinkedList<Nodo>(); LinkedList<Caso> lista= new LinkedList<Caso>();
    t = jj_consume_token(res_case);
    a = E();
    jj_consume_token(dospuntos);
    if (jj_2_8(2)) {
      b = LISTA_BLOQUES();
    } else {
      ;
    }
                                                                     {if (true) return new Caso(a,b,t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
IF ::= -----------------------------
        res_if:c l_parent E:a r_parent l_llave BLOQUES:b r_llave --------------------
    {:
        RESULT = new If(a,b,null,cleft+1,cright+1);
    :}
    |  res_if:c l_parent E:a r_parent l_llave BLOQUES:b r_llave ELSE:d
    {:
        RESULT = new If(a,b,d,cleft+1,cright+1);
    :}
;

ELSE ::= -------------------
    {:
        RESULT = a;
    :}
    | res_else:c l_llave BLOQUES:a r_llave
    {:
        RESULT = new Else(a,cleft+1,cright+1);
    :}
;

*/
  final public Sentencia IF() throws ParseException {
 Nodo n;Expresion a;Token t;Sentencia d=null;LinkedList<Nodo> b= new LinkedList<Nodo>();
    t = jj_consume_token(res_if);
    jj_consume_token(l_parent);
    a = E();
    jj_consume_token(r_parent);
    jj_consume_token(l_llave);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case res_if:
    case res_while:
    case res_for:
    case res_switch:
    case res_break:
    case res_continue:
    case res_return:
    case res_do:
    case id:
      b = LISTA_BLOQUES();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(r_llave);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case res_else:
      d = ELSE();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
                                                                                                {if (true) return new If(a,b,d,t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Sentencia ELSE() throws ParseException {
 Token t;Sentencia d=null;LinkedList<Nodo> b= new LinkedList<Nodo>();
    t = jj_consume_token(res_else);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case res_if:
      d = IF();
      break;
    case l_llave:
      jj_consume_token(l_llave);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case res_if:
      case res_while:
      case res_for:
      case res_switch:
      case res_break:
      case res_continue:
      case res_return:
      case res_do:
      case id:
        b = LISTA_BLOQUES();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(r_llave);
                                                 d = new Else(b,t.beginLine, t.beginColumn);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
       {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/* //////////////////////////////////////////////////////////////////////////////////////////////////////////////
BLOQUES ::= ------------------------------ 
    LISTA_BLOQUES:a ----------------
    {:
        RESULT = a;
    :}
    | 
    {:
        RESULT = new LinkedList<Nodo>();
    :}
;

LISTA_BLOQUES ::= -------------------
 LISTA_BLOQUES:a INSTRUCCION:b PUEDE_SEMICOLON -------------
    {:
        RESULT = a;
        RESULT.add(b);
    :}
    | LISTA_BLOQUES:a SENTENCIA:b
    {:
        RESULT = a;
        RESULT.add(b);
    :}
    | SENTENCIA:a 
    {:
        RESULT = new LinkedList<Nodo>();
        RESULT.add(a);
    :}
    | INSTRUCCION:a PUEDE_SEMICOLON
    {:
        RESULT = new LinkedList<Nodo>();
        RESULT.add(a);
    :}
;
*/
  final public LinkedList<Nodo> LISTA_BLOQUES() throws ParseException {
 LinkedList<Nodo> lista = new LinkedList<Nodo>();Nodo n1,n2;
    n1 = LISTA_BLOQUES_CONJ();
                               lista.add(n1);
    label_4:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_4;
      }
      n2 = LISTA_BLOQUES_CONJ();
                                                                                       lista.add(n2);
    }
                                                                                                             {if (true) return lista;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo LISTA_BLOQUES_CONJ() throws ParseException {
 Nodo n1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case res_if:
    case res_while:
    case res_for:
    case res_switch:
    case res_do:
      n1 = SENTENCIA();
                         {if (true) return n1;}
      break;
    case res_break:
    case res_continue:
    case res_return:
    case id:
      n1 = INSTRUCCION();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case puntocoma:
        jj_consume_token(puntocoma);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
                                           {if (true) return n1;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
INSTRUCCION ::= revisar
    res_break:a --------------------
    {:
        RESULT = new Corte(Corte.TIPO_CORTE.BREAK,aleft+1,aright+1);
    :}
    | res_continue:a -------------------
    {:
        RESULT = new Corte(Corte.TIPO_CORTE.CONTINUE,aleft+1,aright+1);
    :}
    | LLAMADA:a ---------------------
    {:
        RESULT = a;
    :}
    | VARIABLE:a ??????????????????/
    {:
        RESULT = a;
    :}
    | RETURN:a ----------------
    {:
        RESULT = a;
    :}
;
*/
  final public Nodo INSTRUCCION() throws ParseException {
 Nodo n;Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case res_break:
      t = jj_consume_token(res_break);
                     {if (true) return new Corte(Corte.TIPO_CORTE.BREAK,t.beginLine, t.beginColumn);}
      break;
    case res_continue:
      t = jj_consume_token(res_continue);
                        {if (true) return new Corte(Corte.TIPO_CORTE.CONTINUE,t.beginLine, t.beginColumn);}
      break;
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_10(2)) {
        n = VARIABLE();
                                 {if (true) return n;}
      } else if (jj_2_11(2)) {
        n = LLAMADA();
                                 {if (true) return n;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case res_return:
          n = RETURN();
                    {if (true) return n;}
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

/* //////////////////////////////////////////////////////////////////////////////////////////////////////////////
RETURN ::= --------------------------------
 res_return:b l_parent E:a r_parent
    {:
        RESULT = new Return(a,bleft+1,bright+1);
    :}
    | res_return:b
    {:
        RESULT = new Return(null,bleft+1,bright+1);
    :}
;
*/
  final public Sentencia RETURN() throws ParseException {
 Expresion a= null;Token t;
    t = jj_consume_token(res_return);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case l_parent:
      jj_consume_token(l_parent);
      a = E();
      jj_consume_token(r_parent);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
                                                      {if (true) return new Return(a,t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/* //////////////////////////////////////////////////////////////////////////////////////////////////////////////
VARIABLE ::=  revisar
           ACCESO_ESTRUCTURA2 igual E ---revisar
 ACCESO_ESTRUCTURA2:a igual:c E:b 
    {:
        RESULT = new Modificacion(a,b,cleft+1,cright+1);
    :}
;
*/
  final public Sentencia VARIABLE() throws ParseException {
 Expresion b,c;Token t;
    b = ACCESO_ESTRUCTURA2();
    t = jj_consume_token(igual);
    c = E();
            {if (true) return new Modificacion(b,c,t.beginLine,t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/* //////////////////////////////////////////////////////////////////////////////////////////////////////////////
ACCESO_ESTRUCTURA2 ::= revisar
    id:a l_corchete E:b r_corchete ---------------
    {:
        Primitivo p = new Primitivo(a,Expresion.TIPO_PRIMITIVO.VARIABLE,aleft+1,aright+1);
        RESULT = new Acceso(p,b,null,Acceso.TIPO_ACCESO.SIMPLE);
    :}
    | id:a l_corchete l_corchete E:b r_corchete r_corchete -------------
    {:
        Primitivo p = new Primitivo(a,Expresion.TIPO_PRIMITIVO.VARIABLE,aleft+1,aright+1);
        RESULT = new Acceso(p,b,null,Acceso.TIPO_ACCESO.DOBLE);
    :}
    | id:a l_corchete E:b coma E:c r_corchete---------------
    {:
        Primitivo p = new Primitivo(a,Expresion.TIPO_PRIMITIVO.VARIABLE,aleft+1,aright+1);
        RESULT = new Acceso(p,b,c,Acceso.TIPO_ACCESO.XY);
    :}
    | id:a l_corchete coma E:b r_corchete--------------------
    {:
        Primitivo p = new Primitivo(a,Expresion.TIPO_PRIMITIVO.VARIABLE,aleft+1,aright+1);
        RESULT = new Acceso(p,null,b,Acceso.TIPO_ACCESO.Y);
    :}
    | id:a l_corchete E:b coma r_corchete ------------------
    {:
        Primitivo p = new Primitivo(a,Expresion.TIPO_PRIMITIVO.VARIABLE,aleft+1,aright+1);
        RESULT = new Acceso(p,b,null,Acceso.TIPO_ACCESO.X);
    :}
    | ACCESO_ESTRUCTURA2:a l_corchete E:b r_corchete -------------------
    {:
        RESULT = new Acceso(a,b,null,Acceso.TIPO_ACCESO.SIMPLE); --------------------------
    :}
    | ACCESO_ESTRUCTURA2:a  l_corchete l_corchete E:b r_corchete r_corchete ---------------------
    {:
        RESULT = new Acceso(a,b,null,Acceso.TIPO_ACCESO.DOBLE);
    :}
    | ACCESO_ESTRUCTURA2:a l_corchete E:b coma E:c r_corchete--------------------
    {:
        RESULT = new Acceso(a,b,c,Acceso.TIPO_ACCESO.XY);
    :}
    | ACCESO_ESTRUCTURA2:a l_corchete coma E:b r_corchete
    {:
        RESULT = new Acceso(a,null,b,Acceso.TIPO_ACCESO.Y);
    :}
    | ACCESO_ESTRUCTURA2:a l_corchete E:b coma r_corchete
    {:
        RESULT = new Acceso(a,b,null,Acceso.TIPO_ACCESO.X);
    :}
;

;

*/
  final public Expresion ACCESO_ESTRUCTURA2() throws ParseException {
 Expresion a,b,c;Token t;
    a = ACCESO_ESTRUCTURA2_ELEMENT();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case l_corchete:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_5;
      }
      if (jj_2_12(4)) {
        jj_consume_token(l_corchete);
        b = E();
        jj_consume_token(r_corchete);
                 a = new Acceso(a,b,null,Acceso.TIPO_ACCESO.SIMPLE);
      } else if (jj_2_13(4)) {
        jj_consume_token(l_corchete);
        jj_consume_token(l_corchete);
        b = E();
        jj_consume_token(r_corchete);
        jj_consume_token(r_corchete);
                 a = new Acceso(a,b,null,Acceso.TIPO_ACCESO.DOBLE);
      } else if (jj_2_14(4)) {
        jj_consume_token(l_corchete);
        b = E();
        jj_consume_token(coma);
        c = E();
        jj_consume_token(r_corchete);
                 a = new Acceso(a,b,c,Acceso.TIPO_ACCESO.XY);
      } else if (jj_2_15(4)) {
        jj_consume_token(l_corchete);
        jj_consume_token(coma);
        c = E();
        jj_consume_token(r_corchete);
                 a= new Acceso(a,null,c,Acceso.TIPO_ACCESO.Y);
      } else if (jj_2_16(4)) {
        jj_consume_token(l_corchete);
        b = E();
        jj_consume_token(coma);
        jj_consume_token(r_corchete);
                a= new Acceso(a,b,null,Acceso.TIPO_ACCESO.X);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
       {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion ACCESO_ESTRUCTURA2_ELEMENT() throws ParseException {
 Expresion a,b;Token t;
    if (jj_2_17(4)) {
      t = jj_consume_token(id);
      jj_consume_token(l_corchete);
      a = E();
      jj_consume_token(r_corchete);
              Primitivo p = new Primitivo(t.image,Expresion.TIPO_PRIMITIVO.VARIABLE,t.beginLine,t.beginColumn);
              {if (true) return new Acceso(p,a,null,Acceso.TIPO_ACCESO.SIMPLE);}
    } else if (jj_2_18(4)) {
      t = jj_consume_token(id);
      jj_consume_token(l_corchete);
      jj_consume_token(l_corchete);
      a = E();
      jj_consume_token(r_corchete);
      jj_consume_token(r_corchete);
              Primitivo p = new Primitivo(t.image,Expresion.TIPO_PRIMITIVO.VARIABLE,t.beginLine,t.beginColumn);
              {if (true) return new Acceso(p,a,null,Acceso.TIPO_ACCESO.DOBLE);}
    } else if (jj_2_19(4)) {
      t = jj_consume_token(id);
      jj_consume_token(l_corchete);
      a = E();
      jj_consume_token(coma);
      b = E();
      jj_consume_token(r_corchete);
                Primitivo p = new Primitivo(t.image,Expresion.TIPO_PRIMITIVO.VARIABLE,t.beginLine,t.beginColumn);
                {if (true) return new Acceso(p,a,b,Acceso.TIPO_ACCESO.XY);}
    } else if (jj_2_20(4)) {
      t = jj_consume_token(id);
      jj_consume_token(l_corchete);
      jj_consume_token(coma);
      b = E();
      jj_consume_token(r_corchete);
               Primitivo p = new Primitivo(t.image,Expresion.TIPO_PRIMITIVO.VARIABLE,t.beginLine,t.beginColumn);
               {if (true) return new Acceso(p,null,b,Acceso.TIPO_ACCESO.Y);}
    } else if (jj_2_21(4)) {
      t = jj_consume_token(id);
      jj_consume_token(l_corchete);
      a = E();
      jj_consume_token(coma);
      jj_consume_token(r_corchete);
              Primitivo p = new Primitivo(t.image,Expresion.TIPO_PRIMITIVO.VARIABLE,t.beginLine,t.beginColumn);
               {if (true) return new Acceso(p,a,null,Acceso.TIPO_ACCESO.Y);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* //////////////////////////////////////////////////////////////////////////////////////////////////////////////
LLAMADA ::= ------------------------
      id:a l_parent PARAMETROS_LLAMADA:b r_parent
    {:
        RESULT = new Llamada(a,b,aleft+1,aright+1);
    :}
non terminal LinkedList<Expresion> LISTA_LLAMADA, PARAMETROS_LLAMADA;
;
*/
  final public Expresion LLAMADA() throws ParseException {
 LinkedList<Expresion> lista = new LinkedList<Expresion>();Nodo n;Token t;
    t = jj_consume_token(id);
    jj_consume_token(l_parent);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numero:
    case doble:
    case cadena:
    case res_null:
    case res_false:
    case res_true:
    case res_default:
    case l_parent:
    case mas:
    case menos:
    case not:
    case id:
      lista = LISTA_LLAMADA();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(r_parent);
                                                              {if (true) return new Llamada(t.image,lista,t.beginLine,t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
LISTA_LLAMADA ::=  revisar
     LISTA_LLAMADA:a coma E:b
    {:
        RESULT = a;
        RESULT.add(b);
    :}
    | LISTA_LLAMADA:a coma res_default:b
    {:
        RESULT = a;
        RESULT.add(new Primitivo(Expresion.TIPO_PRIMITIVO.DEFAULT,Expresion.TIPO_PRIMITIVO.DEFAULT,bleft+1,bright+1));
    :}
    | res_default:a
    {:
        RESULT = new LinkedList<Expresion>();
        RESULT.add(new Primitivo(Expresion.TIPO_PRIMITIVO.DEFAULT,Expresion.TIPO_PRIMITIVO.DEFAULT,aleft+1,aright+1));
    :}
*/
  final public LinkedList<Expresion> LISTA_LLAMADA() throws ParseException {
 Expresion ex,ex1; LinkedList<Expresion> lista = new LinkedList<Expresion>();
    ex = LISTA_LLAMADA111();
                             lista.add(ex);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_6;
      }
      jj_consume_token(coma);
      ex1 = LISTA_LLAMADA111();
                                                                              lista.add(ex1);
    }
                                                                                                   {if (true) return lista;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion LISTA_LLAMADA111() throws ParseException {
 Token t; Expresion ex;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numero:
    case doble:
    case cadena:
    case res_null:
    case res_false:
    case res_true:
    case l_parent:
    case mas:
    case menos:
    case not:
    case id:
      ex = E();
                {if (true) return ex;}
      break;
    case res_default:
      t = jj_consume_token(res_default);
                        {if (true) return new Primitivo(Expresion.TIPO_PRIMITIVO.DEFAULT,Expresion.TIPO_PRIMITIVO.DEFAULT,t.beginLine, t.beginColumn);}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* //////////////////////////////////////////////////////////////////////////////////////////////////////////////
E ::=  revisar
    CONSTANTE:a ------------------------------------------------------    
    {:
        RESULT = a;
    :}
    | BINARIA:a -------------------------------------------------------
    {:
        RESULT = a;
    :}
    | UNARIA:a----------------------------------
    {:
        RESULT = a;
    :}
    | TERNARIA:a ----------------------------------------
    {:
        RESULT = a;
    :}
    | LLAMADA:a  ----------------------------------------
    {:
        RESULT = a;
    :}
    | l_parent E:a r_parent ------------------------
    {:
        RESULT = a;
    :}
    | ACCESO_ESTRUCTURA:a revisar
    {:
        RESULT = a;
    :}

     (
         b = LOGICA() <ternario> c=LOGICA() <dospuntos> d=LOGICA() {a = new Ternaria(b,c,d,token.beginLine, token.beginColumn);}
    )*
;
*/
  final public Expresion E() throws ParseException {
 Expresion a;
    a = TERNARIA();
                     {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
TERNARIA ::= E:a ternario:d E:b dospuntos E:c 
{:
    RESULT = new Ternaria(a,b,c,dleft+1,dright+1);
:}
;
*/
  final public Expresion TERNARIA() throws ParseException {
 Expresion a, b, c, d;Token t;
    a = LOGICA();
    label_7:
    while (true) {
      if (jj_2_22(2)) {
        ;
      } else {
        break label_7;
      }
      t = jj_consume_token(ternario);
      b = E();
      jj_consume_token(dospuntos);
      c = E();
                                                        a = new Ternaria(a,b,c,t.beginLine, t.beginColumn);
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
BINARIA ::= ------------------
    ARITMETICA:a ---------------------------
    {:
        RESULT = a;
    :}
    | LOGICA:a ----------------------
    {:
        RESULT = a;
    :}
    | RELACIONAL:a ---------------------
    {:
        RESULT = a;
    :}
;

Expresion BINARIA ():
{Expresion a;}
{
     (a = RELACIONAL()){return a;}  
}
*/


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
LOGICA ::= -------------
     E:a or:c E:b------------
    {:
        RESULT = new Logica(a,b,Logica.TIPO_OPERACION.OR,cleft+1,cright+1);
    :}
    | E:a and:c E:b--------------
    {:
        RESULT = new Logica(a,b,Logica.TIPO_OPERACION.AND,cleft+1,cright+1);
    :}
;


*/
  final public Expresion LOGICA() throws ParseException {
 Expresion a, b;
    a = CondicionAnd();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case or:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_8;
      }
      jj_consume_token(or);
      b = CondicionAnd();
                                 a = new Logica(a,b,Logica.TIPO_OPERACION.OR, token.beginLine, token.beginColumn);
    }
     {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion CondicionAnd() throws ParseException {
 Expresion a, b;
    a = RELACIONAL();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case and:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_9;
      }
      jj_consume_token(and);
      b = RELACIONAL();
                                a = new Logica(a,b,Logica.TIPO_OPERACION.AND, token.beginLine, token.beginColumn);
    }
     {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
RELACIONAL ::= -------------------------
    E:a menor:c E:b --------------------------
    {:
        RESULT = new Relacional(a,b,Relacional.TIPO_OPERACION.MENOR,cleft+1,cright+1);
    :}
    | E:a menorigual:c E:b ----------------------
    {:
        RESULT = new Relacional(a,b,Relacional.TIPO_OPERACION.MENORIGUAL,cleft+1,cright+1);
    :}
    | E:a mayor:c E:b ---------------------------
    {:
        RESULT = new Relacional(a,b,Relacional.TIPO_OPERACION.MAYOR,cleft+1,cright+1);
    :}
    | E:a mayorigual:c E:b -------------------------
    {:
        RESULT = new Relacional(a,b,Relacional.TIPO_OPERACION.MAYORIGUAL,cleft+1,cright+1);
    :}
    | E:a igualigual:c E:b -------------------
    {:
        RESULT = new Relacional(a,b,Relacional.TIPO_OPERACION.IGUALIGUAL,cleft+1,cright+1);
    :}
    | E:a diferente:c E:b-----------------
    {:
        RESULT = new Relacional(a,b,Relacional.TIPO_OPERACION.DIFERENTE,cleft+1,cright+1);
    :}
;
*/
  final public Expresion RELACIONAL() throws ParseException {
 Expresion a, b;
    a = ExpresionRelacional();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case igualigual:
      case diferente:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case igualigual:
        jj_consume_token(igualigual);
        b = ExpresionRelacional();
                                                a = new Relacional(a,b,Relacional.TIPO_OPERACION.IGUALIGUAL, token.beginLine, token.beginColumn);
        break;
      case diferente:
        jj_consume_token(diferente);
        b = ExpresionRelacional();
                                               a = new Relacional(a,b,Relacional.TIPO_OPERACION.DIFERENTE, token.beginLine, token.beginColumn);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion ExpresionRelacional() throws ParseException {
 Expresion a, b;
    a = ARITMETICA();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mayorigual:
      case mayor:
      case menorigual:
      case menor:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case menor:
        jj_consume_token(menor);
        b = ARITMETICA();
                                a = new Relacional(a,b,Relacional.TIPO_OPERACION.MENOR, token.beginLine, token.beginColumn);
        break;
      case menorigual:
        jj_consume_token(menorigual);
        b = ARITMETICA();
                                     a = new Relacional(a,b,Relacional.TIPO_OPERACION.MENORIGUAL, token.beginLine, token.beginColumn);
        break;
      case mayor:
        jj_consume_token(mayor);
        b = ARITMETICA();
                                a = new Relacional(a,b,Relacional.TIPO_OPERACION.MAYOR, token.beginLine, token.beginColumn);
        break;
      case mayorigual:
        jj_consume_token(mayorigual);
        b = ARITMETICA();
                                     a = new Relacional(a,b,Relacional.TIPO_OPERACION.MAYORIGUAL, token.beginLine, token.beginColumn);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
ARITMETICA ::= --------------------------
    E:a mas:c E:b ------
    {:
        RESULT = new Aritmetica(a,b,Aritmetica.TIPO_OPERACION.MAS,cleft+1,cright+1);
    :}
    | E:a menos:c E:b ---------
    {:
        RESULT = new Aritmetica(a,b,Aritmetica.TIPO_OPERACION.MENOS,cleft+1,cright+1);
    :}
    | E:a por:c E:b -----------------
    {:
        RESULT = new Aritmetica(a,b,Aritmetica.TIPO_OPERACION.POR,cleft+1,cright+1);
    :}
    | E:a div:c E:b -----------------
    {:
        RESULT = new Aritmetica(a,b,Aritmetica.TIPO_OPERACION.DIV,cleft+1,cright+1);
    :}
    | E:a potencia:c E:b -----------------------
    {:
        RESULT = new Aritmetica(a,b,Aritmetica.TIPO_OPERACION.POT,cleft+1,cright+1);
    :}
    | E:a modular:c E:b --------------
    {:
        RESULT = new Aritmetica(a,b,Aritmetica.TIPO_OPERACION.MOD,cleft+1,cright+1);
    :}
*/
  final public Expresion ARITMETICA() throws ParseException {
 Expresion ex;
    ex = ExpresionAditiva();
                            {if (true) return ex;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion ExpresionAditiva() throws ParseException {
 Expresion e, e1;
    e = ExpresionMultiplicativa();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mas:
      case menos:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mas:
        jj_consume_token(mas);
        e1 = ExpresionMultiplicativa();
                                            e =new Aritmetica(e,e1,Aritmetica.TIPO_OPERACION.MAS,token.beginLine, token.beginColumn);
        break;
      case menos:
        jj_consume_token(menos);
        e1 = ExpresionMultiplicativa();
                                              e =new Aritmetica(e,e1,Aritmetica.TIPO_OPERACION.MENOS,token.beginLine, token.beginColumn);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion ExpresionMultiplicativa() throws ParseException {
 Expresion e, e1;
    e = ExpresionPotencia();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case por:
      case modular:
      case div:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case por:
        jj_consume_token(por);
        e1 = ExpresionPotencia();
                                      e =new Aritmetica(e,e1,Aritmetica.TIPO_OPERACION.POR,token.beginLine, token.beginColumn);
        break;
      case div:
        jj_consume_token(div);
        e1 = ExpresionPotencia();
                                      e =new Aritmetica(e,e1,Aritmetica.TIPO_OPERACION.DIV,token.beginLine, token.beginColumn);
        break;
      case modular:
        jj_consume_token(modular);
        e1 = ExpresionPotencia();
                                          e =new Aritmetica(e,e1,Aritmetica.TIPO_OPERACION.MOD,token.beginLine, token.beginColumn);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion ExpresionPotencia() throws ParseException {
 Expresion e, e1;
    e = ExpresionUnaria();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case potencia:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_14;
      }
      jj_consume_token(potencia);
      e1 = ExpresionUnaria();
                                         e =new Aritmetica(e,e1,Aritmetica.TIPO_OPERACION.POT,token.beginLine, token.beginColumn);
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
UNARIA::=  --------------
     menos:b E:a----------
    {:
        RESULT = new Unaria(a,Unaria.TIPO_OPERACION.MENOS,bleft+1,bright+1);
    :}
    %prec UMINUS------------
    | not:b E:a
    {:
        RESULT = new Unaria(a,Unaria.TIPO_OPERACION.NOT,bleft+1,bright+1);
    :}
    | mas:b E:a----------
    {:
        RESULT = a;
    :}
    %prec UPLUS
;
*/
  final public Expresion ExpresionUnaria() throws ParseException {
 Expresion e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case menos:
      jj_consume_token(menos);
      e = ExpresionUnaria();
                                 {if (true) return new Unaria(e,Unaria.TIPO_OPERACION.MENOS, token.beginLine, token.beginColumn);}
      break;
    case not:
      jj_consume_token(not);
      e = ExpresionUnaria();
                                 {if (true) return new Unaria(e,Unaria.TIPO_OPERACION.NOT, token.beginLine, token.beginColumn);}
      break;
    case mas:
      jj_consume_token(mas);
      e = ExpresionUnaria();
                                 {if (true) return e;}
      break;
    case numero:
    case doble:
    case cadena:
    case res_null:
    case res_false:
    case res_true:
    case l_parent:
    case id:
      e = Primitivo();
                   {if (true) return e;}
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expresion Primitivo() throws ParseException {
 Expresion e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numero:
    case doble:
    case cadena:
    case res_null:
    case res_false:
    case res_true:
      e = CONSTANTE();
                     {if (true) return e;}
      break;
    case l_parent:
      jj_consume_token(l_parent);
      e = E();
      jj_consume_token(r_parent);
                                 {if (true) return e;}
      break;
    default:
      jj_la1[39] = jj_gen;
      if (jj_2_23(2)) {
        e = LLAMADA();
                                {if (true) return e;}
      } else if (jj_2_24(2)) {
        e = ACCESO_ESTRUCTURA();
                                          {if (true) return e;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
ACCESO_ESTRUCTURA ::= --------------
    id:a -----------------------------------
    {:
        RESULT = new Primitivo(a,Expresion.TIPO_PRIMITIVO.VARIABLE,aleft+1,aright+1);
    :}
    | ACCESO_ESTRUCTURA:a l_corchete E:b r_corchete -------------
    {:
        RESULT = new Acceso(a,b,null,Acceso.TIPO_ACCESO.SIMPLE);
    :}
    | ACCESO_ESTRUCTURA:a  l_corchete l_corchete E:b r_corchete r_corchete---------------
    {:
        RESULT = new Acceso(a,b,null,Acceso.TIPO_ACCESO.DOBLE);
    :}
    | ACCESO_ESTRUCTURA:a l_corchete E:b coma E:c r_corchete  ------------------------
    {:
        RESULT = new Acceso(a,b,c,Acceso.TIPO_ACCESO.XY);
    :}
    | ACCESO_ESTRUCTURA:a l_corchete coma E:b r_corchete ---------------------------
    {:
        RESULT = new Acceso(a,b,null,Acceso.TIPO_ACCESO.Y);
    :}
    | ACCESO_ESTRUCTURA:a l_corchete E:b coma r_corchete -------------------------
    {:
        RESULT = new Acceso(a,b,null,Acceso.TIPO_ACCESO.X);
    :}
;
*/
  final public Expresion ACCESO_ESTRUCTURA() throws ParseException {
 Expresion a,b,c;Token t;
    t = jj_consume_token(id);
           a = new Primitivo(t.image,Expresion.TIPO_PRIMITIVO.VARIABLE,t.beginLine, t.beginColumn);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case l_corchete:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_15;
      }
      if (jj_2_25(4)) {
        jj_consume_token(l_corchete);
        b = E();
        jj_consume_token(r_corchete);
                                                      a = new Acceso(a,b,null,Acceso.TIPO_ACCESO.SIMPLE);
      } else if (jj_2_26(4)) {
        jj_consume_token(l_corchete);
        jj_consume_token(l_corchete);
        b = E();
        jj_consume_token(r_corchete);
        jj_consume_token(r_corchete);
                                                                               a = new Acceso(a,b,null,Acceso.TIPO_ACCESO.DOBLE);
      } else if (jj_2_27(4)) {
        jj_consume_token(l_corchete);
        b = E();
        jj_consume_token(coma);
        c = E();
        jj_consume_token(r_corchete);
                                                                   a = new Acceso(a,b,c,Acceso.TIPO_ACCESO.XY);
      } else if (jj_2_28(4)) {
        jj_consume_token(l_corchete);
        jj_consume_token(coma);
        b = E();
        jj_consume_token(r_corchete);
                                                            a = new Acceso(a,null,b,Acceso.TIPO_ACCESO.Y);
      } else if (jj_2_29(4)) {
        jj_consume_token(l_corchete);
        b = E();
        jj_consume_token(coma);
        jj_consume_token(r_corchete);
                                                             a = new Acceso(a,b,null,Acceso.TIPO_ACCESO.X);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
       {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONSTANTE ::= -----------------------------------------
     numero:a ----------------------------------------------
    {:
        RESULT = new Primitivo(Integer.parseInt(a),Expresion.TIPO_PRIMITIVO.INTEGER,aleft+1,aright+1);
    :}
    | res_true:a ---------------------------------------
    {:
        RESULT = new Primitivo(true,Expresion.TIPO_PRIMITIVO.BOOLEAN,aleft+1,aright+1);
    :}
    | res_false:a ---------------------------
    {:
        RESULT = new Primitivo(false,Expresion.TIPO_PRIMITIVO.BOOLEAN,aleft+1,aright+1);
    :}
    | doble:a ------------------------------------------
    {:
        RESULT = new Primitivo(Double.parseDouble(a),Expresion.TIPO_PRIMITIVO.DOUBLE,aleft+1,aright+1);
    :}
    | res_null:a ----------------------------------------
    {:
        RESULT = new Primitivo("null",Expresion.TIPO_PRIMITIVO.STRING,aleft+1,aright+1);
    :}
    | cadena:a ------------------------------------
    {:
        String cad = a.substring(1,a.length());
        cad = cad.substring(0,cad.length()-1);
        RESULT = new Primitivo(cad,Expresion.TIPO_PRIMITIVO.STRING,aleft+1,aright+1);
    :}
;
*/
  final public Expresion CONSTANTE() throws ParseException {
 String  a,cad;Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numero:
      jj_consume_token(numero);
             {if (true) return new Primitivo(Integer.parseInt(token.image),Expresion.TIPO_PRIMITIVO.INTEGER,token.beginLine, token.beginColumn);}
      break;
    case res_true:
      jj_consume_token(res_true);
                {if (true) return new Primitivo(true,Expresion.TIPO_PRIMITIVO.BOOLEAN,token.beginLine, token.beginColumn);}
      break;
    case res_false:
      jj_consume_token(res_false);
                 {if (true) return new Primitivo(false,Expresion.TIPO_PRIMITIVO.BOOLEAN,token.beginLine, token.beginColumn);}
      break;
    case doble:
      jj_consume_token(doble);
             {if (true) return new Primitivo(Double.parseDouble(token.image),Expresion.TIPO_PRIMITIVO.NUMERIC,token.beginLine, token.beginColumn);}
      break;
    case res_null:
      jj_consume_token(res_null);
                {if (true) return new Primitivo("null",Expresion.TIPO_PRIMITIVO.STRING,token.beginLine, token.beginColumn);}
      break;
    case cadena:
      jj_consume_token(cadena);
               a = String.valueOf(token.image);
              cad = a.substring(1,a.length());
              cad = cad.substring(0,cad.length()-1);
              {if (true) return new Primitivo(cad,Expresion.TIPO_PRIMITIVO.STRING,token.beginLine, token.beginColumn);}
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(modular)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(div)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(por)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_36()) return true;
    if (jj_scan_token(igual)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(l_parent)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(r_parent)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(res_default)) return true;
    if (jj_scan_token(dospuntos)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(menos)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(coma)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(mas)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(res_return)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(res_switch)) return true;
    if (jj_scan_token(l_parent)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(r_parent)) return true;
    if (jj_scan_token(l_llave)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(res_while)) return true;
    if (jj_scan_token(l_parent)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(r_parent)) return true;
    if (jj_scan_token(l_llave)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(res_continue)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(res_default)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(res_break)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(cadena)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(res_null)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(doble)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(res_false)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(res_true)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(numero)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(mayorigual)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(mayor)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(res_do)) return true;
    if (jj_scan_token(l_llave)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    if (jj_scan_token(r_llave)) return true;
    if (jj_scan_token(res_while)) return true;
    if (jj_scan_token(l_parent)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(menorigual)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(menor)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(res_for)) return true;
    if (jj_scan_token(l_parent)) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(res_in)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(diferente)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(igualigual)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(l_parent)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    if (jj_scan_token(r_parent)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_63()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(l_corchete)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(coma)) return true;
    if (jj_scan_token(r_corchete)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(l_corchete)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(coma)) return true;
    if (jj_scan_token(r_corchete)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(l_corchete)) return true;
    if (jj_scan_token(coma)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(r_corchete)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(l_corchete)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(coma)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(r_corchete)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(l_corchete)) return true;
    if (jj_scan_token(coma)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(r_corchete)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(l_corchete)) return true;
    if (jj_scan_token(l_corchete)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(r_corchete)) return true;
    if (jj_scan_token(r_corchete)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(l_corchete)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(r_corchete)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(l_corchete)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(coma)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(coma)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(l_corchete)) return true;
    if (jj_scan_token(l_corchete)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(r_corchete)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(id)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(l_corchete)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(r_corchete)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(l_corchete)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(coma)) return true;
    if (jj_scan_token(r_corchete)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(and)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(igual)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(l_corchete)) return true;
    if (jj_scan_token(coma)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(r_corchete)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(l_corchete)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(coma)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(l_corchete)) return true;
    if (jj_scan_token(l_corchete)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(r_corchete)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(or)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(id)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(l_corchete)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(r_corchete)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(res_if)) return true;
    if (jj_scan_token(l_parent)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(r_parent)) return true;
    if (jj_scan_token(l_llave)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(l_parent)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(r_parent)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(mas)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(not)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(menos)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(res_case)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(ternario)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(dospuntos)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(potencia)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(l_parent)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    if (jj_scan_token(r_parent)) return true;
    if (jj_scan_token(igual)) return true;
    if (jj_scan_token(mayor)) return true;
    if (jj_scan_token(l_llave)) return true;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    if (jj_scan_token(r_llave)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(res_function)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(igual)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3ce8000,0x0,0x20e8000,0x0,0x3ce8000,0x0,0x3ce8000,0x2000,0x0,0x0,0x20e8000,0x3ce8000,0x3ce8000,0x3ce8000,0x3ce8000,0x10000,0x3ce8000,0x10008000,0x0,0x3ce8000,0xc00000,0x1000000,0x40000000,0x4000000,0x40201f80,0x0,0x40201f80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40001f80,0x40001f80,0x4000000,0x1f80,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100000,0x2,0x0,0x100000,0x100000,0x100000,0x100000,0x0,0x1,0x8,0x0,0x100000,0x100000,0x100000,0x100000,0x0,0x100000,0x0,0x2,0x100000,0x0,0x0,0x0,0x0,0x140030,0x1,0x140030,0x20000,0x10000,0x8004,0x8004,0x7800,0x7800,0x30,0x30,0x340,0x340,0x80,0x140030,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[29];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 29; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
