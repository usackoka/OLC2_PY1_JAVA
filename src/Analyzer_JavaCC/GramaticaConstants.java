/* Generated By:JavaCC: Do not edit this line. GramaticaConstants.java */
/** Analizador de expresiones aritmeticas sencillas. */
package Analyzer_JavaCC;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int numero = 7;
  /** RegularExpression Id. */
  int doble = 8;
  /** RegularExpression Id. */
  int cadena = 9;
  /** RegularExpression Id. */
  int res_null = 10;
  /** RegularExpression Id. */
  int res_false = 11;
  /** RegularExpression Id. */
  int res_true = 12;
  /** RegularExpression Id. */
  int res_function = 13;
  /** RegularExpression Id. */
  int res_in = 14;
  /** RegularExpression Id. */
  int res_if = 15;
  /** RegularExpression Id. */
  int res_else = 16;
  /** RegularExpression Id. */
  int res_while = 17;
  /** RegularExpression Id. */
  int res_for = 18;
  /** RegularExpression Id. */
  int res_switch = 19;
  /** RegularExpression Id. */
  int res_case = 20;
  /** RegularExpression Id. */
  int res_default = 21;
  /** RegularExpression Id. */
  int res_break = 22;
  /** RegularExpression Id. */
  int res_continue = 23;
  /** RegularExpression Id. */
  int res_return = 24;
  /** RegularExpression Id. */
  int res_do = 25;
  /** RegularExpression Id. */
  int l_corchete = 26;
  /** RegularExpression Id. */
  int r_corchete = 27;
  /** RegularExpression Id. */
  int l_llave = 28;
  /** RegularExpression Id. */
  int r_llave = 29;
  /** RegularExpression Id. */
  int l_parent = 30;
  /** RegularExpression Id. */
  int r_parent = 31;
  /** RegularExpression Id. */
  int coma = 32;
  /** RegularExpression Id. */
  int puntocoma = 33;
  /** RegularExpression Id. */
  int igualigual = 34;
  /** RegularExpression Id. */
  int igual = 35;
  /** RegularExpression Id. */
  int mas = 36;
  /** RegularExpression Id. */
  int menos = 37;
  /** RegularExpression Id. */
  int por = 38;
  /** RegularExpression Id. */
  int potencia = 39;
  /** RegularExpression Id. */
  int modular = 40;
  /** RegularExpression Id. */
  int div = 41;
  /** RegularExpression Id. */
  int ternario = 42;
  /** RegularExpression Id. */
  int mayorigual = 43;
  /** RegularExpression Id. */
  int mayor = 44;
  /** RegularExpression Id. */
  int menorigual = 45;
  /** RegularExpression Id. */
  int menor = 46;
  /** RegularExpression Id. */
  int diferente = 47;
  /** RegularExpression Id. */
  int and = 48;
  /** RegularExpression Id. */
  int or = 49;
  /** RegularExpression Id. */
  int not = 50;
  /** RegularExpression Id. */
  int dospuntos = 51;
  /** RegularExpression Id. */
  int id = 52;
  /** RegularExpression Id. */
  int STRING = 55;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int STRING_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<numero>",
    "<doble>",
    "<cadena>",
    "\"null\"",
    "\"false\"",
    "\"true\"",
    "\"function\"",
    "\"in\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"for\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"break\"",
    "\"continue\"",
    "\"return\"",
    "\"do\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\";\"",
    "\"==\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"^\"",
    "\"%%\"",
    "\"/\"",
    "\"?\"",
    "\">=\"",
    "\">\"",
    "\"<=\"",
    "\"<\"",
    "\"!=\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\":\"",
    "<id>",
    "\"\\\"\"",
    "<token of kind 54>",
    "\"\\\"\"",
  };

}
