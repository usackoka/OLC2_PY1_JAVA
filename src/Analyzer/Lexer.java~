/* The following code was generated by JFlex 1.7.0 */

package Analyzer;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lexer.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COM = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 14, 19, 19, 18,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    60, 58, 13, 41,  0, 53, 56, 16, 46, 47, 51, 39, 48, 40,  3, 17, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 59, 49, 55, 50, 54,  0, 
     0, 34, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 36, 12, 
    35, 12, 32, 12, 12, 12, 12, 12, 12, 12, 12, 42, 15, 43, 52, 38, 
     0,  9, 27, 24, 26,  7,  8, 31, 25, 22, 37, 12, 10, 30, 20, 21, 
    29, 12,  5, 11,  4,  6, 12, 28, 33, 12, 23, 44, 57, 45,  0,  0, 
     0,  0,  0,  0,  0, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\6\5\1\1\1\6"+
    "\1\1\1\7\12\5\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\1\1\31\1\32\2\2"+
    "\1\0\12\5\1\0\1\33\3\0\1\2\1\34\1\5"+
    "\1\35\22\5\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\5\5\1\50\2\5\1\51"+
    "\2\5\1\33\1\52\1\0\1\52\1\2\1\53\1\5"+
    "\1\54\1\5\1\55\1\5\1\56\1\57\15\5\1\60"+
    "\1\61\3\5\1\62\1\5\1\63\2\5\1\64\2\5"+
    "\1\65\1\5\1\66\1\67\1\70\5\5\1\71\12\5"+
    "\1\72\1\73\1\74\1\75\1\5\1\76\1\5\1\77"+
    "\3\5\1\100\1\5\1\101\1\102\1\103\5\5\1\104"+
    "\1\105\1\106\2\5\1\107\1\110\1\111\1\5\1\112"+
    "\1\113\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\172\0\u0131\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\172\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\172\0\172\0\172\0\172"+
    "\0\172\0\172\0\172\0\172\0\172\0\u0632\0\172\0\172"+
    "\0\172\0\u066f\0\u06ac\0\u06e9\0\u0726\0\172\0\172\0\172"+
    "\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e"+
    "\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u029f\0\172\0\u0a3f\0\u0a7c"+
    "\0\u0ab9\0\u0af6\0\172\0\u0b33\0\u01ab\0\u0b70\0\u0bad\0\u0bea"+
    "\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\172"+
    "\0\172\0\172\0\172\0\172\0\172\0\172\0\172\0\172"+
    "\0\u07a0\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u01ab\0\u10eb"+
    "\0\u1128\0\u01ab\0\u1165\0\u11a2\0\u029f\0\172\0\u11df\0\u0a7c"+
    "\0\u121c\0\u01ab\0\u1259\0\u01ab\0\u1296\0\u01ab\0\u12d3\0\u01ab"+
    "\0\u01ab\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e"+
    "\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u01ab\0\u01ab"+
    "\0\u1629\0\u1666\0\u16a3\0\u01ab\0\u16e0\0\u01ab\0\u171d\0\u175a"+
    "\0\u01ab\0\u1797\0\u17d4\0\u01ab\0\u1811\0\u01ab\0\u184e\0\u01ab"+
    "\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u01ab\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1"+
    "\0\u01ab\0\u01ab\0\u01ab\0\u01ab\0\u1c1e\0\u01ab\0\u1c5b\0\u01ab"+
    "\0\u1c98\0\u1cd5\0\u1d12\0\u01ab\0\u1d4f\0\u01ab\0\u01ab\0\u01ab"+
    "\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u01ab\0\u01ab\0\u01ab"+
    "\0\u1ebd\0\u1efa\0\u01ab\0\u01ab\0\u01ab\0\u1f37\0\u01ab\0\u01ab"+
    "\0\u01ab";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\2\11\1\14\1\11\1\15\1\16\1\3\1\17"+
    "\1\20\1\4\1\0\1\21\1\11\1\22\1\23\1\24"+
    "\1\11\1\25\1\26\1\27\1\11\1\30\1\11\1\31"+
    "\5\11\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\2\60"+
    "\1\4\20\60\1\4\1\0\37\60\1\61\11\60\76\0"+
    "\1\4\20\0\1\4\54\0\1\5\1\62\73\0\1\11"+
    "\1\0\1\11\1\63\7\11\7\0\23\11\30\0\1\11"+
    "\1\0\3\11\1\64\5\11\7\0\1\11\1\65\21\11"+
    "\30\0\1\11\1\0\11\11\7\0\23\11\30\0\1\11"+
    "\1\0\6\11\1\66\2\11\7\0\1\67\22\11\30\0"+
    "\1\11\1\0\2\11\1\70\2\11\1\71\3\11\7\0"+
    "\1\11\1\72\21\11\30\0\1\11\1\0\11\11\7\0"+
    "\2\11\1\73\5\11\1\74\12\11\26\0\15\75\1\76"+
    "\1\0\1\77\55\75\15\100\2\0\1\101\55\100\21\0"+
    "\1\102\41\0\1\103\13\0\1\11\1\0\6\11\1\104"+
    "\2\11\7\0\23\11\30\0\1\11\1\0\4\11\1\105"+
    "\4\11\7\0\12\11\1\106\10\11\30\0\1\11\1\0"+
    "\1\11\1\107\7\11\7\0\23\11\30\0\1\11\1\0"+
    "\5\11\1\110\3\11\7\0\5\11\1\111\15\11\30\0"+
    "\1\11\1\0\3\11\1\112\5\11\7\0\23\11\30\0"+
    "\1\11\1\0\2\11\1\113\6\11\7\0\23\11\30\0"+
    "\1\11\1\0\11\11\7\0\5\11\1\114\15\11\30\0"+
    "\1\11\1\0\5\11\1\115\3\11\7\0\23\11\30\0"+
    "\1\11\1\0\1\116\5\11\1\117\1\120\1\11\7\0"+
    "\7\11\1\121\2\11\1\122\10\11\30\0\1\11\1\0"+
    "\1\11\1\123\3\11\1\124\3\11\7\0\2\11\1\125"+
    "\1\11\1\126\3\11\1\127\12\11\75\0\1\130\75\0"+
    "\1\131\106\0\1\132\74\0\1\133\74\0\1\134\3\0"+
    "\1\135\76\0\1\136\75\0\1\137\24\0\1\140\55\0"+
    "\1\141\74\0\1\11\1\0\2\11\1\142\6\11\7\0"+
    "\23\11\30\0\1\11\1\0\11\11\7\0\11\11\1\143"+
    "\1\11\1\144\7\11\30\0\1\11\1\0\11\11\7\0"+
    "\12\11\1\145\10\11\30\0\1\11\1\0\7\11\1\146"+
    "\1\11\7\0\23\11\30\0\1\11\1\0\1\147\10\11"+
    "\7\0\23\11\30\0\1\11\1\0\7\11\1\150\1\11"+
    "\7\0\23\11\30\0\1\11\1\0\6\11\1\151\2\11"+
    "\7\0\23\11\30\0\1\11\1\0\1\11\1\152\7\11"+
    "\7\0\23\11\30\0\1\11\1\0\11\11\7\0\13\11"+
    "\1\153\7\11\30\0\1\11\1\0\11\11\7\0\2\11"+
    "\1\154\20\11\26\0\15\75\1\155\1\0\1\77\55\75"+
    "\20\0\1\156\54\0\16\100\1\0\1\157\1\160\54\100"+
    "\16\102\1\60\3\102\1\161\1\0\51\102\2\0\1\11"+
    "\1\0\11\11\7\0\1\11\1\162\21\11\30\0\1\11"+
    "\1\0\11\11\7\0\11\11\1\163\11\11\30\0\1\11"+
    "\1\0\11\11\7\0\1\11\1\164\21\11\30\0\1\11"+
    "\1\0\7\11\1\165\1\11\7\0\23\11\30\0\1\11"+
    "\1\0\1\11\1\166\7\11\7\0\23\11\30\0\1\11"+
    "\1\0\4\11\1\167\4\11\7\0\4\11\1\170\16\11"+
    "\30\0\1\11\1\0\6\11\1\171\2\11\7\0\23\11"+
    "\30\0\1\11\1\0\3\11\1\172\5\11\7\0\2\11"+
    "\1\173\20\11\30\0\1\11\1\0\11\11\7\0\2\11"+
    "\1\174\20\11\30\0\1\11\1\0\11\11\7\0\15\11"+
    "\1\175\5\11\30\0\1\11\1\0\11\11\7\0\7\11"+
    "\1\176\13\11\30\0\1\11\1\0\1\177\10\11\7\0"+
    "\23\11\30\0\1\11\1\0\1\200\10\11\7\0\23\11"+
    "\30\0\1\11\1\0\3\11\1\201\5\11\7\0\23\11"+
    "\30\0\1\11\1\0\3\11\1\202\5\11\7\0\23\11"+
    "\30\0\1\11\1\0\11\11\7\0\11\11\1\203\11\11"+
    "\30\0\1\11\1\0\11\11\7\0\12\11\1\204\10\11"+
    "\30\0\1\11\1\0\6\11\1\205\2\11\7\0\23\11"+
    "\30\0\1\11\1\0\1\11\1\206\2\11\1\207\4\11"+
    "\7\0\23\11\30\0\1\11\1\0\3\11\1\210\5\11"+
    "\7\0\23\11\30\0\1\11\1\0\3\11\1\211\5\11"+
    "\7\0\23\11\30\0\1\11\1\0\1\11\1\212\7\11"+
    "\7\0\23\11\30\0\1\11\1\0\11\11\7\0\11\11"+
    "\1\213\11\11\30\0\1\11\1\0\3\11\1\214\5\11"+
    "\7\0\23\11\30\0\1\11\1\0\11\11\7\0\2\11"+
    "\1\215\20\11\30\0\1\11\1\0\7\11\1\142\1\11"+
    "\7\0\23\11\30\0\1\11\1\0\5\11\1\216\3\11"+
    "\7\0\23\11\30\0\1\11\1\0\1\217\10\11\7\0"+
    "\23\11\43\0\1\100\2\0\1\156\72\0\1\60\60\0"+
    "\1\11\1\0\11\11\7\0\1\11\1\220\21\11\30\0"+
    "\1\11\1\0\3\11\1\221\5\11\7\0\23\11\30\0"+
    "\1\11\1\0\5\11\1\222\3\11\7\0\2\11\1\223"+
    "\20\11\30\0\1\11\1\0\11\11\7\0\1\224\22\11"+
    "\30\0\1\11\1\0\6\11\1\225\2\11\7\0\23\11"+
    "\30\0\1\11\1\0\11\11\7\0\1\226\22\11\30\0"+
    "\1\11\1\0\1\227\10\11\7\0\23\11\30\0\1\11"+
    "\1\0\6\11\1\230\2\11\7\0\23\11\30\0\1\11"+
    "\1\0\1\11\1\231\7\11\7\0\23\11\30\0\1\11"+
    "\1\0\11\11\7\0\1\11\1\232\21\11\30\0\1\11"+
    "\1\0\11\11\7\0\1\233\22\11\30\0\1\11\1\0"+
    "\5\11\1\234\3\11\7\0\23\11\30\0\1\11\1\0"+
    "\3\11\1\235\5\11\7\0\23\11\30\0\1\11\1\0"+
    "\11\11\7\0\11\11\1\236\11\11\30\0\1\11\1\0"+
    "\11\11\7\0\1\11\1\237\21\11\30\0\1\11\1\0"+
    "\11\11\7\0\2\11\1\240\20\11\30\0\1\11\1\0"+
    "\5\11\1\241\3\11\7\0\23\11\30\0\1\11\1\0"+
    "\3\11\1\242\5\11\7\0\23\11\30\0\1\11\1\0"+
    "\3\11\1\243\5\11\7\0\23\11\30\0\1\11\1\0"+
    "\11\11\7\0\1\11\1\244\21\11\30\0\1\11\1\0"+
    "\11\11\7\0\4\11\1\245\16\11\30\0\1\11\1\0"+
    "\1\11\1\246\7\11\7\0\23\11\30\0\1\11\1\0"+
    "\2\11\1\247\6\11\7\0\23\11\30\0\1\11\1\0"+
    "\11\11\7\0\1\250\22\11\30\0\1\11\1\0\3\11"+
    "\1\251\5\11\7\0\23\11\30\0\1\11\1\0\11\11"+
    "\7\0\16\11\1\252\1\253\1\254\2\11\30\0\1\11"+
    "\1\0\11\11\7\0\2\11\1\255\20\11\30\0\1\11"+
    "\1\0\11\11\7\0\1\256\22\11\30\0\1\11\1\0"+
    "\7\11\1\257\1\11\7\0\23\11\30\0\1\11\1\0"+
    "\11\11\7\0\6\11\1\260\14\11\30\0\1\11\1\0"+
    "\11\11\7\0\1\261\22\11\30\0\1\11\1\0\7\11"+
    "\1\262\1\11\7\0\23\11\30\0\1\11\1\0\1\263"+
    "\10\11\7\0\23\11\30\0\1\11\1\0\1\264\10\11"+
    "\7\0\23\11\30\0\1\11\1\0\7\11\1\265\1\11"+
    "\7\0\23\11\30\0\1\11\1\0\1\11\1\266\7\11"+
    "\7\0\23\11\30\0\1\11\1\0\11\11\7\0\1\267"+
    "\22\11\30\0\1\11\1\0\11\11\7\0\5\11\1\270"+
    "\15\11\30\0\1\11\1\0\1\271\10\11\7\0\23\11"+
    "\30\0\1\11\1\0\6\11\1\272\2\11\7\0\23\11"+
    "\30\0\1\11\1\0\11\11\7\0\2\11\1\273\20\11"+
    "\30\0\1\11\1\0\11\11\7\0\1\274\22\11\30\0"+
    "\1\11\1\0\5\11\1\275\3\11\7\0\23\11\30\0"+
    "\1\11\1\0\11\11\7\0\6\11\1\276\14\11\30\0"+
    "\1\11\1\0\3\11\1\277\5\11\7\0\23\11\30\0"+
    "\1\11\1\0\3\11\1\300\5\11\7\0\23\11\30\0"+
    "\1\11\1\0\5\11\1\301\3\11\7\0\23\11\30\0"+
    "\1\11\1\0\5\11\1\302\3\11\7\0\23\11\30\0"+
    "\1\11\1\0\1\303\10\11\7\0\23\11\30\0\1\11"+
    "\1\0\1\11\1\304\7\11\7\0\23\11\30\0\1\11"+
    "\1\0\11\11\7\0\13\11\1\305\7\11\30\0\1\11"+
    "\1\0\11\11\7\0\21\11\1\306\1\11\30\0\1\11"+
    "\1\0\1\11\1\307\7\11\7\0\23\11\30\0\1\11"+
    "\1\0\1\11\1\310\7\11\7\0\23\11\30\0\1\11"+
    "\1\0\3\11\1\311\5\11\7\0\23\11\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8052];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\7\1\1\11\16\1\11\11"+
    "\1\1\3\11\4\1\3\11\1\1\1\0\12\1\1\0"+
    "\1\11\3\0\1\1\1\11\24\1\11\11\15\1\1\11"+
    "\1\0\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      yyline = 0;
    yychar = 0;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //Generator.GetInstance().AddError("Lexio","Caracter: " + yytext() + " no reconocido",yyline,yychar);
            } 
            // fall through
          case 77: break;
          case 2: 
            { 
            } 
            // fall through
          case 78: break;
          case 3: 
            { return new Symbol(sym.ENT_LIT,yyline,yychar,yytext());
            } 
            // fall through
          case 79: break;
          case 4: 
            { return new Symbol(sym.DOT,yyline,yychar, yytext());
            } 
            // fall through
          case 80: break;
          case 5: 
            { return new Symbol(sym.ID,yyline,yychar,yytext());
            } 
            // fall through
          case 81: break;
          case 6: 
            { yychar=0;
            } 
            // fall through
          case 82: break;
          case 7: 
            { return new Symbol(sym.DIV,yyline,yychar, yytext());
            } 
            // fall through
          case 83: break;
          case 8: 
            { return new Symbol(sym.PLUS,yyline,yychar, yytext());
            } 
            // fall through
          case 84: break;
          case 9: 
            { return new Symbol(sym.MINUS,yyline,yychar, yytext());
            } 
            // fall through
          case 85: break;
          case 10: 
            { return new Symbol(sym.NUMERAL,yyline,yychar,yytext());
            } 
            // fall through
          case 86: break;
          case 11: 
            { return new Symbol(sym.LEFT_BRACKET,yyline,yychar, yytext());
            } 
            // fall through
          case 87: break;
          case 12: 
            { return new Symbol(sym.RIGHT_BRACKET,yyline,yychar, yytext());
            } 
            // fall through
          case 88: break;
          case 13: 
            { return new Symbol(sym.LEFT_BRACES,yyline,yychar, yytext());
            } 
            // fall through
          case 89: break;
          case 14: 
            { return new Symbol(sym.RIGHT_BRACES,yyline,yychar, yytext());
            } 
            // fall through
          case 90: break;
          case 15: 
            { return new Symbol(sym.LEFT_PARENT,yyline,yychar, yytext());
            } 
            // fall through
          case 91: break;
          case 16: 
            { return new Symbol(sym.RIGHT_PARENT,yyline,yychar, yytext());
            } 
            // fall through
          case 92: break;
          case 17: 
            { return new Symbol(sym.COMMA,yyline,yychar, yytext());
            } 
            // fall through
          case 93: break;
          case 18: 
            { return new Symbol(sym.SEMI,yyline,yychar, yytext());
            } 
            // fall through
          case 94: break;
          case 19: 
            { return new Symbol(sym.ASIG,yyline,yychar, yytext());
            } 
            // fall through
          case 95: break;
          case 20: 
            { return new Symbol(sym.TIMES,yyline,yychar, yytext());
            } 
            // fall through
          case 96: break;
          case 21: 
            { return new Symbol(sym.POT,yyline,yychar, yytext());
            } 
            // fall through
          case 97: break;
          case 22: 
            { return new Symbol(sym.MOD,yyline,yychar, yytext());
            } 
            // fall through
          case 98: break;
          case 23: 
            { return new Symbol(sym.GTR,yyline,yychar, yytext());
            } 
            // fall through
          case 99: break;
          case 24: 
            { return new Symbol(sym.LSS,yyline,yychar, yytext());
            } 
            // fall through
          case 100: break;
          case 25: 
            { return new Symbol(sym.NOT,yyline,yychar, yytext());
            } 
            // fall through
          case 101: break;
          case 26: 
            { return new Symbol(sym.TWO_POINTS,yyline,yychar, yytext());
            } 
            // fall through
          case 102: break;
          case 27: 
            { return new Symbol(sym.STRING_LIT,yyline,yychar,yytext());
            } 
            // fall through
          case 103: break;
          case 28: 
            { yybegin(COM);
            } 
            // fall through
          case 104: break;
          case 29: 
            { return new Symbol(sym.IFR,yyline,yychar,yytext());
            } 
            // fall through
          case 105: break;
          case 30: 
            { return new Symbol(sym.PLUSPLUS,yyline,yychar,yytext());
            } 
            // fall through
          case 106: break;
          case 31: 
            { return new Symbol(sym.MINUSMINUS,yyline,yychar,yytext());
            } 
            // fall through
          case 107: break;
          case 32: 
            { return new Symbol(sym.EQ,yyline,yychar, yytext());
            } 
            // fall through
          case 108: break;
          case 33: 
            { return new Symbol(sym.GTR_EQ,yyline,yychar, yytext());
            } 
            // fall through
          case 109: break;
          case 34: 
            { return new Symbol(sym.LSS_EQ,yyline,yychar, yytext());
            } 
            // fall through
          case 110: break;
          case 35: 
            { return new Symbol(sym.NOT_EQ,yyline,yychar, yytext());
            } 
            // fall through
          case 111: break;
          case 36: 
            { return new Symbol(sym.AND,yyline,yychar, yytext());
            } 
            // fall through
          case 112: break;
          case 37: 
            { return new Symbol(sym.OR,yyline,yychar, yytext());
            } 
            // fall through
          case 113: break;
          case 38: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 114: break;
          case 39: 
            { return new Symbol(sym.DEC_LIT,yyline,yychar,yytext());
            } 
            // fall through
          case 115: break;
          case 40: 
            { return new Symbol(sym.ENTR,yyline,yychar,yytext());
            } 
            // fall through
          case 116: break;
          case 41: 
            { return new Symbol(sym.FORR,yyline,yychar,yytext());
            } 
            // fall through
          case 117: break;
          case 42: 
            { return new Symbol(sym.CHAR_LIT,yyline,yychar,yytext());
            } 
            // fall through
          case 118: break;
          case 43: 
            { return new Symbol(sym.NLO,yyline,yychar,yytext());
            } 
            // fall through
          case 119: break;
          case 44: 
            { return new Symbol(sym.ZROR,yyline,yychar,yytext());
            } 
            // fall through
          case 120: break;
          case 45: 
            { return new Symbol(sym.CHRR,yyline,yychar,yytext());
            } 
            // fall through
          case 121: break;
          case 46: 
            { return new Symbol(sym.DECR,yyline,yychar,yytext());
            } 
            // fall through
          case 122: break;
          case 47: 
            { return new Symbol(sym.BULR,yyline,yychar,yytext());
            } 
            // fall through
          case 123: break;
          case 48: 
            { return new Symbol(sym.RWF,yyline,yychar,yytext());
            } 
            // fall through
          case 124: break;
          case 49: 
            { return new Symbol(sym.BOOL_LIT,yyline,yychar,yytext());
            } 
            // fall through
          case 125: break;
          case 50: 
            { return new Symbol(sym.ELSER,yyline,yychar,yytext());
            } 
            // fall through
          case 126: break;
          case 51: 
            { return new Symbol(sym.SIGAR,yyline,yychar,yytext());
            } 
            // fall through
          case 127: break;
          case 52: 
            { return new Symbol(sym.CASER,yyline,yychar,yytext());
            } 
            // fall through
          case 128: break;
          case 53: 
            { return new Symbol(sym.WHENR,yyline,yychar,yytext());
            } 
            // fall through
          case 129: break;
          case 54: 
            { return new Symbol(sym.MAIN,yyline,yychar,yytext());
            } 
            // fall through
          case 130: break;
          case 55: 
            { return new Symbol(sym.RTXT,yyline,yychar,yytext());
            } 
            // fall through
          case 131: break;
          case 56: 
            { return new Symbol(sym.RLBL,yyline,yychar,yytext());
            } 
            // fall through
          case 132: break;
          case 57: 
            { return new Symbol(sym.RIMP,yyline,yychar,yytext());
            } 
            // fall through
          case 133: break;
          case 58: 
            { return new Symbol(sym.WHILER,yyline,yychar,yytext());
            } 
            // fall through
          case 134: break;
          case 59: 
            { return new Symbol(sym.RTXTA,yyline,yychar,yytext());
            } 
            // fall through
          case 135: break;
          case 60: 
            { return new Symbol(sym.RTXTP,yyline,yychar,yytext());
            } 
            // fall through
          case 136: break;
          case 61: 
            { return new Symbol(sym.RTXTN,yyline,yychar,yytext());
            } 
            // fall through
          case 137: break;
          case 62: 
            { return new Symbol(sym.RBTON,yyline,yychar,yytext());
            } 
            // fall through
          case 138: break;
          case 63: 
            { return new Symbol(sym.RREAD,yyline,yychar,yytext());
            } 
            // fall through
          case 139: break;
          case 64: 
            { return new Symbol(sym.REPEATR,yyline,yychar,yytext());
            } 
            // fall through
          case 140: break;
          case 65: 
            { return new Symbol(sym.ROMPERR,yyline,yychar,yytext());
            } 
            // fall through
          case 141: break;
          case 66: 
            { return new Symbol(sym.FUSIONR,yyline,yychar,yytext());
            } 
            // fall through
          case 142: break;
          case 67: 
            { return new Symbol(sym.SWITCHR,yyline,yychar,yytext());
            } 
            // fall through
          case 143: break;
          case 68: 
            { return new Symbol(sym.RAPEND,yyline,yychar,yytext());
            } 
            // fall through
          case 144: break;
          case 69: 
            { return new Symbol(sym.RCLOSE,yyline,yychar,yytext());
            } 
            // fall through
          case 145: break;
          case 70: 
            { return new Symbol(sym.RWRITE,yyline,yychar,yytext());
            } 
            // fall through
          case 146: break;
          case 71: 
            { return new Symbol(sym.DEFAULTR,yyline,yychar,yytext());
            } 
            // fall through
          case 147: break;
          case 72: 
            { return new Symbol(sym.DEFINIRR,yyline,yychar,yytext());
            } 
            // fall through
          case 148: break;
          case 73: 
            { return new Symbol(sym.RSTRINGR,yyline,yychar,yytext());
            } 
            // fall through
          case 149: break;
          case 74: 
            { return new Symbol(sym.REGRESARR,yyline,yychar,yytext());
            } 
            // fall through
          case 150: break;
          case 75: 
            { return new Symbol(sym.IMPORTARR,yyline,yychar,yytext());
            } 
            // fall through
          case 151: break;
          case 76: 
            { return new Symbol(sym.RMENSAGE,yyline,yychar,yytext());
            } 
            // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
