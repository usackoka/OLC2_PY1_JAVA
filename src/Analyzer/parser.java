
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzer;

import java_cup.runtime.*;
import java.util.LinkedList;
import AST.*;
import AST.Expresiones.*;
import AST.Sentencias.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\003\000\002\024" +
    "\004\000\002\024\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\004\000\002\003\005\000\002\041\013\000" +
    "\002\041\014\000\002\004\003\000\002\004\002\000\002" +
    "\005\005\000\002\005\003\000\002\006\003\000\002\006" +
    "\005\000\002\023\003\000\002\023\002\000\002\022\005" +
    "\000\002\022\004\000\002\022\003\000\002\022\004\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\007\006\000\002\007\003\000\002\010\011\000" +
    "\002\010\012\000\002\011\004\000\002\011\006\000\002" +
    "\012\011\000\002\013\013\000\002\014\013\000\002\015" +
    "\012\000\002\016\007\000\002\016\006\000\002\017\005" +
    "\000\002\017\002\000\002\021\005\000\002\021\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\005\000\002\037" +
    "\007\000\002\031\006\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\033" +
    "\004\000\002\033\004\000\002\033\004\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\035\005\000\002" +
    "\035\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\020\003\000\002\020\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\024\011\023\013\005\014\021\015\031\020" +
    "\022\021\012\022\027\023\026\060\024\001\002\000\036" +
    "\002\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\027\uffe4\033\uffe4" +
    "\060\uffe4\001\002\000\004\030\262\001\002\000\030\002" +
    "\uffac\011\uffac\013\uffac\014\uffac\015\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\033\147\060\uffac\001\002\000\034\002" +
    "\uffe9\011\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\027\uffe9\060\uffe9\001" +
    "\002\000\004\002\260\001\002\000\026\002\ufffc\011\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\020\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\060\ufffc\001\002\000\036\002\uffe5\011\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\027\uffe5\033\uffe5\060\uffe5\001\002\000\026" +
    "\002\ufffe\011\ufffe\013\ufffe\014\ufffe\015\ufffe\020\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\060\ufffe\001\002\000\036\002\uffe2" +
    "\011\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\027\uffe2\033\uffe2\060\uffe2" +
    "\001\002\000\034\002\uffea\011\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\027\uffea\060\uffea\001\002\000\036\002\uffe3\011\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\027\uffe3\033\uffe3\060\uffe3\001\002\000" +
    "\034\002\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\027\uffe8\060" +
    "\uffe8\001\002\000\034\002\uffeb\011\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\027\uffeb\060\uffeb\001\002\000\004\030\250\001\002" +
    "\000\036\002\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\027\uffe6" +
    "\033\uffe6\060\uffe6\001\002\000\004\030\234\001\002\000" +
    "\006\030\124\035\203\001\002\000\026\002\000\011\023" +
    "\013\005\014\021\015\031\020\022\021\012\022\027\023" +
    "\026\060\024\001\002\000\004\026\172\001\002\000\040" +
    "\002\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\027\uffe0\030\167" +
    "\033\uffe0\060\uffe0\001\002\000\034\002\uffe7\011\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\027\uffe7\060\uffe7\001\002\000\004\030" +
    "\033\001\002\000\026\002\ufffd\011\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\060\ufffd\001" +
    "\002\000\032\004\056\005\051\006\041\017\054\030\055" +
    "\036\057\037\046\054\040\056\042\057\034\060\052\061" +
    "\036\001\002\000\102\002\uffc6\011\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\055\uffc6\060\uffc6\001\002\000\102\002\uffcd\011\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\027\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\055\uffcd\060\uffcd\001\002\000\102\002\uffc4" +
    "\011\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\027\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\055\uffc4\060\uffc4\001\002\000" +
    "\102\002\uffce\011\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\027\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047" +
    "\uffce\050\uffce\051\uffce\052\uffce\053\uffce\055\uffce\060\uffce" +
    "\001\002\000\032\004\056\005\051\006\041\017\054\030" +
    "\055\036\057\037\046\054\040\056\042\057\034\060\052" +
    "\061\036\001\002\000\102\002\uffc8\011\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053" +
    "\uffc8\055\uffc8\060\uffc8\001\002\000\102\002\uffc9\011\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\022\uffc9\023\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\055\uffc9\060\uffc9\001\002\000\102\002" +
    "\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\027\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\055\uffc1\060\uffc1\001\002" +
    "\000\102\002\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\027\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\055\uffc0\060" +
    "\uffc0\001\002\000\102\002\uffd1\011\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\055\uffd1\060\uffd1\001\002\000\032\004\056\005\051\006" +
    "\041\017\054\030\055\036\057\037\046\054\040\056\042" +
    "\057\034\060\052\061\036\001\002\000\102\002\uffbf\011" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\027\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\055\uffbf\060\uffbf\001\002\000\042" +
    "\031\132\034\072\036\077\037\067\040\075\041\062\042" +
    "\074\043\063\044\071\045\064\046\100\047\076\050\070" +
    "\051\073\052\066\053\065\001\002\000\102\002\uffc7\011" +
    "\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\027\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\052\uffc7\053\uffc7\055\uffc7\060\uffc7\001\002\000\104" +
    "\002\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\027\uffc3\030\124" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\055\uffc3\060" +
    "\uffc3\001\002\000\102\002\uffd0\011\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\055\uffd0\060\uffd0\001\002\000\102\002\uffc2\011\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\027\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\055\uffc2\060\uffc2\001\002\000\032\004\056" +
    "\005\051\006\041\017\054\030\055\036\057\037\046\054" +
    "\040\056\042\057\034\060\052\061\036\001\002\000\102" +
    "\002\uffc5\011\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\027\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\055\uffc5\060\uffc5\001" +
    "\002\000\032\004\056\005\051\006\041\017\054\030\055" +
    "\036\057\037\046\054\040\056\042\057\034\060\052\061" +
    "\036\001\002\000\102\002\uffcf\011\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\055\uffcf\060\uffcf\001\002\000\102\002\uffbc\011\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\027\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\055\uffbc\060\uffbc\001\002\000\032\004\056" +
    "\005\051\006\041\017\054\030\055\036\057\037\046\054" +
    "\040\056\042\057\034\060\052\061\036\001\002\000\032" +
    "\004\056\005\051\006\041\017\054\030\055\036\057\037" +
    "\046\054\040\056\042\057\034\060\052\061\036\001\002" +
    "\000\032\004\056\005\051\006\041\017\054\030\055\036" +
    "\057\037\046\054\040\056\042\057\034\060\052\061\036" +
    "\001\002\000\032\004\056\005\051\006\041\017\054\030" +
    "\055\036\057\037\046\054\040\056\042\057\034\060\052" +
    "\061\036\001\002\000\032\004\056\005\051\006\041\017" +
    "\054\030\055\036\057\037\046\054\040\056\042\057\034" +
    "\060\052\061\036\001\002\000\032\004\056\005\051\006" +
    "\041\017\054\030\055\036\057\037\046\054\040\056\042" +
    "\057\034\060\052\061\036\001\002\000\032\004\056\005" +
    "\051\006\041\017\054\030\055\036\057\037\046\054\040" +
    "\056\042\057\034\060\052\061\036\001\002\000\032\004" +
    "\056\005\051\006\041\017\054\030\055\036\057\037\046" +
    "\054\040\056\042\057\034\060\052\061\036\001\002\000" +
    "\032\004\056\005\051\006\041\017\054\030\055\036\057" +
    "\037\046\054\040\056\042\057\034\060\052\061\036\001" +
    "\002\000\032\004\056\005\051\006\041\017\054\030\055" +
    "\036\057\037\046\054\040\056\042\057\034\060\052\061" +
    "\036\001\002\000\032\004\056\005\051\006\041\017\054" +
    "\030\055\036\057\037\046\054\040\056\042\057\034\060" +
    "\052\061\036\001\002\000\032\004\056\005\051\006\041" +
    "\017\054\030\055\036\057\037\046\054\040\056\042\057" +
    "\034\060\052\061\036\001\002\000\032\004\056\005\051" +
    "\006\041\017\054\030\055\036\057\037\046\054\040\056" +
    "\042\057\034\060\052\061\036\001\002\000\032\004\056" +
    "\005\051\006\041\017\054\030\055\036\057\037\046\054" +
    "\040\056\042\057\034\060\052\061\036\001\002\000\032" +
    "\004\056\005\051\006\041\017\054\030\055\036\057\037" +
    "\046\054\040\056\042\057\034\060\052\061\036\001\002" +
    "\000\072\002\uffb1\011\uffb1\013\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\027\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\034\uffb1\036\077\037\067\040" +
    "\075\041\062\042\074\043\063\044\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\055\uffb1\060\uffb1\001\002\000\102\002\uffbb\011" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\027\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\036\uffbb\037\uffbb\040\075\041\062\042\074" +
    "\043\063\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\055\uffbb\060\uffbb\001\002\000\072" +
    "\002\uffb2\011\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\027\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\036\077\037\067\040\075\041" +
    "\062\042\074\043\063\044\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\055\uffb2\060\uffb2\001\002\000\102\002\uffb9\011\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\062\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\055\uffb9\060\uffb9\001\002\000\102\002\uffb6" +
    "\011\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\027\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\036\uffb6\037\uffb6\040\uffb6\041\062\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\055\uffb6\060\uffb6\001\002\000" +
    "\102\002\uffae\011\uffae\013\uffae\014\uffae\015\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\027\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\036\077\037\067\040\075" +
    "\041\062\042\074\043\063\044\uffae\045\064\046\100\047" +
    "\076\050\070\051\uffae\052\uffae\053\uffae\055\uffae\060\uffae" +
    "\001\002\000\102\002\uffaf\011\uffaf\013\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\027\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\036\077\037" +
    "\067\040\075\041\062\042\074\043\063\044\uffaf\045\064" +
    "\046\100\047\076\050\070\051\uffaf\052\uffaf\053\uffaf\055" +
    "\uffaf\060\uffaf\001\002\000\042\034\072\036\077\037\067" +
    "\040\075\041\062\042\074\043\063\044\071\045\064\046" +
    "\100\047\076\050\070\051\073\052\066\053\065\055\111" +
    "\001\002\000\032\004\056\005\051\006\041\017\054\030" +
    "\055\036\057\037\046\054\040\056\042\057\034\060\052" +
    "\061\036\001\002\000\102\002\uffcb\011\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034\072\036" +
    "\077\037\067\040\075\041\062\042\074\043\063\044\071" +
    "\045\064\046\100\047\076\050\070\051\073\052\066\053" +
    "\065\055\uffcb\060\uffcb\001\002\000\072\002\uffb3\011\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\036\077\037\067\040\075\041\062\042\074\043" +
    "\063\044\uffb3\051\uffb3\052\uffb3\053\uffb3\055\uffb3\060\uffb3" +
    "\001\002\000\102\002\uffba\011\uffba\013\uffba\014\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\027\uffba\031\uffba\032\uffba\033\uffba\034\uffba\036\uffba\037" +
    "\uffba\040\075\041\062\042\074\043\063\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\055" +
    "\uffba\060\uffba\001\002\000\102\002\uffb4\011\uffb4\013\uffb4" +
    "\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\027\uffb4\031\uffb4\032\uffb4\033\uffb4\034\072" +
    "\036\077\037\067\040\075\041\062\042\074\043\063\044" +
    "\uffb4\045\064\046\100\047\076\050\070\051\073\052\uffb4" +
    "\053\uffb4\055\uffb4\060\uffb4\001\002\000\102\002\uffb5\011" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\027\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\072\036\077\037\067\040\075\041\062\042\074" +
    "\043\063\044\uffb5\045\064\046\100\047\076\050\070\051" +
    "\073\052\066\053\uffb5\055\uffb5\060\uffb5\001\002\000\072" +
    "\002\uffb0\011\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\027\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\036\077\037\067\040\075\041" +
    "\062\042\074\043\063\044\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\055\uffb0\060\uffb0\001\002\000\102\002\uffb8\011\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\027\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\062\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\055\uffb8\060\uffb8\001\002\000\102\002\uffb7" +
    "\011\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\027\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\055\uffb7\060\uffb7\001\002\000" +
    "\042\031\123\034\072\036\077\037\067\040\075\041\062" +
    "\042\074\043\063\044\071\045\064\046\100\047\076\050" +
    "\070\051\073\052\066\053\065\001\002\000\102\002\uffcc" +
    "\011\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\027\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\055\uffcc\060\uffcc\001\002\000" +
    "\032\004\056\005\051\006\041\017\054\030\055\036\057" +
    "\037\046\054\040\056\042\057\034\060\052\061\036\001" +
    "\002\000\044\031\uffd2\032\uffd2\034\072\036\077\037\067" +
    "\040\075\041\062\042\074\043\063\044\071\045\064\046" +
    "\100\047\076\050\070\051\073\052\066\053\065\001\002" +
    "\000\006\031\127\032\130\001\002\000\102\002\uffca\011" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\027\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051" +
    "\uffca\052\uffca\053\uffca\055\uffca\060\uffca\001\002\000\032" +
    "\004\056\005\051\006\041\017\054\030\055\036\057\037" +
    "\046\054\040\056\042\057\034\060\052\061\036\001\002" +
    "\000\044\031\uffd3\032\uffd3\034\072\036\077\037\067\040" +
    "\075\041\062\042\074\043\063\044\071\045\064\046\100" +
    "\047\076\050\070\051\073\052\066\053\065\001\002\000" +
    "\004\026\133\001\002\000\004\016\135\001\002\000\010" +
    "\016\156\017\155\027\uffd4\001\002\000\032\004\056\005" +
    "\051\006\041\017\054\030\055\036\057\037\046\054\040" +
    "\056\042\057\034\060\052\061\036\001\002\000\042\034" +
    "\072\036\077\037\067\040\075\041\062\042\074\043\063" +
    "\044\071\045\064\046\100\047\076\050\070\051\073\052" +
    "\066\053\065\055\137\001\002\000\032\011\023\013\005" +
    "\014\021\015\031\016\ufff0\017\ufff0\020\022\021\012\022" +
    "\027\023\026\027\ufff0\060\142\001\002\000\034\011\uffac" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\027\uffac\033\147\060\uffac\001\002" +
    "\000\032\011\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\027\uffed\060\uffed" +
    "\001\002\000\006\030\124\035\151\001\002\000\032\011" +
    "\023\013\005\014\021\015\031\016\ufff1\017\ufff1\020\022" +
    "\021\012\022\027\023\026\027\ufff1\060\142\001\002\000" +
    "\010\016\uffd6\017\uffd6\027\uffd6\001\002\000\034\011\uffac" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\027\uffac\033\147\060\uffac\001\002" +
    "\000\032\011\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\027\uffee\060\uffee" +
    "\001\002\000\034\002\uffad\011\uffad\013\uffad\014\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\027\uffad\060\uffad\001\002\000\032\011\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\027\uffef\060\uffef\001\002\000\032\004\056\005" +
    "\051\006\041\017\054\030\055\036\057\037\046\054\040" +
    "\056\042\057\034\060\052\061\036\001\002\000\074\002" +
    "\ufffa\011\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\027\ufffa\033\ufffa\034" +
    "\072\036\077\037\067\040\075\041\062\042\074\043\063" +
    "\044\071\045\064\046\100\047\076\050\070\051\073\052" +
    "\066\053\065\060\ufffa\001\002\000\032\011\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\027\uffec\060\uffec\001\002\000\004\027\164" +
    "\001\002\000\004\055\162\001\002\000\032\004\056\005" +
    "\051\006\041\017\054\030\055\036\057\037\046\054\040" +
    "\056\042\057\034\060\052\061\036\001\002\000\042\034" +
    "\072\036\077\037\067\040\075\041\062\042\074\043\063" +
    "\044\071\045\064\046\100\047\076\050\070\051\073\052" +
    "\066\053\065\055\160\001\002\000\032\011\023\013\005" +
    "\014\021\015\031\016\ufff0\017\ufff0\020\022\021\012\022" +
    "\027\023\026\027\ufff0\060\142\001\002\000\010\016\uffd7" +
    "\017\uffd7\027\uffd7\001\002\000\026\011\023\013\005\014" +
    "\021\015\031\020\022\021\012\022\027\023\026\027\ufff0" +
    "\060\142\001\002\000\004\027\uffd5\001\002\000\034\002" +
    "\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\027\uffd8\060\uffd8\001" +
    "\002\000\102\002\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\027" +
    "\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\055\uffbe" +
    "\060\uffbe\001\002\000\102\002\uffbd\011\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\027\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\055\uffbd\060\uffbd\001\002\000\032\004\056\005\051" +
    "\006\041\017\054\030\055\036\057\037\046\054\040\056" +
    "\042\057\034\060\052\061\036\001\002\000\042\031\171" +
    "\034\072\036\077\037\067\040\075\041\062\042\074\043" +
    "\063\044\071\045\064\046\100\047\076\050\070\051\073" +
    "\052\066\053\065\001\002\000\036\002\uffe1\011\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\027\uffe1\033\uffe1\060\uffe1\001\002\000" +
    "\026\011\023\013\005\014\021\015\031\020\022\021\012" +
    "\022\027\023\026\027\ufff0\060\142\001\002\000\004\027" +
    "\174\001\002\000\004\013\175\001\002\000\004\030\176" +
    "\001\002\000\032\004\056\005\051\006\041\017\054\030" +
    "\055\036\057\037\046\054\040\056\042\057\034\060\052" +
    "\061\036\001\002\000\042\031\200\034\072\036\077\037" +
    "\067\040\075\041\062\042\074\043\063\044\071\045\064" +
    "\046\100\047\076\050\070\051\073\052\066\053\065\001" +
    "\002\000\004\033\201\001\002\000\034\002\uffda\011\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\027\uffda\060\uffda\001\002\000\026" +
    "\002\uffff\011\uffff\013\uffff\014\uffff\015\uffff\020\uffff\021" +
    "\uffff\022\uffff\023\uffff\060\uffff\001\002\000\034\004\056" +
    "\005\051\006\041\007\204\017\054\030\205\036\057\037" +
    "\046\054\040\056\042\057\034\060\052\061\036\001\002" +
    "\000\004\030\226\001\002\000\034\004\056\005\051\006" +
    "\041\017\054\030\055\031\ufff6\036\057\037\046\054\040" +
    "\056\042\057\034\060\210\061\036\001\002\000\044\031" +
    "\123\032\ufff3\034\072\036\077\037\067\040\075\041\062" +
    "\042\074\043\063\044\071\045\064\046\100\047\076\050" +
    "\070\051\073\052\066\053\065\001\002\000\004\031\220" +
    "\001\002\000\050\030\124\031\uffc3\032\uffc3\034\uffc3\035" +
    "\216\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\001\002\000\006\031\ufff7\032\213\001\002" +
    "\000\006\031\ufff4\032\ufff4\001\002\000\032\004\056\005" +
    "\051\006\041\017\054\030\055\036\057\037\046\054\040" +
    "\056\042\057\034\060\210\061\036\001\002\000\044\031" +
    "\ufff3\032\ufff3\034\072\036\077\037\067\040\075\041\062" +
    "\042\074\043\063\044\071\045\064\046\100\047\076\050" +
    "\070\051\073\052\066\053\065\001\002\000\006\031\ufff5" +
    "\032\ufff5\001\002\000\032\004\056\005\051\006\041\017" +
    "\054\030\055\036\057\037\046\054\040\056\042\057\034" +
    "\060\052\061\036\001\002\000\044\031\ufff2\032\ufff2\034" +
    "\072\036\077\037\067\040\075\041\062\042\074\043\063" +
    "\044\071\045\064\046\100\047\076\050\070\051\073\052" +
    "\066\053\065\001\002\000\004\035\221\001\002\000\004" +
    "\046\222\001\002\000\004\026\223\001\002\000\026\011" +
    "\023\013\005\014\021\015\031\020\022\021\012\022\027" +
    "\023\026\027\ufff0\060\142\001\002\000\004\027\225\001" +
    "\002\000\026\002\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\060\ufff8\001\002\000" +
    "\034\004\056\005\051\006\041\017\054\030\055\031\ufff6" +
    "\036\057\037\046\054\040\056\042\057\034\060\210\061" +
    "\036\001\002\000\004\031\230\001\002\000\004\026\231" +
    "\001\002\000\026\011\023\013\005\014\021\015\031\020" +
    "\022\021\012\022\027\023\026\027\ufff0\060\142\001\002" +
    "\000\004\027\233\001\002\000\026\002\ufff9\011\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9" +
    "\060\ufff9\001\002\000\032\004\056\005\051\006\041\017" +
    "\054\030\055\036\057\037\046\054\040\056\042\057\034" +
    "\060\052\061\036\001\002\000\042\031\236\034\072\036" +
    "\077\037\067\040\075\041\062\042\074\043\063\044\071" +
    "\045\064\046\100\047\076\050\070\051\073\052\066\053" +
    "\065\001\002\000\004\026\237\001\002\000\026\011\023" +
    "\013\005\014\021\015\031\020\022\021\012\022\027\023" +
    "\026\027\ufff0\060\142\001\002\000\004\027\241\001\002" +
    "\000\036\002\uffdf\011\uffdf\012\243\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\027\uffdf\060\uffdf\001\002\000\034\002\uffde\011\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\027\uffde\060\uffde\001\002\000\006\011" +
    "\023\026\244\001\002\000\026\011\023\013\005\014\021" +
    "\015\031\020\022\021\012\022\027\023\026\027\ufff0\060" +
    "\142\001\002\000\034\002\uffdd\011\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\027\uffdd\060\uffdd\001\002\000\004\027\247\001\002" +
    "\000\034\002\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\027\uffdc" +
    "\060\uffdc\001\002\000\004\060\251\001\002\000\004\010" +
    "\252\001\002\000\032\004\056\005\051\006\041\017\054" +
    "\030\055\036\057\037\046\054\040\056\042\057\034\060" +
    "\052\061\036\001\002\000\042\031\254\034\072\036\077" +
    "\037\067\040\075\041\062\042\074\043\063\044\071\045" +
    "\064\046\100\047\076\050\070\051\073\052\066\053\065" +
    "\001\002\000\004\026\255\001\002\000\026\011\023\013" +
    "\005\014\021\015\031\020\022\021\012\022\027\023\026" +
    "\027\ufff0\060\142\001\002\000\004\027\257\001\002\000" +
    "\034\002\uffd9\011\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\027\uffd9\060" +
    "\uffd9\001\002\000\004\002\001\001\002\000\026\002\ufffb" +
    "\011\ufffb\013\ufffb\014\ufffb\015\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\060\ufffb\001\002\000\032\004\056\005\051" +
    "\006\041\017\054\030\055\036\057\037\046\054\040\056" +
    "\042\057\034\060\052\061\036\001\002\000\042\031\264" +
    "\034\072\036\077\037\067\040\075\041\062\042\074\043" +
    "\063\044\071\045\064\046\100\047\076\050\070\051\073" +
    "\052\066\053\065\001\002\000\004\026\265\001\002\000" +
    "\026\011\023\013\005\014\021\015\031\020\022\021\012" +
    "\022\027\023\026\027\ufff0\060\142\001\002\000\004\027" +
    "\267\001\002\000\034\002\uffdb\011\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\027\uffdb\060\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\036\002\007\003\015\007\013\010\017\012" +
    "\006\013\016\014\027\015\014\024\024\025\012\026\005" +
    "\031\003\040\010\041\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\015\007\013\010\017\012\006\013\016\014" +
    "\027\015\014\025\201\026\005\031\003\040\010\041\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\027\044" +
    "\030\047\031\034\032\052\033\057\034\042\035\043\036" +
    "\046\037\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\027\044\030" +
    "\165\031\034\032\052\033\057\034\042\035\043\036\046" +
    "\037\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\027\044\030\164\031\034\032\052\033\057\034\042\035" +
    "\043\036\046\037\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\027\044\030\121\031\034" +
    "\032\052\033\057\034\042\035\043\036\046\037\036\001" +
    "\001\000\002\001\001\000\024\027\044\030\060\031\034" +
    "\032\052\033\057\034\042\035\043\036\046\037\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\027\044" +
    "\030\120\031\034\032\052\033\057\034\042\035\043\036" +
    "\046\037\036\001\001\000\024\027\044\030\117\031\034" +
    "\032\052\033\057\034\042\035\043\036\046\037\036\001" +
    "\001\000\024\027\044\030\116\031\034\032\052\033\057" +
    "\034\042\035\043\036\046\037\036\001\001\000\024\027" +
    "\044\030\115\031\034\032\052\033\057\034\042\035\043" +
    "\036\046\037\036\001\001\000\024\027\044\030\114\031" +
    "\034\032\052\033\057\034\042\035\043\036\046\037\036" +
    "\001\001\000\024\027\044\030\113\031\034\032\052\033" +
    "\057\034\042\035\043\036\046\037\036\001\001\000\024" +
    "\027\044\030\112\031\034\032\052\033\057\034\042\035" +
    "\043\036\046\037\036\001\001\000\024\027\044\030\107" +
    "\031\034\032\052\033\057\034\042\035\043\036\046\037" +
    "\036\001\001\000\024\027\044\030\106\031\034\032\052" +
    "\033\057\034\042\035\043\036\046\037\036\001\001\000" +
    "\024\027\044\030\105\031\034\032\052\033\057\034\042" +
    "\035\043\036\046\037\036\001\001\000\024\027\044\030" +
    "\104\031\034\032\052\033\057\034\042\035\043\036\046" +
    "\037\036\001\001\000\024\027\044\030\103\031\034\032" +
    "\052\033\057\034\042\035\043\036\046\037\036\001\001" +
    "\000\024\027\044\030\102\031\034\032\052\033\057\034" +
    "\042\035\043\036\046\037\036\001\001\000\024\027\044" +
    "\030\101\031\034\032\052\033\057\034\042\035\043\036" +
    "\046\037\036\001\001\000\024\027\044\030\100\031\034" +
    "\032\052\033\057\034\042\035\043\036\046\037\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\027\044\030\111" +
    "\031\034\032\052\033\057\034\042\035\043\036\046\037" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\021\125\027\044\030\124\031" +
    "\034\032\052\033\057\034\042\035\043\036\046\037\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\027\044\030\130\031\034\032\052\033\057" +
    "\034\042\035\043\036\046\037\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\133\001\001\000\004" +
    "\017\153\001\001\000\024\027\044\030\135\031\034\032" +
    "\052\033\057\034\042\035\043\036\046\037\036\001\001" +
    "\000\002\001\001\000\032\003\015\007\013\010\017\012" +
    "\006\013\016\014\027\015\014\022\142\023\143\026\137" +
    "\031\003\040\140\001\001\000\004\020\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\015\007\013" +
    "\010\017\012\006\013\016\014\027\015\014\026\144\031" +
    "\003\040\145\001\001\000\002\001\001\000\004\020\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\027\044\030\151\031\034\032\052\033\057" +
    "\034\042\035\043\036\046\037\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\027\044\030\156\031\034\032\052\033\057\034" +
    "\042\035\043\036\046\037\036\001\001\000\002\001\001" +
    "\000\032\003\015\007\013\010\017\012\006\013\016\014" +
    "\027\015\014\022\142\023\160\026\137\031\003\040\140" +
    "\001\001\000\002\001\001\000\032\003\015\007\013\010" +
    "\017\012\006\013\016\014\027\015\014\022\142\023\162" +
    "\026\137\031\003\040\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\027\044\030\167\031\034\032\052\033\057\034\042\035" +
    "\043\036\046\037\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\015\007\013\010\017\012\006\013" +
    "\016\014\027\015\014\022\142\023\172\026\137\031\003" +
    "\040\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\027\044\030\176\031\034\032\052" +
    "\033\057\034\042\035\043\036\046\037\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\027\044\030\151\031\034\032\052\033" +
    "\057\034\042\035\043\036\046\037\036\001\001\000\002" +
    "\001\001\000\032\004\206\005\210\006\211\027\044\030" +
    "\205\031\034\032\052\033\057\034\042\035\043\036\046" +
    "\037\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\006\214\027\044\030\213\031\034\032\052\033\057\034" +
    "\042\035\043\036\046\037\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\027\044\030\216\031\034\032" +
    "\052\033\057\034\042\035\043\036\046\037\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\015\007\013\010\017\012\006" +
    "\013\016\014\027\015\014\022\142\023\223\026\137\031" +
    "\003\040\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\226\005\210\006\211\027\044\030\213\031" +
    "\034\032\052\033\057\034\042\035\043\036\046\037\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\015\007\013\010\017\012\006\013\016\014\027\015\014" +
    "\022\142\023\231\026\137\031\003\040\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\027\044\030\234" +
    "\031\034\032\052\033\057\034\042\035\043\036\046\037" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\015\007\013\010\017\012\006\013\016\014\027\015" +
    "\014\022\142\023\237\026\137\031\003\040\140\001\001" +
    "\000\002\001\001\000\004\011\241\001\001\000\002\001" +
    "\001\000\004\010\244\001\001\000\032\003\015\007\013" +
    "\010\017\012\006\013\016\014\027\015\014\022\142\023" +
    "\245\026\137\031\003\040\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\027\044\030\252\031\034\032\052" +
    "\033\057\034\042\035\043\036\046\037\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\015\007\013" +
    "\010\017\012\006\013\016\014\027\015\014\022\142\023" +
    "\255\026\137\031\003\040\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\027\044\030\262\031\034\032\052\033\057\034\042" +
    "\035\043\036\046\037\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\015\007\013\010\017\012\006" +
    "\013\016\014\027\015\014\022\142\023\265\026\137\031" +
    "\003\040\140\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* RAIZ */
    Principal principal;

    public void setPrincipal(Principal principal){
        this.principal = principal;
    }

    /**
    *   Metodo que retorna la raiz del arbol
    **/
    public Principal getPrincipal(){
        return this.principal;
    }
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la linea: " + (s.left) +" Columna: " +s.right+ ". No se esperaba este componente: " + s.value+"."); 
        Token token = new Token();
        token.lexema = s.value+"";
        token.componenteLexico = "Sintáctico";
        token.descripcion = "No se esperaba: "+s.value;
        token.columna = s.right+1+"";
        token.fila = s.left+1+"";
        this.principal.addError(token);
    }
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error Sintactico irrecuperable en la Lienea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
        Token token = new Token();
        token.lexema = s.value+"";
        token.componenteLexico = "Sintáctico inrecuperable";
        token.descripcion = "No se esperaba: "+s.value;
        token.columna = s.right+1+"";
        token.fila = s.left+1+"";
        this.principal.addError(token);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= DECLARACIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        principal.setNodos(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
        a.add(b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= DECLARACION 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<Nodo>();
        RESULT.add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= FUNCION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= SENTENCIA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= INSTRUCCION PUEDE_SEMICOLON 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARIABLE ::= id igual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCION ::= id igual res_function l_parent PARAMETROS r_parent l_llave BLOQUES r_llave 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= id igual l_parent PARAMETROS r_parent igual mayor l_llave BLOQUES r_llave 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PARAMETROS ::= LISTA_PARAMETROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMETROS ::= 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_PARAMETROS ::= LISTA_PARAMETROS coma PARAMETRO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_PARAMETROS ::= PARAMETRO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMETRO ::= E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETRO ::= id igual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOQUES ::= LISTA_BLOQUES 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOQUES ::= 
            {
              LinkedList<Nodo> RESULT =null;
		
        RESULT = new LinkedList<Nodo>();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_BLOQUES ::= LISTA_BLOQUES INSTRUCCION PUEDE_SEMICOLON 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = a;
        RESULT.add(b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_BLOQUES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_BLOQUES ::= LISTA_BLOQUES SENTENCIA 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
        RESULT.add(b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_BLOQUES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_BLOQUES ::= SENTENCIA 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<Nodo>();
        RESULT.add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_BLOQUES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_BLOQUES ::= INSTRUCCION PUEDE_SEMICOLON 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new LinkedList<Nodo>();
        RESULT.add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_BLOQUES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= IF 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SWITCH 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= WHILE 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= DOWHILE 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= FOR 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= res_break 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= res_continue 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= LLAMADA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCION ::= VARIABLE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION ::= RETURN 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RETURN ::= res_return l_parent E r_parent 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RETURN ::= res_return 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IF ::= res_if l_parent E r_parent l_llave BLOQUES r_llave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF ::= res_if l_parent E r_parent l_llave BLOQUES r_llave ELSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELSE ::= res_else IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELSE ::= res_else l_llave BLOQUES r_llave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // WHILE ::= res_while l_parent E r_parent l_llave BLOQUES r_llave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DOWHILE ::= res_do l_llave BLOQUES r_llave res_while l_parent E r_parent puntocoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FOR ::= res_for l_parent id res_in E r_parent l_llave BLOQUES r_llave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SWITCH ::= res_switch l_parent E r_parent l_llave LISTA_CASOS DEFAULT r_llave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA_CASOS ::= LISTA_CASOS res_case E dospuntos BLOQUES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTA_CASOS ::= res_case E dospuntos BLOQUES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEFAULT ::= res_default dospuntos BLOQUES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DEFAULT ::= 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTA_E ::= LISTA_E coma E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA_E ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= CONSTANTE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= BINARIA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= UNARIA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= TERNARIA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= LLAMADA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= l_parent E r_parent 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TERNARIA ::= E ternario E dospuntos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIA",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LLAMADA ::= id l_parent LISTA_E r_parent 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Llamada(a,b,aright+1,aleft+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONSTANTE ::= numero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Primitivo(Integer.parseInt(a),Expresion.TIPO_PRIMITIVO.INTEGER,aright+1,aleft+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONSTANTE ::= res_true 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Primitivo(true,Expresion.TIPO_PRIMITIVO.BOOLEAN,aright+1,aleft+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONSTANTE ::= res_false 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Primitivo(false,Expresion.TIPO_PRIMITIVO.BOOLEAN,aright+1,aleft+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONSTANTE ::= doble 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Primitivo(Double.parseDouble(a),Expresion.TIPO_PRIMITIVO.DOUBLE,aright+1,aleft+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONSTANTE ::= res_null 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Primitivo("",Expresion.TIPO_PRIMITIVO.STRING,aright+1,aleft+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONSTANTE ::= cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Primitivo(a,Expresion.TIPO_PRIMITIVO.STRING,aright+1,aleft+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONSTANTE ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Primitivo(a,Expresion.TIPO_PRIMITIVO.VARIABLE,aright+1,aleft+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONSTANTE ::= res_default 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Primitivo("",Expresion.TIPO_PRIMITIVO.DEFAULT,aright+1,aleft+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BINARIA ::= ARITMETICA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BINARIA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BINARIA ::= LOGICA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BINARIA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BINARIA ::= RELACIONAL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BINARIA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // UNARIA ::= menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNARIA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // UNARIA ::= not E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNARIA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // UNARIA ::= mas E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNARIA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARITMETICA ::= E mas E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARITMETICA ::= E menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARITMETICA ::= E por E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARITMETICA ::= E div E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARITMETICA ::= E potencia E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ARITMETICA ::= E modular E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LOGICA ::= E or E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LOGICA ::= E and E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RELACIONAL ::= E menor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RELACIONAL ::= E menorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RELACIONAL ::= E mayor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RELACIONAL ::= E mayorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RELACIONAL ::= E igualigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // RELACIONAL ::= E diferente E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PUEDE_SEMICOLON ::= puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUEDE_SEMICOLON",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PUEDE_SEMICOLON ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUEDE_SEMICOLON",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
