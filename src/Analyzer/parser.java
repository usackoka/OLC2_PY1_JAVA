
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzer;

import java_cup.runtime.*;
import java.util.LinkedList;
import AST.*;
import AST.Expresiones.*;
import AST.Sentencias.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\003\000\002\011" +
    "\004\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\004\000\002\030\005\000\002\030\005\000" +
    "\002\027\013\000\002\027\014\000\002\044\003\000\002" +
    "\044\002\000\002\043\005\000\002\043\003\000\002\041" +
    "\003\000\002\041\005\000\002\010\003\000\002\010\002" +
    "\000\002\007\005\000\002\007\004\000\002\007\003\000" +
    "\002\007\004\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\037\006\000\002\037\003\000" +
    "\002\031\011\000\002\031\012\000\002\032\004\000\002" +
    "\032\006\000\002\033\011\000\002\034\013\000\002\035" +
    "\013\000\002\036\012\000\002\042\007\000\002\042\006" +
    "\000\002\040\005\000\002\040\002\000\002\006\003\000" +
    "\002\006\002\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\005\000\002\015\003\000\002\004\006\000" +
    "\002\004\010\000\002\004\010\000\002\004\007\000\002" +
    "\004\007\000\002\004\006\000\002\004\010\000\002\004" +
    "\010\000\002\004\007\000\002\004\007\000\002\025\003" +
    "\000\002\025\006\000\002\025\010\000\002\025\010\000" +
    "\002\025\007\000\002\025\007\000\002\024\007\000\002" +
    "\016\006\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\022\005" +
    "\000\002\022\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\003\003\000\002\003\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\024\011\023\013\004\014\021\015\032\020" +
    "\022\021\012\022\030\023\026\060\024\001\002\000\004" +
    "\030\342\001\002\000\036\002\uffe3\011\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\027\uffe3\033\uffe3\060\uffe3\001\002\000\030\002" +
    "\uff98\011\uff98\013\uff98\014\uff98\015\uff98\020\uff98\021\uff98" +
    "\022\uff98\023\uff98\033\171\060\uff98\001\002\000\034\002" +
    "\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\uffe8\027\uffe8\060\uffe8\001" +
    "\002\000\004\002\340\001\002\000\026\002\ufffc\011\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\020\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\060\ufffc\001\002\000\036\002\uffe4\011\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\027\uffe4\033\uffe4\060\uffe4\001\002\000\026" +
    "\002\ufffe\011\ufffe\013\ufffe\014\ufffe\015\ufffe\020\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\060\ufffe\001\002\000\036\002\uffe1" +
    "\011\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\027\uffe1\033\uffe1\060\uffe1" +
    "\001\002\000\036\002\uffe2\011\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\027\uffe2\033\uffe2\060\uffe2\001\002\000\034\002\uffe7\011" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\027\uffe7\060\uffe7\001\002\000" +
    "\034\002\uffe9\011\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\027\uffe9\060" +
    "\uffe9\001\002\000\034\002\uffea\011\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\027\uffea\060\uffea\001\002\000\004\030\330\001\002" +
    "\000\036\002\uffe5\011\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\027\uffe5" +
    "\033\uffe5\060\uffe5\001\002\000\004\030\314\001\002\000" +
    "\010\024\174\030\143\035\263\001\002\000\026\002\000" +
    "\011\023\013\004\014\021\015\032\020\022\021\012\022" +
    "\030\023\026\060\024\001\002\000\004\026\252\001\002" +
    "\000\006\024\233\035\232\001\002\000\040\002\uffdf\011" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\027\uffdf\030\227\033\uffdf\060" +
    "\uffdf\001\002\000\034\002\uffe6\011\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\027\uffe6\060\uffe6\001\002\000\004\030\034\001\002" +
    "\000\026\002\ufffd\011\ufffd\013\ufffd\014\ufffd\015\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\060\ufffd\001\002\000\030" +
    "\004\056\005\052\006\042\030\055\036\060\037\047\054" +
    "\041\056\043\057\035\060\053\061\037\001\002\000\104" +
    "\002\uffb0\011\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\025\uffb0\027\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\055\uffb0\060" +
    "\uffb0\001\002\000\104\002\uffc8\011\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\025\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\055\uffc8\060\uffc8\001\002\000\104\002\uffae\011" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\025\uffae\027\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\036\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\055\uffae\060\uffae\001\002" +
    "\000\104\002\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\025\uffc9" +
    "\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\055" +
    "\uffc9\060\uffc9\001\002\000\030\004\056\005\052\006\042" +
    "\030\055\036\060\037\047\054\041\056\043\057\035\060" +
    "\053\061\037\001\002\000\104\002\uffb2\011\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\025\uffb2\027\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\034\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\055\uffb2\060\uffb2\001\002\000\104\002" +
    "\uffb3\011\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\025\uffb3\027\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\055\uffb3\060\uffb3" +
    "\001\002\000\104\002\uffad\011\uffad\013\uffad\014\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\025\uffad\027\uffad\031\uffad\032\uffad\033\uffad\034\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\055\uffad\060\uffad\001\002\000\104\002\uffac\011\uffac" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\025\uffac\027\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\055\uffac\060\uffac\001\002\000" +
    "\104\002\uffcc\011\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\025\uffcc\027" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\055\uffcc" +
    "\060\uffcc\001\002\000\030\004\056\005\052\006\042\030" +
    "\055\036\060\037\047\054\041\056\043\057\035\060\053" +
    "\061\037\001\002\000\104\002\uffab\011\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\025\uffab\027\uffab\031\uffab\032\uffab\033\uffab\034" +
    "\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\055\uffab\060\uffab\001\002\000\042\031\154" +
    "\034\073\036\100\037\070\040\076\041\063\042\075\043" +
    "\064\044\072\045\065\046\101\047\077\050\071\051\074" +
    "\052\067\053\066\001\002\000\104\002\uffb1\011\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\025\uffb1\027\uffb1\031\uffb1\032\uffb1\033" +
    "\uffb1\034\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\055\uffb1\060\uffb1\001\002\000\110" +
    "\002\uffbb\011\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\027\uffbb\030\143\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\055\uffbb\060\uffbb\001\002\000\104\002\uffcb\011\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\025\uffcb\027\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\055\uffcb\060\uffcb\001\002\000" +
    "\030\004\056\005\052\006\042\030\055\036\060\037\047" +
    "\054\041\056\043\057\035\060\053\061\037\001\002\000" +
    "\104\002\uffaf\011\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\025\uffaf\027" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046" +
    "\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\055\uffaf" +
    "\060\uffaf\001\002\000\106\002\uffc6\011\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\024\123\025\uffc6\027\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\055\uffc6\060\uffc6\001\002\000\030" +
    "\004\056\005\052\006\042\030\055\036\060\037\047\054" +
    "\041\056\043\057\035\060\053\061\037\001\002\000\104" +
    "\002\uffca\011\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\025\uffca\027\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\055\uffca\060" +
    "\uffca\001\002\000\104\002\uffa8\011\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\025\uffa8\027\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044" +
    "\072\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\055\uffa8\060\uffa8\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\074\002\uff9d\011" +
    "\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d" +
    "\021\uff9d\022\uff9d\023\uff9d\025\uff9d\027\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\034\uff9d\036\100\037\070\040\076\041\063" +
    "\042\075\043\064\044\072\051\uff9d\052\uff9d\053\uff9d\055" +
    "\uff9d\060\uff9d\001\002\000\104\002\uffa7\011\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022" +
    "\uffa7\023\uffa7\025\uffa7\027\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\036\uffa7\037\uffa7\040\076\041\063\042\075\043" +
    "\064\044\072\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\055\uffa7\060\uffa7\001\002\000\074\002" +
    "\uff9e\011\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e" +
    "\020\uff9e\021\uff9e\022\uff9e\023\uff9e\025\uff9e\027\uff9e\031" +
    "\uff9e\032\uff9e\033\uff9e\034\uff9e\036\100\037\070\040\076" +
    "\041\063\042\075\043\064\044\072\051\uff9e\052\uff9e\053" +
    "\uff9e\055\uff9e\060\uff9e\001\002\000\104\002\uffa5\011\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\025\uffa5\027\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\036\uffa5\037\uffa5\040\uffa5\041\063\042" +
    "\uffa5\043\uffa5\044\072\045\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\055\uffa5\060\uffa5\001\002\000" +
    "\104\002\uffa2\011\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2" +
    "\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\025\uffa2\027" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\041\063\042\uffa2\043\uffa2\044\072\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\055\uffa2" +
    "\060\uffa2\001\002\000\104\002\uff9a\011\uff9a\013\uff9a\014" +
    "\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a" +
    "\023\uff9a\025\uff9a\027\uff9a\031\uff9a\032\uff9a\033\uff9a\034" +
    "\uff9a\036\100\037\070\040\076\041\063\042\075\043\064" +
    "\044\072\045\065\046\101\047\077\050\071\051\uff9a\052" +
    "\uff9a\053\uff9a\055\uff9a\060\uff9a\001\002\000\104\002\uff9b" +
    "\011\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\025\uff9b\027\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\034\uff9b\036\100\037\070\040\076\041" +
    "\063\042\075\043\064\044\072\045\065\046\101\047\077" +
    "\050\071\051\uff9b\052\uff9b\053\uff9b\055\uff9b\060\uff9b\001" +
    "\002\000\042\034\073\036\100\037\070\040\076\041\063" +
    "\042\075\043\064\044\072\045\065\046\101\047\077\050" +
    "\071\051\074\052\067\053\066\055\112\001\002\000\030" +
    "\004\056\005\052\006\042\030\055\036\060\037\047\054" +
    "\041\056\043\057\035\060\053\061\037\001\002\000\104" +
    "\002\uffb5\011\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\025\uffb5\027\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5" +
    "\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\055\uffb5\060" +
    "\uffb5\001\002\000\074\002\uff9f\011\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023" +
    "\uff9f\025\uff9f\027\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\036\100\037\070\040\076\041\063\042\075\043\064\044" +
    "\072\051\uff9f\052\uff9f\053\uff9f\055\uff9f\060\uff9f\001\002" +
    "\000\104\002\uffa6\011\uffa6\013\uffa6\014\uffa6\015\uffa6\016" +
    "\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\025\uffa6" +
    "\027\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\036\uffa6\037" +
    "\uffa6\040\076\041\063\042\075\043\064\044\072\045\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\055" +
    "\uffa6\060\uffa6\001\002\000\104\002\uffa0\011\uffa0\013\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022" +
    "\uffa0\023\uffa0\025\uffa0\027\uffa0\031\uffa0\032\uffa0\033\uffa0" +
    "\034\073\036\100\037\070\040\076\041\063\042\075\043" +
    "\064\044\072\045\065\046\101\047\077\050\071\051\074" +
    "\052\uffa0\053\uffa0\055\uffa0\060\uffa0\001\002\000\104\002" +
    "\uffa1\011\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1" +
    "\020\uffa1\021\uffa1\022\uffa1\023\uffa1\025\uffa1\027\uffa1\031" +
    "\uffa1\032\uffa1\033\uffa1\034\073\036\100\037\070\040\076" +
    "\041\063\042\075\043\064\044\072\045\065\046\101\047" +
    "\077\050\071\051\074\052\067\053\uffa1\055\uffa1\060\uffa1" +
    "\001\002\000\074\002\uff9c\011\uff9c\013\uff9c\014\uff9c\015" +
    "\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c" +
    "\025\uff9c\027\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\036" +
    "\100\037\070\040\076\041\063\042\075\043\064\044\072" +
    "\051\uff9c\052\uff9c\053\uff9c\055\uff9c\060\uff9c\001\002\000" +
    "\104\002\uffa4\011\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\025\uffa4\027" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\041\063\042\uffa4\043\uffa4\044\072\045\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\055\uffa4" +
    "\060\uffa4\001\002\000\104\002\uffa3\011\uffa3\013\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\025\uffa3\027\uffa3\031\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3" +
    "\044\072\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052" +
    "\uffa3\053\uffa3\055\uffa3\060\uffa3\001\002\000\034\004\056" +
    "\005\052\006\042\024\126\030\055\032\124\036\060\037" +
    "\047\054\041\056\043\057\035\060\053\061\037\001\002" +
    "\000\030\004\056\005\052\006\042\030\055\036\060\037" +
    "\047\054\041\056\043\057\035\060\053\061\037\001\002" +
    "\000\044\025\133\032\132\034\073\036\100\037\070\040" +
    "\076\041\063\042\075\043\064\044\072\045\065\046\101" +
    "\047\077\050\071\051\074\052\067\053\066\001\002\000" +
    "\030\004\056\005\052\006\042\030\055\036\060\037\047" +
    "\054\041\056\043\057\035\060\053\061\037\001\002\000" +
    "\042\025\130\034\073\036\100\037\070\040\076\041\063" +
    "\042\075\043\064\044\072\045\065\046\101\047\077\050" +
    "\071\051\074\052\067\053\066\001\002\000\004\025\131" +
    "\001\002\000\106\002\uffb9\011\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\055\uffb9\060\uffb9\001\002\000\032\004\056" +
    "\005\052\006\042\025\134\030\055\036\060\037\047\054" +
    "\041\056\043\057\035\060\053\061\037\001\002\000\106" +
    "\002\uffba\011\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\027\uffba\031\uffba\032\uffba\033\uffba\034\uffba\036\uffba\037" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\055" +
    "\uffba\060\uffba\001\002\000\106\002\uffb6\011\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\027\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\055\uffb6\060\uffb6\001\002\000" +
    "\042\025\136\034\073\036\100\037\070\040\076\041\063" +
    "\042\075\043\064\044\072\045\065\046\101\047\077\050" +
    "\071\051\074\052\067\053\066\001\002\000\106\002\uffb8" +
    "\011\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\027\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\055\uffb8\060" +
    "\uffb8\001\002\000\042\025\140\034\073\036\100\037\070" +
    "\040\076\041\063\042\075\043\064\044\072\045\065\046" +
    "\101\047\077\050\071\051\074\052\067\053\066\001\002" +
    "\000\106\002\uffb7\011\uffb7\013\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\027\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\055\uffb7\060\uffb7\001\002\000\042\031\142\034\073" +
    "\036\100\037\070\040\076\041\063\042\075\043\064\044" +
    "\072\045\065\046\101\047\077\050\071\051\074\052\067" +
    "\053\066\001\002\000\104\002\uffc7\011\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\025\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\055\uffc7\060\uffc7\001\002\000\034\004\056" +
    "\005\052\006\042\017\146\030\055\031\uffd1\036\060\037" +
    "\047\054\041\056\043\057\035\060\053\061\037\001\002" +
    "\000\004\031\153\001\002\000\044\031\uffcd\032\uffcd\034" +
    "\073\036\100\037\070\040\076\041\063\042\075\043\064" +
    "\044\072\045\065\046\101\047\077\050\071\051\074\052" +
    "\067\053\066\001\002\000\006\031\uffce\032\uffce\001\002" +
    "\000\006\031\uffd2\032\150\001\002\000\032\004\056\005" +
    "\052\006\042\017\152\030\055\036\060\037\047\054\041" +
    "\056\043\057\035\060\053\061\037\001\002\000\044\031" +
    "\uffd0\032\uffd0\034\073\036\100\037\070\040\076\041\063" +
    "\042\075\043\064\044\072\045\065\046\101\047\077\050" +
    "\071\051\074\052\067\053\066\001\002\000\006\031\uffcf" +
    "\032\uffcf\001\002\000\104\002\uffb4\011\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\025\uffb4\027\uffb4\031\uffb4\032\uffb4\033\uffb4\034" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\055\uffb4\060\uffb4\001\002\000\004\026\155" +
    "\001\002\000\004\016\157\001\002\000\010\016\216\017" +
    "\215\027\uffd3\001\002\000\030\004\056\005\052\006\042" +
    "\030\055\036\060\037\047\054\041\056\043\057\035\060" +
    "\053\061\037\001\002\000\042\034\073\036\100\037\070" +
    "\040\076\041\063\042\075\043\064\044\072\045\065\046" +
    "\101\047\077\050\071\051\074\052\067\053\066\055\161" +
    "\001\002\000\032\011\023\013\004\014\021\015\032\016" +
    "\uffef\017\uffef\020\022\021\012\022\030\023\026\027\uffef" +
    "\060\164\001\002\000\034\011\uff98\013\uff98\014\uff98\015" +
    "\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98" +
    "\027\uff98\033\171\060\uff98\001\002\000\032\011\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\027\uffec\060\uffec\001\002\000\010\024" +
    "\174\030\143\035\173\001\002\000\032\011\023\013\004" +
    "\014\021\015\032\016\ufff0\017\ufff0\020\022\021\012\022" +
    "\030\023\026\027\ufff0\060\164\001\002\000\010\016\uffd5" +
    "\017\uffd5\027\uffd5\001\002\000\034\011\uff98\013\uff98\014" +
    "\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98" +
    "\023\uff98\027\uff98\033\171\060\uff98\001\002\000\032\011" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\027\uffed\060\uffed\001\002\000" +
    "\034\002\uff99\011\uff99\013\uff99\014\uff99\015\uff99\016\uff99" +
    "\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\027\uff99\060" +
    "\uff99\001\002\000\032\011\uffee\013\uffee\014\uffee\015\uffee" +
    "\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\027" +
    "\uffee\060\uffee\001\002\000\030\004\056\005\052\006\042" +
    "\030\055\036\060\037\047\054\041\056\043\057\035\060" +
    "\053\061\037\001\002\000\034\004\056\005\052\006\042" +
    "\024\177\030\055\032\175\036\060\037\047\054\041\056" +
    "\043\057\035\060\053\061\037\001\002\000\030\004\056" +
    "\005\052\006\042\030\055\036\060\037\047\054\041\056" +
    "\043\057\035\060\053\061\037\001\002\000\044\025\204" +
    "\032\203\034\073\036\100\037\070\040\076\041\063\042" +
    "\075\043\064\044\072\045\065\046\101\047\077\050\071" +
    "\051\074\052\067\053\066\001\002\000\030\004\056\005" +
    "\052\006\042\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\042\025\201\034" +
    "\073\036\100\037\070\040\076\041\063\042\075\043\064" +
    "\044\072\045\065\046\101\047\077\050\071\051\074\052" +
    "\067\053\066\001\002\000\004\025\202\001\002\000\006" +
    "\024\uffc4\035\uffc4\001\002\000\032\004\056\005\052\006" +
    "\042\025\205\030\055\036\060\037\047\054\041\056\043" +
    "\057\035\060\053\061\037\001\002\000\006\024\uffc5\035" +
    "\uffc5\001\002\000\006\024\uffc1\035\uffc1\001\002\000\042" +
    "\025\207\034\073\036\100\037\070\040\076\041\063\042" +
    "\075\043\064\044\072\045\065\046\101\047\077\050\071" +
    "\051\074\052\067\053\066\001\002\000\006\024\uffc3\035" +
    "\uffc3\001\002\000\042\025\211\034\073\036\100\037\070" +
    "\040\076\041\063\042\075\043\064\044\072\045\065\046" +
    "\101\047\077\050\071\051\074\052\067\053\066\001\002" +
    "\000\006\024\uffc2\035\uffc2\001\002\000\074\002\ufffa\011" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\027\ufffa\033\ufffa\034\073\036" +
    "\100\037\070\040\076\041\063\042\075\043\064\044\072" +
    "\045\065\046\101\047\077\050\071\051\074\052\067\053" +
    "\066\060\ufffa\001\002\000\032\011\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\027\uffeb\060\uffeb\001\002\000\004\027\224\001\002" +
    "\000\004\055\222\001\002\000\030\004\056\005\052\006" +
    "\042\030\055\036\060\037\047\054\041\056\043\057\035" +
    "\060\053\061\037\001\002\000\042\034\073\036\100\037" +
    "\070\040\076\041\063\042\075\043\064\044\072\045\065" +
    "\046\101\047\077\050\071\051\074\052\067\053\066\055" +
    "\220\001\002\000\032\011\023\013\004\014\021\015\032" +
    "\016\uffef\017\uffef\020\022\021\012\022\030\023\026\027" +
    "\uffef\060\164\001\002\000\010\016\uffd6\017\uffd6\027\uffd6" +
    "\001\002\000\026\011\023\013\004\014\021\015\032\020" +
    "\022\021\012\022\030\023\026\027\uffef\060\164\001\002" +
    "\000\004\027\uffd4\001\002\000\034\002\uffd7\011\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\027\uffd7\060\uffd7\001\002\000\104\002" +
    "\uffaa\011\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\025\uffaa\027\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\036\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\072\045\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\055\uffaa\060\uffaa" +
    "\001\002\000\104\002\uffa9\011\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\025\uffa9\027\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\072" +
    "\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053" +
    "\uffa9\055\uffa9\060\uffa9\001\002\000\030\004\056\005\052" +
    "\006\042\030\055\036\060\037\047\054\041\056\043\057" +
    "\035\060\053\061\037\001\002\000\042\031\231\034\073" +
    "\036\100\037\070\040\076\041\063\042\075\043\064\044" +
    "\072\045\065\046\101\047\077\050\071\051\074\052\067" +
    "\053\066\001\002\000\036\002\uffe0\011\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\027\uffe0\033\uffe0\060\uffe0\001\002\000\030\004" +
    "\056\005\052\006\042\030\055\036\060\037\047\054\041" +
    "\056\043\057\035\060\053\061\037\001\002\000\034\004" +
    "\056\005\052\006\042\024\236\030\055\032\234\036\060" +
    "\037\047\054\041\056\043\057\035\060\053\061\037\001" +
    "\002\000\030\004\056\005\052\006\042\030\055\036\060" +
    "\037\047\054\041\056\043\057\035\060\053\061\037\001" +
    "\002\000\044\025\243\032\242\034\073\036\100\037\070" +
    "\040\076\041\063\042\075\043\064\044\072\045\065\046" +
    "\101\047\077\050\071\051\074\052\067\053\066\001\002" +
    "\000\030\004\056\005\052\006\042\030\055\036\060\037" +
    "\047\054\041\056\043\057\035\060\053\061\037\001\002" +
    "\000\042\025\240\034\073\036\100\037\070\040\076\041" +
    "\063\042\075\043\064\044\072\045\065\046\101\047\077" +
    "\050\071\051\074\052\067\053\066\001\002\000\004\025" +
    "\241\001\002\000\006\024\uffbf\035\uffbf\001\002\000\032" +
    "\004\056\005\052\006\042\025\244\030\055\036\060\037" +
    "\047\054\041\056\043\057\035\060\053\061\037\001\002" +
    "\000\006\024\uffc0\035\uffc0\001\002\000\006\024\uffbc\035" +
    "\uffbc\001\002\000\042\025\246\034\073\036\100\037\070" +
    "\040\076\041\063\042\075\043\064\044\072\045\065\046" +
    "\101\047\077\050\071\051\074\052\067\053\066\001\002" +
    "\000\006\024\uffbe\035\uffbe\001\002\000\042\025\250\034" +
    "\073\036\100\037\070\040\076\041\063\042\075\043\064" +
    "\044\072\045\065\046\101\047\077\050\071\051\074\052" +
    "\067\053\066\001\002\000\006\024\uffbd\035\uffbd\001\002" +
    "\000\074\002\ufff9\011\ufff9\013\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\027\ufff9" +
    "\033\ufff9\034\073\036\100\037\070\040\076\041\063\042" +
    "\075\043\064\044\072\045\065\046\101\047\077\050\071" +
    "\051\074\052\067\053\066\060\ufff9\001\002\000\026\011" +
    "\023\013\004\014\021\015\032\020\022\021\012\022\030" +
    "\023\026\027\uffef\060\164\001\002\000\004\027\254\001" +
    "\002\000\004\013\255\001\002\000\004\030\256\001\002" +
    "\000\030\004\056\005\052\006\042\030\055\036\060\037" +
    "\047\054\041\056\043\057\035\060\053\061\037\001\002" +
    "\000\042\031\260\034\073\036\100\037\070\040\076\041" +
    "\063\042\075\043\064\044\072\045\065\046\101\047\077" +
    "\050\071\051\074\052\067\053\066\001\002\000\004\033" +
    "\261\001\002\000\034\002\uffd9\011\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\027\uffd9\060\uffd9\001\002\000\026\002\uffff\011\uffff" +
    "\013\uffff\014\uffff\015\uffff\020\uffff\021\uffff\022\uffff\023" +
    "\uffff\060\uffff\001\002\000\032\004\056\005\052\006\042" +
    "\007\264\030\265\036\060\037\047\054\041\056\043\057" +
    "\035\060\053\061\037\001\002\000\004\030\306\001\002" +
    "\000\032\004\056\005\052\006\042\030\055\031\ufff5\036" +
    "\060\037\047\054\041\056\043\057\035\060\270\061\037" +
    "\001\002\000\044\031\142\032\ufff2\034\073\036\100\037" +
    "\070\040\076\041\063\042\075\043\064\044\072\045\065" +
    "\046\101\047\077\050\071\051\074\052\067\053\066\001" +
    "\002\000\004\031\300\001\002\000\052\024\uffbb\030\143" +
    "\031\uffbb\032\uffbb\034\uffbb\035\276\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\001\002\000" +
    "\006\031\ufff6\032\273\001\002\000\006\031\ufff3\032\ufff3" +
    "\001\002\000\030\004\056\005\052\006\042\030\055\036" +
    "\060\037\047\054\041\056\043\057\035\060\270\061\037" +
    "\001\002\000\044\031\ufff2\032\ufff2\034\073\036\100\037" +
    "\070\040\076\041\063\042\075\043\064\044\072\045\065" +
    "\046\101\047\077\050\071\051\074\052\067\053\066\001" +
    "\002\000\006\031\ufff4\032\ufff4\001\002\000\030\004\056" +
    "\005\052\006\042\030\055\036\060\037\047\054\041\056" +
    "\043\057\035\060\053\061\037\001\002\000\044\031\ufff1" +
    "\032\ufff1\034\073\036\100\037\070\040\076\041\063\042" +
    "\075\043\064\044\072\045\065\046\101\047\077\050\071" +
    "\051\074\052\067\053\066\001\002\000\004\035\301\001" +
    "\002\000\004\046\302\001\002\000\004\026\303\001\002" +
    "\000\026\011\023\013\004\014\021\015\032\020\022\021" +
    "\012\022\030\023\026\027\uffef\060\164\001\002\000\004" +
    "\027\305\001\002\000\026\002\ufff7\011\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\060\ufff7" +
    "\001\002\000\032\004\056\005\052\006\042\030\055\031" +
    "\ufff5\036\060\037\047\054\041\056\043\057\035\060\270" +
    "\061\037\001\002\000\004\031\310\001\002\000\004\026" +
    "\311\001\002\000\026\011\023\013\004\014\021\015\032" +
    "\020\022\021\012\022\030\023\026\027\uffef\060\164\001" +
    "\002\000\004\027\313\001\002\000\026\002\ufff8\011\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\020\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\060\ufff8\001\002\000\030\004\056\005\052\006\042" +
    "\030\055\036\060\037\047\054\041\056\043\057\035\060" +
    "\053\061\037\001\002\000\042\031\316\034\073\036\100" +
    "\037\070\040\076\041\063\042\075\043\064\044\072\045" +
    "\065\046\101\047\077\050\071\051\074\052\067\053\066" +
    "\001\002\000\004\026\317\001\002\000\026\011\023\013" +
    "\004\014\021\015\032\020\022\021\012\022\030\023\026" +
    "\027\uffef\060\164\001\002\000\004\027\321\001\002\000" +
    "\036\002\uffde\011\uffde\012\323\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\027" +
    "\uffde\060\uffde\001\002\000\034\002\uffdd\011\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\027\uffdd\060\uffdd\001\002\000\006\011\023" +
    "\026\324\001\002\000\026\011\023\013\004\014\021\015" +
    "\032\020\022\021\012\022\030\023\026\027\uffef\060\164" +
    "\001\002\000\034\002\uffdc\011\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\027\uffdc\060\uffdc\001\002\000\004\027\327\001\002\000" +
    "\034\002\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\027\uffdb\060" +
    "\uffdb\001\002\000\004\060\331\001\002\000\004\010\332" +
    "\001\002\000\030\004\056\005\052\006\042\030\055\036" +
    "\060\037\047\054\041\056\043\057\035\060\053\061\037" +
    "\001\002\000\042\031\334\034\073\036\100\037\070\040" +
    "\076\041\063\042\075\043\064\044\072\045\065\046\101" +
    "\047\077\050\071\051\074\052\067\053\066\001\002\000" +
    "\004\026\335\001\002\000\026\011\023\013\004\014\021" +
    "\015\032\020\022\021\012\022\030\023\026\027\uffef\060" +
    "\164\001\002\000\004\027\337\001\002\000\034\002\uffd8" +
    "\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\027\uffd8\060\uffd8\001\002" +
    "\000\004\002\001\001\002\000\026\002\ufffb\011\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\060\ufffb\001\002\000\030\004\056\005\052\006\042\030" +
    "\055\036\060\037\047\054\041\056\043\057\035\060\053" +
    "\061\037\001\002\000\042\031\344\034\073\036\100\037" +
    "\070\040\076\041\063\042\075\043\064\044\072\045\065" +
    "\046\101\047\077\050\071\051\074\052\067\053\066\001" +
    "\002\000\004\026\345\001\002\000\026\011\023\013\004" +
    "\014\021\015\032\020\022\021\012\022\030\023\026\027" +
    "\uffef\060\164\001\002\000\004\027\347\001\002\000\034" +
    "\002\uffda\011\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\027\uffda\060\uffda" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\040\002\007\004\026\011\024\012\012\013" +
    "\005\016\004\026\010\027\032\030\014\031\017\033\006" +
    "\034\015\035\030\036\016\037\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\340\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\026\012\261\013\005\016\004\026" +
    "\010\027\032\030\014\031\017\033\006\034\015\035\030" +
    "\036\016\037\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\045\015\050\016\035\017" +
    "\053\020\060\021\043\022\044\023\047\024\037\025\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\014\045\015\225\016\035" +
    "\017\053\020\060\021\043\022\044\023\047\024\037\025" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\014" +
    "\045\015\224\016\035\017\053\020\060\021\043\022\044" +
    "\023\047\024\037\025\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\045\015\140\016\035\017\053\020" +
    "\060\021\043\022\044\023\047\024\037\025\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\014\045\015" +
    "\061\016\035\017\053\020\060\021\043\022\044\023\047" +
    "\024\037\025\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\045\015\121\016\035\017\053\020\060" +
    "\021\043\022\044\023\047\024\037\025\056\001\001\000" +
    "\026\014\045\015\120\016\035\017\053\020\060\021\043" +
    "\022\044\023\047\024\037\025\056\001\001\000\026\014" +
    "\045\015\117\016\035\017\053\020\060\021\043\022\044" +
    "\023\047\024\037\025\056\001\001\000\026\014\045\015" +
    "\116\016\035\017\053\020\060\021\043\022\044\023\047" +
    "\024\037\025\056\001\001\000\026\014\045\015\115\016" +
    "\035\017\053\020\060\021\043\022\044\023\047\024\037" +
    "\025\056\001\001\000\026\014\045\015\114\016\035\017" +
    "\053\020\060\021\043\022\044\023\047\024\037\025\056" +
    "\001\001\000\026\014\045\015\113\016\035\017\053\020" +
    "\060\021\043\022\044\023\047\024\037\025\056\001\001" +
    "\000\026\014\045\015\110\016\035\017\053\020\060\021" +
    "\043\022\044\023\047\024\037\025\056\001\001\000\026" +
    "\014\045\015\107\016\035\017\053\020\060\021\043\022" +
    "\044\023\047\024\037\025\056\001\001\000\026\014\045" +
    "\015\106\016\035\017\053\020\060\021\043\022\044\023" +
    "\047\024\037\025\056\001\001\000\026\014\045\015\105" +
    "\016\035\017\053\020\060\021\043\022\044\023\047\024" +
    "\037\025\056\001\001\000\026\014\045\015\104\016\035" +
    "\017\053\020\060\021\043\022\044\023\047\024\037\025" +
    "\056\001\001\000\026\014\045\015\103\016\035\017\053" +
    "\020\060\021\043\022\044\023\047\024\037\025\056\001" +
    "\001\000\026\014\045\015\102\016\035\017\053\020\060" +
    "\021\043\022\044\023\047\024\037\025\056\001\001\000" +
    "\026\014\045\015\101\016\035\017\053\020\060\021\043" +
    "\022\044\023\047\024\037\025\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\014\045\015\112\016\035\017\053" +
    "\020\060\021\043\022\044\023\047\024\037\025\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\045\015\124" +
    "\016\035\017\053\020\060\021\043\022\044\023\047\024" +
    "\037\025\056\001\001\000\026\014\045\015\136\016\035" +
    "\017\053\020\060\021\043\022\044\023\047\024\037\025" +
    "\056\001\001\000\002\001\001\000\026\014\045\015\126" +
    "\016\035\017\053\020\060\021\043\022\044\023\047\024" +
    "\037\025\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\045\015\134\016\035\017" +
    "\053\020\060\021\043\022\044\023\047\024\037\025\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\146\006" +
    "\143\014\045\015\144\016\035\017\053\020\060\021\043" +
    "\022\044\023\047\024\037\025\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\045\015\150\016\035\017\053\020\060\021" +
    "\043\022\044\023\047\024\037\025\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\155\001\001\000\004\040\213\001\001" +
    "\000\026\014\045\015\157\016\035\017\053\020\060\021" +
    "\043\022\044\023\047\024\037\025\056\001\001\000\002" +
    "\001\001\000\034\004\026\007\164\010\165\013\161\016" +
    "\004\026\162\030\014\031\017\033\006\034\015\035\030" +
    "\036\016\037\013\001\001\000\004\003\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\026\013\166" +
    "\016\004\026\167\030\014\031\017\033\006\034\015\035" +
    "\030\036\016\037\013\001\001\000\002\001\001\000\004" +
    "\003\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\014\045\015\211\016\035\017\053" +
    "\020\060\021\043\022\044\023\047\024\037\025\056\001" +
    "\001\000\026\014\045\015\175\016\035\017\053\020\060" +
    "\021\043\022\044\023\047\024\037\025\056\001\001\000" +
    "\026\014\045\015\207\016\035\017\053\020\060\021\043" +
    "\022\044\023\047\024\037\025\056\001\001\000\002\001" +
    "\001\000\026\014\045\015\177\016\035\017\053\020\060" +
    "\021\043\022\044\023\047\024\037\025\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\014\045\015\205\016\035\017\053\020\060\021\043\022" +
    "\044\023\047\024\037\025\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\014" +
    "\045\015\216\016\035\017\053\020\060\021\043\022\044" +
    "\023\047\024\037\025\056\001\001\000\002\001\001\000" +
    "\034\004\026\007\164\010\220\013\161\016\004\026\162" +
    "\030\014\031\017\033\006\034\015\035\030\036\016\037" +
    "\013\001\001\000\002\001\001\000\034\004\026\007\164" +
    "\010\222\013\161\016\004\026\162\030\014\031\017\033" +
    "\006\034\015\035\030\036\016\037\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\045\015\227\016\035\017\053\020\060" +
    "\021\043\022\044\023\047\024\037\025\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\045\015\250" +
    "\016\035\017\053\020\060\021\043\022\044\023\047\024" +
    "\037\025\056\001\001\000\026\014\045\015\234\016\035" +
    "\017\053\020\060\021\043\022\044\023\047\024\037\025" +
    "\056\001\001\000\026\014\045\015\246\016\035\017\053" +
    "\020\060\021\043\022\044\023\047\024\037\025\056\001" +
    "\001\000\002\001\001\000\026\014\045\015\236\016\035" +
    "\017\053\020\060\021\043\022\044\023\047\024\037\025" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\045\015\244\016\035\017\053\020" +
    "\060\021\043\022\044\023\047\024\037\025\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\026\007\164\010\252\013\161\016" +
    "\004\026\162\030\014\031\017\033\006\034\015\035\030" +
    "\036\016\037\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\014\045\015\256\016\035" +
    "\017\053\020\060\021\043\022\044\023\047\024\037\025" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\014\045\015\211\016" +
    "\035\017\053\020\060\021\043\022\044\023\047\024\037" +
    "\025\056\001\001\000\002\001\001\000\034\014\045\015" +
    "\265\016\035\017\053\020\060\021\043\022\044\023\047" +
    "\024\037\025\056\041\271\043\270\044\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\014\045\015\273\016" +
    "\035\017\053\020\060\021\043\022\044\023\047\024\037" +
    "\025\056\041\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\045\015\276\016\035\017\053\020\060" +
    "\021\043\022\044\023\047\024\037\025\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\026\007\164\010\303\013\161\016" +
    "\004\026\162\030\014\031\017\033\006\034\015\035\030" +
    "\036\016\037\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\014\045\015\273\016\035\017\053\020\060" +
    "\021\043\022\044\023\047\024\037\025\056\041\271\043" +
    "\270\044\306\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\026\007\164\010\311\013\161\016\004\026" +
    "\162\030\014\031\017\033\006\034\015\035\030\036\016" +
    "\037\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\045\015\314\016\035\017\053\020\060\021\043" +
    "\022\044\023\047\024\037\025\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\026\007\164\010\317" +
    "\013\161\016\004\026\162\030\014\031\017\033\006\034" +
    "\015\035\030\036\016\037\013\001\001\000\002\001\001" +
    "\000\004\032\321\001\001\000\002\001\001\000\004\031" +
    "\324\001\001\000\034\004\026\007\164\010\325\013\161" +
    "\016\004\026\162\030\014\031\017\033\006\034\015\035" +
    "\030\036\016\037\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\045\015\332\016\035\017\053\020\060" +
    "\021\043\022\044\023\047\024\037\025\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\026\007\164" +
    "\010\335\013\161\016\004\026\162\030\014\031\017\033" +
    "\006\034\015\035\030\036\016\037\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\045\015\342\016\035\017\053\020\060" +
    "\021\043\022\044\023\047\024\037\025\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\026\007\164" +
    "\010\345\013\161\016\004\026\162\030\014\031\017\033" +
    "\006\034\015\035\030\036\016\037\013\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* RAIZ */
    Principal principal;

    public void setPrincipal(Principal principal){
        this.principal = principal;
    }

    /**
    *   Metodo que retorna la raiz del arbol
    **/
    public Principal getPrincipal(){
        return this.principal;
    }
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la linea: " + (s.left) +" Columna: " +s.right+ ". No se esperaba este componente: " + s.value+"."); 
        Token token = new Token();
        token.lexema = s.value+"";
        token.componenteLexico = "Sintáctico";
        token.descripcion = "No se esperaba: "+s.value;
        token.columna = s.right+1+"";
        token.fila = s.left+1+"";
        this.principal.addError(token);
    }
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error Sintactico irrecuperable en la Lienea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
        Token token = new Token();
        token.lexema = s.value+"";
        token.componenteLexico = "Sintáctico inrecuperable";
        token.descripcion = "No se esperaba: "+s.value;
        token.columna = s.right+1+"";
        token.fila = s.left+1+"";
        this.principal.addError(token);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= DECLARACIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        principal.setNodos(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
        a.add(b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= DECLARACION 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<Nodo>();
        RESULT.add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= FUNCION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= SENTENCIA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= INSTRUCCION PUEDE_SEMICOLON 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARIABLE ::= id igual E 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Declaracion(a,b,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLE ::= ACCESO_ESTRUCTURA2 igual E 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= id igual res_function l_parent PARAMETROS r_parent l_llave BLOQUES r_llave 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Parametro> b = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Funcion(a,b,c,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= id igual l_parent PARAMETROS r_parent igual mayor l_llave BLOQUES r_llave 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Parametro> b = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Funcion(a,b,c,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMETROS ::= LISTA_PARAMETROS 
            {
              LinkedList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Parametro> a = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMETROS ::= 
            {
              LinkedList<Parametro> RESULT =null;
		
        RESULT = new LinkedList<Parametro>();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_PARAMETROS ::= LISTA_PARAMETROS coma PARAMETRO 
            {
              LinkedList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Parametro> a = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro b = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
        RESULT.add(b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_PARAMETROS ::= PARAMETRO 
            {
              LinkedList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro a = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<Parametro>();
        RESULT.add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETRO ::= E 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Parametro(null,a,a.fila,a.columna);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETRO ::= id igual E 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Parametro(a,b,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOQUES ::= LISTA_BLOQUES 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOQUES ::= 
            {
              LinkedList<Nodo> RESULT =null;
		
        RESULT = new LinkedList<Nodo>();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_BLOQUES ::= LISTA_BLOQUES INSTRUCCION PUEDE_SEMICOLON 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = a;
        RESULT.add(b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_BLOQUES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_BLOQUES ::= LISTA_BLOQUES SENTENCIA 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
        RESULT.add(b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_BLOQUES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_BLOQUES ::= SENTENCIA 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<Nodo>();
        RESULT.add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_BLOQUES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_BLOQUES ::= INSTRUCCION PUEDE_SEMICOLON 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new LinkedList<Nodo>();
        RESULT.add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_BLOQUES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= IF 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SWITCH 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= WHILE 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= DOWHILE 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= FOR 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= res_break 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Corte(Corte.TIPO_CORTE.BREAK,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= res_continue 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Corte(Corte.TIPO_CORTE.CONTINUE,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCION ::= LLAMADA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION ::= VARIABLE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCION ::= RETURN 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RETURN ::= res_return l_parent E r_parent 
            {
              Sentencia RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Return(a,bleft+1,bright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RETURN ::= res_return 
            {
              Sentencia RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Return(null,bleft+1,bright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF ::= res_if l_parent E r_parent l_llave BLOQUES r_llave 
            {
              Sentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new If(a,b,null,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF ::= res_if l_parent E r_parent l_llave BLOQUES r_llave ELSE 
            {
              Sentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia d = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new If(a,b,d,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELSE ::= res_else IF 
            {
              Sentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELSE ::= res_else l_llave BLOQUES r_llave 
            {
              Sentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Else(a,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // WHILE ::= res_while l_parent E r_parent l_llave BLOQUES r_llave 
            {
              Sentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new While(a,b,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DOWHILE ::= res_do l_llave BLOQUES r_llave res_while l_parent E r_parent puntocoma 
            {
              Sentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new DoWhile(a,b,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FOR ::= res_for l_parent id res_in E r_parent l_llave BLOQUES r_llave 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new For(a,b,c,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SWITCH ::= res_switch l_parent E r_parent l_llave LISTA_CASOS DEFAULT r_llave 
            {
              Sentencia RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Default c = (Default)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Switch(a,b,c,dleft+1,dright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTA_CASOS ::= LISTA_CASOS res_case E dospuntos BLOQUES 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
        RESULT.add(new Caso(b,c,dleft+1,dright+1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTA_CASOS ::= res_case E dospuntos BLOQUES 
            {
              LinkedList<Caso> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<Caso>();
        RESULT.add(new Caso(a,b,cleft+1,cright+1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_CASOS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DEFAULT ::= res_default dospuntos BLOQUES 
            {
              Default RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Default(b,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DEFAULT ::= 
            {
              Default RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARAMETROS_LLAMADA ::= LISTA_LLAMADA 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_LLAMADA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARAMETROS_LLAMADA ::= 
            {
              LinkedList<Expresion> RESULT =null;
		
        RESULT = new LinkedList<Expresion>();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_LLAMADA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA_LLAMADA ::= LISTA_LLAMADA coma E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
        RESULT.add(b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_LLAMADA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LISTA_LLAMADA ::= LISTA_LLAMADA coma res_default 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
        RESULT.add(new Primitivo(Expresion.TIPO_PRIMITIVO.DEFAULT,Expresion.TIPO_PRIMITIVO.DEFAULT,bleft+1,bright+1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_LLAMADA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LISTA_LLAMADA ::= res_default 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<Expresion>();
        RESULT.add(new Primitivo(Expresion.TIPO_PRIMITIVO.DEFAULT,Expresion.TIPO_PRIMITIVO.DEFAULT,aleft+1,aright+1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_LLAMADA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTA_LLAMADA ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<Expresion>();
        RESULT.add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_LLAMADA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= CONSTANTE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= BINARIA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= UNARIA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= TERNARIA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= LLAMADA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= l_parent E r_parent 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= ACCESO_ESTRUCTURA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ACCESO_ESTRUCTURA2 ::= id l_corchete E r_corchete 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ACCESO_ESTRUCTURA2 ::= id l_corchete l_corchete E r_corchete r_corchete 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ACCESO_ESTRUCTURA2 ::= id l_corchete E coma E r_corchete 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ACCESO_ESTRUCTURA2 ::= id l_corchete coma E r_corchete 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ACCESO_ESTRUCTURA2 ::= id l_corchete E coma r_corchete 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ACCESO_ESTRUCTURA2 ::= ACCESO_ESTRUCTURA2 l_corchete E r_corchete 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ACCESO_ESTRUCTURA2 ::= ACCESO_ESTRUCTURA2 l_corchete l_corchete E r_corchete r_corchete 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACCESO_ESTRUCTURA2 ::= ACCESO_ESTRUCTURA2 l_corchete E coma E r_corchete 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACCESO_ESTRUCTURA2 ::= ACCESO_ESTRUCTURA2 l_corchete coma E r_corchete 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACCESO_ESTRUCTURA2 ::= ACCESO_ESTRUCTURA2 l_corchete E coma r_corchete 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ACCESO_ESTRUCTURA ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Primitivo(a,Expresion.TIPO_PRIMITIVO.VARIABLE,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ACCESO_ESTRUCTURA ::= ACCESO_ESTRUCTURA l_corchete E r_corchete 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Acceso(a,b,null,Acceso.TIPO_ACCESO.SIMPLE);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ACCESO_ESTRUCTURA ::= ACCESO_ESTRUCTURA l_corchete l_corchete E r_corchete r_corchete 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new Acceso(a,b,null,Acceso.TIPO_ACCESO.DOBLE);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ACCESO_ESTRUCTURA ::= ACCESO_ESTRUCTURA l_corchete E coma E r_corchete 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Acceso(a,b,c,Acceso.TIPO_ACCESO.XY);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ACCESO_ESTRUCTURA ::= ACCESO_ESTRUCTURA l_corchete coma E r_corchete 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Acceso(a,null,b,Acceso.TIPO_ACCESO.Y);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ACCESO_ESTRUCTURA ::= ACCESO_ESTRUCTURA l_corchete E coma r_corchete 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new Acceso(a,b,null,Acceso.TIPO_ACCESO.X);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TERNARIA ::= E ternario E dospuntos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Ternaria(a,b,c,dleft+1,dright+1);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LLAMADA ::= id l_parent PARAMETROS_LLAMADA r_parent 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Llamada(a,b,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONSTANTE ::= numero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Primitivo(Integer.parseInt(a),Expresion.TIPO_PRIMITIVO.INTEGER,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONSTANTE ::= res_true 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Primitivo(true,Expresion.TIPO_PRIMITIVO.BOOLEAN,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONSTANTE ::= res_false 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Primitivo(false,Expresion.TIPO_PRIMITIVO.BOOLEAN,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONSTANTE ::= doble 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Primitivo(Double.parseDouble(a),Expresion.TIPO_PRIMITIVO.DOUBLE,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONSTANTE ::= res_null 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Primitivo("null",Expresion.TIPO_PRIMITIVO.STRING,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONSTANTE ::= cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String cad = a.substring(1,a.length());
        cad = cad.substring(0,cad.length()-1);
        RESULT = new Primitivo(cad,Expresion.TIPO_PRIMITIVO.STRING,aleft+1,aright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BINARIA ::= ARITMETICA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BINARIA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BINARIA ::= LOGICA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BINARIA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BINARIA ::= RELACIONAL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BINARIA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // UNARIA ::= menos E 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Unaria(a,Unaria.TIPO_OPERACION.MENOS,bleft+1,bright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNARIA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // UNARIA ::= not E 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Unaria(a,Unaria.TIPO_OPERACION.NOT,bleft+1,bright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNARIA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // UNARIA ::= mas E 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNARIA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ARITMETICA ::= E mas E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Aritmetica(a,b,Aritmetica.TIPO_OPERACION.MAS,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ARITMETICA ::= E menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Aritmetica(a,b,Aritmetica.TIPO_OPERACION.MENOS,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ARITMETICA ::= E por E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Aritmetica(a,b,Aritmetica.TIPO_OPERACION.POR,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ARITMETICA ::= E div E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Aritmetica(a,b,Aritmetica.TIPO_OPERACION.DIV,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ARITMETICA ::= E potencia E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Aritmetica(a,b,Aritmetica.TIPO_OPERACION.POT,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ARITMETICA ::= E modular E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Aritmetica(a,b,Aritmetica.TIPO_OPERACION.MOD,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LOGICA ::= E or E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Logica(a,b,Logica.TIPO_OPERACION.OR,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LOGICA ::= E and E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Logica(a,b,Logica.TIPO_OPERACION.AND,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // RELACIONAL ::= E menor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Relacional(a,b,Relacional.TIPO_OPERACION.MENOR,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // RELACIONAL ::= E menorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Relacional(a,b,Relacional.TIPO_OPERACION.MENORIGUAL,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // RELACIONAL ::= E mayor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Relacional(a,b,Relacional.TIPO_OPERACION.MAYOR,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // RELACIONAL ::= E mayorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Relacional(a,b,Relacional.TIPO_OPERACION.MAYORIGUAL,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // RELACIONAL ::= E igualigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Relacional(a,b,Relacional.TIPO_OPERACION.IGUALIGUAL,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // RELACIONAL ::= E diferente E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Relacional(a,b,Relacional.TIPO_OPERACION.DIFERENTE,cleft+1,cright+1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PUEDE_SEMICOLON ::= puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUEDE_SEMICOLON",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PUEDE_SEMICOLON ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUEDE_SEMICOLON",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
