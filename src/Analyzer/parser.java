
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzer;

import java_cup.runtime.*;
import Interpreter.Instruction.*;
import Interpreter.Objeto.*;
import Interpreter.Operation.*;
import Principal.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\033\011\000\002" +
    "\030\005\000\002\031\010\000\002\040\004\000\002\040" +
    "\003\000\002\036\005\000\002\036\006\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\061\006\000\002\061\005" +
    "\000\002\060\005\000\002\060\004\000\002\032\006\000" +
    "\002\025\005\000\002\025\007\000\002\025\010\000\002" +
    "\025\010\000\002\025\011\000\002\025\006\000\002\025" +
    "\010\000\002\025\011\000\002\044\005\000\002\044\003" +
    "\000\002\026\012\000\002\026\012\000\002\026\013\000" +
    "\002\034\013\000\002\042\003\000\002\042\002\000\002" +
    "\041\005\000\002\041\003\000\002\037\004\000\002\037" +
    "\005\000\002\004\003\000\002\004\002\000\002\003\004" +
    "\000\002\003\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\004\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\011\005\000\002\011\004\000" +
    "\002\012\004\000\002\013\004\000\002\010\011\000\002" +
    "\010\012\000\002\022\004\000\002\022\006\000\002\016" +
    "\011\000\002\015\013\000\002\017\014\000\002\017\015" +
    "\000\002\014\012\000\002\005\007\000\002\005\006\000" +
    "\002\023\005\000\002\023\002\000\002\024\005\000\002" +
    "\021\004\000\002\020\005\000\002\020\006\000\002\020" +
    "\004\000\002\020\004\000\002\035\007\000\002\035\007" +
    "\000\002\035\007\000\002\035\007\000\002\035\006\000" +
    "\002\035\011\000\002\035\007\000\002\045\005\000\002" +
    "\045\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\005\000\002\056\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\053\004\000\002\053\004\000\002\053\004" +
    "\000\002\054\004\000\002\054\004\000\002\051\005\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\005\000\002\050\005\000\002\050" +
    "\005\000\002\052\005\000\002\052\005\000\002\052\005" +
    "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
    "\002\055\003\000\002\055\006\000\002\055\005\000\002" +
    "\055\005\000\002\055\006\000\002\055\010\000\002\055" +
    "\007\000\002\057\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0155\000\040\005\026\006\011\007\030\010\034\011" +
    "\016\012\033\030\012\031\031\070\017\074\005\075\025" +
    "\076\035\077\023\100\024\101\006\001\002\000\042\002" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\030\ufffa\031\ufffa\070\ufffa\074\ufffa\075\ufffa\076\ufffa\077" +
    "\ufffa\100\ufffa\101\ufffa\001\002\000\006\032\uffea\070\uffea" +
    "\001\002\000\006\032\uffe5\070\uffe5\001\002\000\042\002" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\030\ufffe\031\ufffe\070\ufffe\074\ufffe\075\ufffe\076\ufffe\077" +
    "\ufffe\100\ufffe\101\ufffe\001\002\000\004\002\u0157\001\002" +
    "\000\006\032\uffef\070\uffef\001\002\000\006\032\uffe4\070" +
    "\uffe4\001\002\000\042\002\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\030\ufff9\031\ufff9\070\ufff9\074" +
    "\ufff9\075\ufff9\076\ufff9\077\ufff9\100\ufff9\101\ufff9\001\002" +
    "\000\042\002\000\005\026\006\011\007\030\010\034\011" +
    "\016\012\033\030\012\031\031\070\017\074\005\075\025" +
    "\076\035\077\023\100\024\101\006\001\002\000\042\002" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\030\ufffb\031\ufffb\070\ufffb\074\ufffb\075\ufffb\076\ufffb\077" +
    "\ufffb\100\ufffb\101\ufffb\001\002\000\006\032\uffed\070\uffed" +
    "\001\002\000\006\032\uffeb\070\uffeb\001\002\000\006\032" +
    "\u0139\070\u0147\001\002\000\042\002\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\030\ufff7\031\ufff7\070" +
    "\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7" +
    "\001\002\000\042\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\030\ufffc\031\ufffc\070\ufffc\074\ufffc" +
    "\075\ufffc\076\ufffc\077\ufffc\100\ufffc\101\ufffc\001\002\000" +
    "\006\032\uffe6\070\uffe6\001\002\000\006\032\uffe7\070\uffe7" +
    "\001\002\000\006\032\uffe9\070\uffe9\001\002\000\004\070" +
    "\u013a\001\002\000\042\002\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\030\ufffd\031\ufffd\070\ufffd\074" +
    "\ufffd\075\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd\001\002" +
    "\000\006\070\155\113\156\001\002\000\006\024\036\025" +
    "\037\001\002\000\042\002\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\030\ufff8\031\ufff8\070\ufff8\074" +
    "\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8\001\002" +
    "\000\006\032\uffec\070\uffec\001\002\000\006\032\uffee\070" +
    "\uffee\001\002\000\006\032\uffe8\070\uffe8\001\002\000\004" +
    "\070\041\001\002\000\004\066\040\001\002\000\042\002" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\030\ufff5\031\ufff5\070\ufff5\074\ufff5\075\ufff5\076\ufff5\077" +
    "\ufff5\100\ufff5\101\ufff5\001\002\000\032\004\052\034\062" +
    "\036\060\044\044\045\064\060\047\063\042\064\056\065" +
    "\061\066\043\067\066\070\055\001\002\000\116\002\uff93" +
    "\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93\030" +
    "\uff93\031\uff93\033\uff93\035\uff93\037\uff93\040\uff93\041\uff93" +
    "\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050" +
    "\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93" +
    "\057\uff93\062\uff93\070\uff93\074\uff93\075\uff93\076\uff93\077" +
    "\uff93\100\uff93\101\uff93\111\uff93\112\uff93\001\002\000\116" +
    "\002\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012" +
    "\uff8e\030\uff8e\031\uff8e\033\uff8e\035\uff8e\037\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047" +
    "\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e" +
    "\056\uff8e\057\uff8e\062\uff8e\070\uff8e\074\uff8e\075\uff8e\076" +
    "\uff8e\077\uff8e\100\uff8e\101\uff8e\111\uff8e\112\uff8e\001\002" +
    "\000\032\004\052\034\062\036\060\044\044\045\064\060" +
    "\047\063\042\064\056\065\061\066\043\067\066\070\055" +
    "\001\002\000\116\002\uff99\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\011\uff99\012\uff99\030\uff99\031\uff99\033\uff99\035\uff99" +
    "\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045" +
    "\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99" +
    "\054\uff99\055\uff99\056\uff99\057\uff99\062\uff99\070\uff99\074" +
    "\uff99\075\uff99\076\uff99\077\uff99\100\uff99\101\uff99\111\uff99" +
    "\112\uff99\001\002\000\116\002\uff8d\005\uff8d\006\uff8d\007" +
    "\uff8d\010\uff8d\011\uff8d\012\uff8d\030\uff8d\031\uff8d\033\uff8d" +
    "\035\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044" +
    "\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d" +
    "\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\062\uff8d\070" +
    "\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d\100\uff8d\101\uff8d" +
    "\111\uff8d\112\uff8d\001\002\000\032\004\052\034\062\036" +
    "\060\044\044\045\064\060\047\063\042\064\056\065\061" +
    "\066\043\067\066\070\055\001\002\000\116\002\uff98\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\030\uff98" +
    "\031\uff98\033\uff98\035\uff98\037\uff98\040\uff98\041\uff98\042" +
    "\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98" +
    "\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057" +
    "\uff98\062\uff98\070\uff98\074\uff98\075\uff98\076\uff98\077\uff98" +
    "\100\uff98\101\uff98\111\uff98\112\uff98\001\002\000\116\002" +
    "\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a" +
    "\030\uff8a\031\uff8a\033\uff8a\035\uff8a\037\uff8a\040\uff8a\041" +
    "\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a" +
    "\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056" +
    "\uff8a\057\uff8a\062\uff8a\070\uff8a\074\uff8a\075\uff8a\076\uff8a" +
    "\077\uff8a\100\uff8a\101\uff8a\111\uff8a\112\uff8a\001\002\000" +
    "\116\002\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f" +
    "\012\uff8f\030\uff8f\031\uff8f\033\uff8f\035\uff8f\037\uff8f\040" +
    "\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f" +
    "\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055" +
    "\uff8f\056\uff8f\057\uff8f\062\uff8f\070\uff8f\074\uff8f\075\uff8f" +
    "\076\uff8f\077\uff8f\100\uff8f\101\uff8f\111\uff8f\112\uff8f\001" +
    "\002\000\116\002\uff94\005\uff94\006\uff94\007\uff94\010\uff94" +
    "\011\uff94\012\uff94\030\uff94\031\uff94\033\uff94\035\uff94\037" +
    "\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94" +
    "\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054" +
    "\uff94\055\uff94\056\uff94\057\uff94\062\uff94\070\uff94\074\uff94" +
    "\075\uff94\076\uff94\077\uff94\100\uff94\101\uff94\111\uff94\112" +
    "\uff94\001\002\000\102\002\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\030\uffdf\031\uffdf\042\102\043" +
    "\100\044\101\045\073\046\106\047\076\050\077\051\104" +
    "\052\103\053\072\054\071\055\105\056\074\057\110\070" +
    "\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101\uffdf" +
    "\111\075\112\107\001\002\000\126\002\uff76\005\uff76\006" +
    "\uff76\007\uff76\010\uff76\011\uff76\012\uff76\030\uff76\031\uff76" +
    "\032\uff76\033\uff76\035\uff76\036\147\037\uff76\040\uff76\041" +
    "\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76" +
    "\050\uff76\051\uff76\052\uff76\053\uff76\054\uff76\055\uff76\056" +
    "\uff76\057\uff76\061\uff76\062\uff76\070\uff76\074\uff76\075\uff76" +
    "\076\uff76\077\uff76\100\uff76\101\uff76\111\uff76\112\uff76\114" +
    "\uff76\001\002\000\116\002\uff90\005\uff90\006\uff90\007\uff90" +
    "\010\uff90\011\uff90\012\uff90\030\uff90\031\uff90\033\uff90\035" +
    "\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90" +
    "\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053" +
    "\uff90\054\uff90\055\uff90\056\uff90\057\uff90\062\uff90\070\uff90" +
    "\074\uff90\075\uff90\076\uff90\077\uff90\100\uff90\101\uff90\111" +
    "\uff90\112\uff90\001\002\000\116\002\uff97\005\uff97\006\uff97" +
    "\007\uff97\010\uff97\011\uff97\012\uff97\030\uff97\031\uff97\033" +
    "\uff97\035\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97" +
    "\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052" +
    "\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97\062\uff97" +
    "\070\uff97\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97\101" +
    "\uff97\111\uff97\112\uff97\001\002\000\032\004\052\034\062" +
    "\036\060\044\044\045\064\060\047\063\042\064\056\065" +
    "\061\066\043\067\066\070\055\001\002\000\116\002\uff91" +
    "\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\030" +
    "\uff91\031\uff91\033\uff91\035\uff91\037\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91" +
    "\057\uff91\062\uff91\070\uff91\074\uff91\075\uff91\076\uff91\077" +
    "\uff91\100\uff91\101\uff91\111\uff91\112\uff91\001\002\000\032" +
    "\004\052\034\062\036\060\044\044\045\064\060\047\063" +
    "\042\064\056\065\061\066\043\067\066\070\055\001\002" +
    "\000\122\002\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011" +
    "\uff96\012\uff96\030\uff96\031\uff96\032\127\033\uff96\035\uff96" +
    "\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96" +
    "\054\uff96\055\uff96\056\uff96\057\uff96\061\130\062\uff96\070" +
    "\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96\101\uff96" +
    "\111\uff96\112\uff96\001\002\000\032\004\052\034\062\036" +
    "\060\044\044\045\064\060\047\063\042\064\056\065\061" +
    "\066\043\067\066\070\055\001\002\000\116\002\uff8c\005" +
    "\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\030\uff8c" +
    "\031\uff8c\033\uff8c\035\uff8c\037\uff8c\040\uff8c\041\uff8c\042" +
    "\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c" +
    "\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057" +
    "\uff8c\062\uff8c\070\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c" +
    "\100\uff8c\101\uff8c\111\uff8c\112\uff8c\001\002\000\116\002" +
    "\uff92\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92" +
    "\030\uff92\031\uff92\033\uff92\035\uff92\037\uff92\040\uff92\041" +
    "\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92" +
    "\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056" +
    "\uff92\057\uff92\062\uff92\070\uff92\074\uff92\075\uff92\076\uff92" +
    "\077\uff92\100\uff92\101\uff92\111\uff92\112\uff92\001\002\000" +
    "\116\002\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b" +
    "\012\uff8b\030\uff8b\031\uff8b\033\uff8b\035\uff8b\037\uff8b\040" +
    "\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b" +
    "\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055" +
    "\uff8b\056\uff8b\057\uff8b\062\uff8b\070\uff8b\074\uff8b\075\uff8b" +
    "\076\uff8b\077\uff8b\100\uff8b\101\uff8b\111\uff8b\112\uff8b\001" +
    "\002\000\116\002\uff89\005\uff89\006\uff89\007\uff89\010\uff89" +
    "\011\uff89\012\uff89\030\uff89\031\uff89\033\uff89\035\uff89\037" +
    "\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89" +
    "\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054" +
    "\uff89\055\uff89\056\uff89\057\uff89\062\uff89\070\uff89\074\uff89" +
    "\075\uff89\076\uff89\077\uff89\100\uff89\101\uff89\111\075\112" +
    "\107\001\002\000\032\004\052\034\062\036\060\044\044" +
    "\045\064\060\047\063\042\064\056\065\061\066\043\067" +
    "\066\070\055\001\002\000\032\004\052\034\062\036\060" +
    "\044\044\045\064\060\047\063\042\064\056\065\061\066" +
    "\043\067\066\070\055\001\002\000\032\004\052\034\062" +
    "\036\060\044\044\045\064\060\047\063\042\064\056\065" +
    "\061\066\043\067\066\070\055\001\002\000\032\004\052" +
    "\034\062\036\060\044\044\045\064\060\047\063\042\064" +
    "\056\065\061\066\043\067\066\070\055\001\002\000\116" +
    "\002\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012" +
    "\uff86\030\uff86\031\uff86\033\uff86\035\uff86\037\uff86\040\uff86" +
    "\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047" +
    "\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86\055\uff86" +
    "\056\uff86\057\uff86\062\uff86\070\uff86\074\uff86\075\uff86\076" +
    "\uff86\077\uff86\100\uff86\101\uff86\111\uff86\112\uff86\001\002" +
    "\000\032\004\052\034\062\036\060\044\044\045\064\060" +
    "\047\063\042\064\056\065\061\066\043\067\066\070\055" +
    "\001\002\000\032\004\052\034\062\036\060\044\044\045" +
    "\064\060\047\063\042\064\056\065\061\066\043\067\066" +
    "\070\055\001\002\000\032\004\052\034\062\036\060\044" +
    "\044\045\064\060\047\063\042\064\056\065\061\066\043" +
    "\067\066\070\055\001\002\000\032\004\052\034\062\036" +
    "\060\044\044\045\064\060\047\063\042\064\056\065\061" +
    "\066\043\067\066\070\055\001\002\000\032\004\052\034" +
    "\062\036\060\044\044\045\064\060\047\063\042\064\056" +
    "\065\061\066\043\067\066\070\055\001\002\000\032\004" +
    "\052\034\062\036\060\044\044\045\064\060\047\063\042" +
    "\064\056\065\061\066\043\067\066\070\055\001\002\000" +
    "\032\004\052\034\062\036\060\044\044\045\064\060\047" +
    "\063\042\064\056\065\061\066\043\067\066\070\055\001" +
    "\002\000\032\004\052\034\062\036\060\044\044\045\064" +
    "\060\047\063\042\064\056\065\061\066\043\067\066\070" +
    "\055\001\002\000\032\004\052\034\062\036\060\044\044" +
    "\045\064\060\047\063\042\064\056\065\061\066\043\067" +
    "\066\070\055\001\002\000\116\002\uff85\005\uff85\006\uff85" +
    "\007\uff85\010\uff85\011\uff85\012\uff85\030\uff85\031\uff85\033" +
    "\uff85\035\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85" +
    "\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051\uff85\052" +
    "\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85\062\uff85" +
    "\070\uff85\074\uff85\075\uff85\076\uff85\077\uff85\100\uff85\101" +
    "\uff85\111\uff85\112\uff85\001\002\000\032\004\052\034\062" +
    "\036\060\044\044\045\064\060\047\063\042\064\056\065" +
    "\061\066\043\067\066\070\055\001\002\000\116\002\uff7e" +
    "\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\030" +
    "\uff7e\031\uff7e\033\uff7e\035\uff7e\037\uff7e\040\uff7e\041\uff7e" +
    "\042\102\043\100\044\101\045\073\046\106\047\076\050" +
    "\077\051\104\052\103\053\072\054\071\055\105\056\074" +
    "\057\uff7e\062\uff7e\070\uff7e\074\uff7e\075\uff7e\076\uff7e\077" +
    "\uff7e\100\uff7e\101\uff7e\111\075\112\107\001\002\000\116" +
    "\002\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012" +
    "\uff82\030\uff82\031\uff82\033\uff82\035\uff82\037\uff82\040\uff82" +
    "\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047" +
    "\076\050\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055\uff82" +
    "\056\uff82\057\uff82\062\uff82\070\uff82\074\uff82\075\uff82\076" +
    "\uff82\077\uff82\100\uff82\101\uff82\111\075\112\107\001\002" +
    "\000\106\002\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011" +
    "\uff7b\012\uff7b\030\uff7b\031\uff7b\033\uff7b\035\uff7b\037\uff7b" +
    "\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\101\045\073\046" +
    "\106\047\076\050\077\051\104\056\uff7b\057\uff7b\062\uff7b" +
    "\070\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b\100\uff7b\101" +
    "\uff7b\111\075\112\107\001\002\000\116\002\uff81\005\uff81" +
    "\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\030\uff81\031" +
    "\uff81\033\uff81\035\uff81\037\uff81\040\uff81\041\uff81\042\uff81" +
    "\043\uff81\044\uff81\045\uff81\046\uff81\047\076\050\uff81\051" +
    "\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81" +
    "\062\uff81\070\uff81\074\uff81\075\uff81\076\uff81\077\uff81\100" +
    "\uff81\101\uff81\111\075\112\107\001\002\000\106\002\uff7a" +
    "\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a\030" +
    "\uff7a\031\uff7a\033\uff7a\035\uff7a\037\uff7a\040\uff7a\041\uff7a" +
    "\042\uff7a\043\uff7a\044\101\045\073\046\106\047\076\050" +
    "\077\051\104\056\uff7a\057\uff7a\062\uff7a\070\uff7a\074\uff7a" +
    "\075\uff7a\076\uff7a\077\uff7a\100\uff7a\101\uff7a\111\075\112" +
    "\107\001\002\000\116\002\uff78\005\uff78\006\uff78\007\uff78" +
    "\010\uff78\011\uff78\012\uff78\030\uff78\031\uff78\033\uff78\035" +
    "\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\101" +
    "\045\073\046\106\047\076\050\077\051\104\052\103\053" +
    "\072\054\071\055\105\056\uff78\057\uff78\062\uff78\070\uff78" +
    "\074\uff78\075\uff78\076\uff78\077\uff78\100\uff78\101\uff78\111" +
    "\075\112\107\001\002\000\116\002\uff84\005\uff84\006\uff84" +
    "\007\uff84\010\uff84\011\uff84\012\uff84\030\uff84\031\uff84\033" +
    "\uff84\035\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84" +
    "\044\uff84\045\uff84\046\106\047\076\050\077\051\104\052" +
    "\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84\062\uff84" +
    "\070\uff84\074\uff84\075\uff84\076\uff84\077\uff84\100\uff84\101" +
    "\uff84\111\075\112\107\001\002\000\116\002\uff77\005\uff77" +
    "\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77\030\uff77\031" +
    "\uff77\033\uff77\035\uff77\037\uff77\040\uff77\041\uff77\042\uff77" +
    "\043\uff77\044\101\045\073\046\106\047\076\050\077\051" +
    "\104\052\103\053\072\054\071\055\105\056\uff77\057\uff77" +
    "\062\uff77\070\uff77\074\uff77\075\uff77\076\uff77\077\uff77\100" +
    "\uff77\101\uff77\111\075\112\107\001\002\000\116\002\uff7f" +
    "\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f\030" +
    "\uff7f\031\uff7f\033\uff7f\035\uff7f\037\uff7f\040\uff7f\041\uff7f" +
    "\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\076\050" +
    "\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f" +
    "\057\uff7f\062\uff7f\070\uff7f\074\uff7f\075\uff7f\076\uff7f\077" +
    "\uff7f\100\uff7f\101\uff7f\111\075\112\107\001\002\000\116" +
    "\002\uff80\005\uff80\006\uff80\007\uff80\010\uff80\011\uff80\012" +
    "\uff80\030\uff80\031\uff80\033\uff80\035\uff80\037\uff80\040\uff80" +
    "\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047" +
    "\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80" +
    "\056\uff80\057\uff80\062\uff80\070\uff80\074\uff80\075\uff80\076" +
    "\uff80\077\uff80\100\uff80\101\uff80\111\075\112\107\001\002" +
    "\000\116\002\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d\011" +
    "\uff7d\012\uff7d\030\uff7d\031\uff7d\033\uff7d\035\uff7d\037\uff7d" +
    "\040\uff7d\041\uff7d\042\102\043\100\044\101\045\073\046" +
    "\106\047\076\050\077\051\104\052\103\053\072\054\071" +
    "\055\105\056\uff7d\057\uff7d\062\uff7d\070\uff7d\074\uff7d\075" +
    "\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d\111\075\112\107" +
    "\001\002\000\116\002\uff83\005\uff83\006\uff83\007\uff83\010" +
    "\uff83\011\uff83\012\uff83\030\uff83\031\uff83\033\uff83\035\uff83" +
    "\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045" +
    "\uff83\046\106\047\076\050\077\051\104\052\uff83\053\uff83" +
    "\054\uff83\055\uff83\056\uff83\057\uff83\062\uff83\070\uff83\074" +
    "\uff83\075\uff83\076\uff83\077\uff83\100\uff83\101\uff83\111\075" +
    "\112\107\001\002\000\106\002\uff79\005\uff79\006\uff79\007" +
    "\uff79\010\uff79\011\uff79\012\uff79\030\uff79\031\uff79\033\uff79" +
    "\035\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044" +
    "\101\045\073\046\106\047\076\050\077\051\104\056\uff79" +
    "\057\uff79\062\uff79\070\uff79\074\uff79\075\uff79\076\uff79\077" +
    "\uff79\100\uff79\101\uff79\111\075\112\107\001\002\000\106" +
    "\002\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012" +
    "\uff7c\030\uff7c\031\uff7c\033\uff7c\035\uff7c\037\uff7c\040\uff7c" +
    "\041\uff7c\042\uff7c\043\uff7c\044\101\045\073\046\106\047" +
    "\076\050\077\051\104\056\uff7c\057\uff7c\062\uff7c\070\uff7c" +
    "\074\uff7c\075\uff7c\076\uff7c\077\uff7c\100\uff7c\101\uff7c\111" +
    "\075\112\107\001\002\000\032\004\052\034\062\036\060" +
    "\044\044\045\064\060\047\063\042\064\056\065\061\066" +
    "\043\067\066\070\055\001\002\000\004\070\131\001\002" +
    "\000\126\002\uff73\005\uff73\006\uff73\007\uff73\010\uff73\011" +
    "\uff73\012\uff73\030\uff73\031\uff73\032\uff73\033\uff73\035\uff73" +
    "\036\132\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044" +
    "\uff73\045\uff73\046\uff73\047\uff73\050\uff73\051\uff73\052\uff73" +
    "\053\uff73\054\uff73\055\uff73\056\uff73\057\uff73\061\uff73\062" +
    "\uff73\070\uff73\074\uff73\075\uff73\076\uff73\077\uff73\100\uff73" +
    "\101\uff73\111\uff73\112\uff73\114\uff73\001\002\000\034\004" +
    "\052\034\062\036\060\037\135\044\044\045\064\060\047" +
    "\063\042\064\056\065\061\066\043\067\066\070\055\001" +
    "\002\000\006\037\137\040\136\001\002\000\050\035\uff9a" +
    "\037\uff9a\040\uff9a\042\102\043\100\044\101\045\073\046" +
    "\106\047\076\050\077\051\104\052\103\053\072\054\071" +
    "\055\105\056\074\057\110\111\075\112\107\001\002\000" +
    "\124\002\uff70\005\uff70\006\uff70\007\uff70\010\uff70\011\uff70" +
    "\012\uff70\030\uff70\031\uff70\032\uff70\033\uff70\035\uff70\037" +
    "\uff70\040\uff70\041\uff70\042\uff70\043\uff70\044\uff70\045\uff70" +
    "\046\uff70\047\uff70\050\uff70\051\uff70\052\uff70\053\uff70\054" +
    "\uff70\055\uff70\056\uff70\057\uff70\061\uff70\062\uff70\070\uff70" +
    "\074\uff70\075\uff70\076\uff70\077\uff70\100\uff70\101\uff70\111" +
    "\uff70\112\uff70\114\uff70\001\002\000\032\004\052\034\062" +
    "\036\060\044\044\045\064\060\047\063\042\064\056\065" +
    "\061\066\043\067\066\070\055\001\002\000\124\002\uff71" +
    "\005\uff71\006\uff71\007\uff71\010\uff71\011\uff71\012\uff71\030" +
    "\uff71\031\uff71\032\uff71\033\uff71\035\uff71\037\uff71\040\uff71" +
    "\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046\uff71\047" +
    "\uff71\050\uff71\051\uff71\052\uff71\053\uff71\054\uff71\055\uff71" +
    "\056\uff71\057\uff71\061\uff71\062\uff71\070\uff71\074\uff71\075" +
    "\uff71\076\uff71\077\uff71\100\uff71\101\uff71\111\uff71\112\uff71" +
    "\114\uff71\001\002\000\050\035\uff9b\037\uff9b\040\uff9b\042" +
    "\102\043\100\044\101\045\073\046\106\047\076\050\077" +
    "\051\104\052\103\053\072\054\071\055\105\056\074\057" +
    "\110\111\075\112\107\001\002\000\044\033\142\042\102" +
    "\043\100\044\101\045\073\046\106\047\076\050\077\051" +
    "\104\052\103\053\072\054\071\055\105\056\074\057\110" +
    "\111\075\112\107\001\002\000\124\002\uff72\005\uff72\006" +
    "\uff72\007\uff72\010\uff72\011\uff72\012\uff72\030\uff72\031\uff72" +
    "\032\uff72\033\uff72\035\uff72\037\uff72\040\uff72\041\uff72\042" +
    "\uff72\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72" +
    "\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056\uff72\057" +
    "\uff72\061\uff72\062\uff72\070\uff72\074\uff72\075\uff72\076\uff72" +
    "\077\uff72\100\uff72\101\uff72\111\uff72\112\uff72\114\uff72\001" +
    "\002\000\006\035\144\040\136\001\002\000\116\002\uff6f" +
    "\005\uff6f\006\uff6f\007\uff6f\010\uff6f\011\uff6f\012\uff6f\030" +
    "\uff6f\031\uff6f\033\uff6f\035\uff6f\037\uff6f\040\uff6f\041\uff6f" +
    "\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050" +
    "\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f" +
    "\057\uff6f\062\uff6f\070\uff6f\074\uff6f\075\uff6f\076\uff6f\077" +
    "\uff6f\100\uff6f\101\uff6f\111\uff6f\112\uff6f\001\002\000\044" +
    "\037\146\042\102\043\100\044\101\045\073\046\106\047" +
    "\076\050\077\051\104\052\103\053\072\054\071\055\105" +
    "\056\074\057\110\111\075\112\107\001\002\000\116\002" +
    "\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\030\uff95\031\uff95\033\uff95\035\uff95\037\uff95\040\uff95\041" +
    "\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95" +
    "\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056" +
    "\uff95\057\uff95\062\uff95\070\uff95\074\uff95\075\uff95\076\uff95" +
    "\077\uff95\100\uff95\101\uff95\111\uff95\112\uff95\001\002\000" +
    "\034\004\052\034\062\036\060\037\151\044\044\045\064" +
    "\060\047\063\042\064\056\065\061\066\043\067\066\070" +
    "\055\001\002\000\006\037\152\040\136\001\002\000\124" +
    "\002\uff74\005\uff74\006\uff74\007\uff74\010\uff74\011\uff74\012" +
    "\uff74\030\uff74\031\uff74\032\uff74\033\uff74\035\uff74\037\uff74" +
    "\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045\uff74\046" +
    "\uff74\047\uff74\050\uff74\051\uff74\052\uff74\053\uff74\054\uff74" +
    "\055\uff74\056\uff74\057\uff74\061\uff74\062\uff74\070\uff74\074" +
    "\uff74\075\uff74\076\uff74\077\uff74\100\uff74\101\uff74\111\uff74" +
    "\112\uff74\114\uff74\001\002\000\124\002\uff75\005\uff75\006" +
    "\uff75\007\uff75\010\uff75\011\uff75\012\uff75\030\uff75\031\uff75" +
    "\032\uff75\033\uff75\035\uff75\037\uff75\040\uff75\041\uff75\042" +
    "\uff75\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75" +
    "\051\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75\057" +
    "\uff75\061\uff75\062\uff75\070\uff75\074\uff75\075\uff75\076\uff75" +
    "\077\uff75\100\uff75\101\uff75\111\uff75\112\uff75\114\uff75\001" +
    "\002\000\116\002\uff88\005\uff88\006\uff88\007\uff88\010\uff88" +
    "\011\uff88\012\uff88\030\uff88\031\uff88\033\uff88\035\uff88\037" +
    "\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88" +
    "\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054" +
    "\uff88\055\uff88\056\uff88\057\uff88\062\uff88\070\uff88\074\uff88" +
    "\075\uff88\076\uff88\077\uff88\100\uff88\101\uff88\111\075\112" +
    "\107\001\002\000\116\002\uff87\005\uff87\006\uff87\007\uff87" +
    "\010\uff87\011\uff87\012\uff87\030\uff87\031\uff87\033\uff87\035" +
    "\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87" +
    "\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053" +
    "\uff87\054\uff87\055\uff87\056\uff87\057\uff87\062\uff87\070\uff87" +
    "\074\uff87\075\uff87\076\uff87\077\uff87\100\uff87\101\uff87\111" +
    "\075\112\107\001\002\000\006\036\u0125\062\u0126\001\002" +
    "\000\004\036\157\001\002\000\004\037\160\001\002\000" +
    "\004\034\161\001\002\000\074\006\011\010\034\011\016" +
    "\012\033\013\214\014\224\015\222\016\177\017\204\022" +
    "\163\023\221\026\216\030\012\034\173\035\uffc9\070\202" +
    "\074\005\075\025\076\035\077\023\100\024\101\006\102" +
    "\205\103\172\104\166\105\167\106\207\107\170\110\175" +
    "\001\002\000\100\006\011\010\034\011\016\012\033\013" +
    "\214\014\224\015\222\016\177\017\204\020\uffca\021\uffca" +
    "\022\163\023\221\026\216\030\012\034\173\035\uffca\070" +
    "\202\074\005\075\025\076\035\077\023\100\024\101\006" +
    "\102\205\103\172\104\166\105\167\106\207\107\170\110" +
    "\175\001\002\000\004\041\u0123\001\002\000\100\006\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\026\uffc4" +
    "\030\uffc4\034\uffc4\035\uffc4\070\uffc4\074\uffc4\075\uffc4\076" +
    "\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4" +
    "\105\uffc4\106\uffc4\107\uffc4\110\uffc4\001\002\000\100\006" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\026" +
    "\uffbd\030\uffbd\034\uffbd\035\uffbd\070\uffbd\074\uffbd\075\uffbd" +
    "\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104" +
    "\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd\001\002\000\004" +
    "\036\u011f\001\002\000\004\036\u011c\001\002\000\004\036" +
    "\u0118\001\002\000\100\006\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\026\uffc1\030\uffc1\034\uffc1\035\uffc1" +
    "\070\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101" +
    "\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1" +
    "\110\uffc1\001\002\000\004\036\u0112\001\002\000\074\006" +
    "\011\010\034\011\016\012\033\013\214\014\224\015\222" +
    "\016\177\017\204\022\163\023\221\026\216\030\012\034" +
    "\173\035\uffc9\070\202\074\005\075\025\076\035\077\023" +
    "\100\024\101\006\102\205\103\172\104\166\105\167\106" +
    "\207\107\170\110\175\001\002\000\004\035\u010f\001\002" +
    "\000\004\036\u010b\001\002\000\100\006\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\026\uffc0\030\uffc0\034" +
    "\uffc0\035\uffc0\070\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0" +
    "\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\105\uffc0\106" +
    "\uffc0\107\uffc0\110\uffc0\001\002\000\004\034\u0103\001\002" +
    "\000\100\006\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\026\uffc7\030\uffc7\034\uffc7\035\uffc7\070\uffc7\074" +
    "\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7" +
    "\103\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\001" +
    "\002\000\100\006\uffba\010\uffba\011\uffba\012\uffba\013\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\026\uffba\030\uffba\034\uffba\035\uffba\070\uffba" +
    "\074\uffba\075\uffba\076\uffba\077\uffba\100\uffba\101\uffba\102" +
    "\uffba\103\uffba\104\uffba\105\uffba\106\uffba\107\uffba\110\uffba" +
    "\001\002\000\022\032\uff76\036\147\041\uff76\061\uff76\070" +
    "\uffeb\111\uff76\112\uff76\114\uff76\001\002\000\100\006\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\026\uffc2" +
    "\030\uffc2\034\uffc2\035\uffc2\070\uffc2\074\uffc2\075\uffc2\076" +
    "\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2" +
    "\105\uffc2\106\uffc2\107\uffc2\110\uffc2\001\002\000\004\036" +
    "\361\001\002\000\004\036\355\001\002\000\100\006\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\026\uffc6" +
    "\030\uffc6\034\uffc6\035\uffc6\070\uffc6\074\uffc6\075\uffc6\076" +
    "\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6" +
    "\105\uffc6\106\uffc6\107\uffc6\110\uffc6\001\002\000\004\036" +
    "\351\001\002\000\100\006\uffbf\010\uffbf\011\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\026\uffbf\030\uffbf\034\uffbf\035\uffbf" +
    "\070\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101" +
    "\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf" +
    "\110\uffbf\001\002\000\016\032\127\041\350\061\130\111" +
    "\250\112\246\114\247\001\002\000\100\006\uffbc\010\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\026\uffbc\030\uffbc" +
    "\034\uffbc\035\uffbc\070\uffbc\074\uffbc\075\uffbc\076\uffbc\077" +
    "\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc" +
    "\106\uffbc\107\uffbc\110\uffbc\001\002\000\100\006\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\026\uffbb\030" +
    "\uffbb\034\uffbb\035\uffbb\070\uffbb\074\uffbb\075\uffbb\076\uffbb" +
    "\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105" +
    "\uffbb\106\uffbb\107\uffbb\110\uffbb\001\002\000\004\036\334" +
    "\001\002\000\004\070\271\001\002\000\034\004\052\034" +
    "\062\036\060\041\266\044\044\045\064\060\047\063\042" +
    "\064\056\065\061\066\043\067\066\070\055\001\002\000" +
    "\004\041\265\001\002\000\100\006\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\026\uffc5\030\uffc5\034\uffc5" +
    "\035\uffc5\070\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100" +
    "\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5" +
    "\107\uffc5\110\uffc5\001\002\000\004\041\264\001\002\000" +
    "\004\036\233\001\002\000\100\006\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\026\uffc3\030\uffc3\034\uffc3" +
    "\035\uffc3\070\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3\100" +
    "\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3" +
    "\107\uffc3\110\uffc3\001\002\000\004\036\225\001\002\000" +
    "\032\004\052\034\062\036\060\044\044\045\064\060\047" +
    "\063\042\064\056\065\061\066\043\067\066\070\055\001" +
    "\002\000\044\037\227\042\102\043\100\044\101\045\073" +
    "\046\106\047\076\050\077\051\104\052\103\053\072\054" +
    "\071\055\105\056\074\057\110\111\075\112\107\001\002" +
    "\000\004\034\230\001\002\000\074\006\011\010\034\011" +
    "\016\012\033\013\214\014\224\015\222\016\177\017\204" +
    "\022\163\023\221\026\216\030\012\034\173\035\uffc9\070" +
    "\202\074\005\075\025\076\035\077\023\100\024\101\006" +
    "\102\205\103\172\104\166\105\167\106\207\107\170\110" +
    "\175\001\002\000\004\035\232\001\002\000\100\006\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\026\uffb1" +
    "\030\uffb1\034\uffb1\035\uffb1\070\uffb1\074\uffb1\075\uffb1\076" +
    "\uffb1\077\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1" +
    "\105\uffb1\106\uffb1\107\uffb1\110\uffb1\001\002\000\032\006" +
    "\011\010\034\011\016\012\033\030\012\070\202\074\005" +
    "\075\025\076\035\077\023\100\024\101\006\001\002\000" +
    "\004\041\254\001\002\000\014\032\127\061\130\111\250" +
    "\112\246\114\247\001\002\000\032\004\052\034\062\036" +
    "\060\044\044\045\064\060\047\063\042\064\056\065\061" +
    "\066\043\067\066\070\055\001\002\000\044\041\240\042" +
    "\102\043\100\044\101\045\073\046\106\047\076\050\077" +
    "\051\104\052\103\053\072\054\071\055\105\056\074\057" +
    "\110\111\075\112\107\001\002\000\004\070\055\001\002" +
    "\000\004\037\242\001\002\000\004\034\243\001\002\000" +
    "\074\006\011\010\034\011\016\012\033\013\214\014\224" +
    "\015\222\016\177\017\204\022\163\023\221\026\216\030" +
    "\012\034\173\035\uffc9\070\202\074\005\075\025\076\035" +
    "\077\023\100\024\101\006\102\205\103\172\104\166\105" +
    "\167\106\207\107\170\110\175\001\002\000\004\035\245" +
    "\001\002\000\100\006\uffaf\010\uffaf\011\uffaf\012\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\026\uffaf\030\uffaf\034\uffaf\035\uffaf\070" +
    "\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf" +
    "\102\uffaf\103\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110" +
    "\uffaf\001\002\000\006\037\uffa3\041\uffa3\001\002\000\034" +
    "\004\052\034\062\036\060\044\044\045\064\046\251\060" +
    "\047\063\042\064\056\065\061\066\043\067\066\070\055" +
    "\001\002\000\006\037\uffa4\041\uffa4\001\002\000\004\070" +
    "\055\001\002\000\046\037\uffa6\041\uffa6\042\102\043\100" +
    "\044\101\045\073\046\106\047\076\050\077\051\104\052" +
    "\103\053\072\054\071\055\105\056\074\057\110\111\075" +
    "\112\107\001\002\000\012\032\127\037\uffa5\041\uffa5\061" +
    "\130\001\002\000\032\004\052\034\062\036\060\044\044" +
    "\045\064\060\047\063\042\064\056\065\061\066\043\067" +
    "\066\070\055\001\002\000\044\041\256\042\102\043\100" +
    "\044\101\045\073\046\106\047\076\050\077\051\104\052" +
    "\103\053\072\054\071\055\105\056\074\057\110\111\075" +
    "\112\107\001\002\000\004\070\055\001\002\000\004\037" +
    "\260\001\002\000\004\034\261\001\002\000\074\006\011" +
    "\010\034\011\016\012\033\013\214\014\224\015\222\016" +
    "\177\017\204\022\163\023\221\026\216\030\012\034\173" +
    "\035\uffc9\070\202\074\005\075\025\076\035\077\023\100" +
    "\024\101\006\102\205\103\172\104\166\105\167\106\207" +
    "\107\170\110\175\001\002\000\004\035\263\001\002\000" +
    "\100\006\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\026\uffae\030\uffae\034\uffae\035\uffae\070\uffae\074\uffae" +
    "\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102\uffae\103" +
    "\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae\001\002" +
    "\000\100\006\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\026\uffb6\030\uffb6\034\uffb6\035\uffb6\070\uffb6\074" +
    "\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6" +
    "\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6\001" +
    "\002\000\100\006\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\026\uffbe\030\uffbe\034\uffbe\035\uffbe\070\uffbe" +
    "\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102" +
    "\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe" +
    "\001\002\000\100\006\uffb8\010\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\026\uffb8\030\uffb8\034\uffb8\035\uffb8\070" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8" +
    "\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\110" +
    "\uffb8\001\002\000\044\041\270\042\102\043\100\044\101" +
    "\045\073\046\106\047\076\050\077\051\104\052\103\053" +
    "\072\054\071\055\105\056\074\057\110\111\075\112\107" +
    "\001\002\000\100\006\uffb9\010\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\026\uffb9\030\uffb9\034\uffb9\035\uffb9\070" +
    "\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9" +
    "\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9\110" +
    "\uffb9\001\002\000\012\032\uffd5\040\uffd5\041\uffd5\114\uffd5" +
    "\001\002\000\012\032\276\040\273\041\277\114\300\001" +
    "\002\000\004\070\333\001\002\000\010\032\321\041\322" +
    "\114\323\001\002\000\006\032\311\114\312\001\002\000" +
    "\034\004\052\033\307\034\062\036\060\044\044\045\064" +
    "\060\047\063\042\064\056\065\061\066\043\067\066\070" +
    "\055\001\002\000\134\002\uffde\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\026\uffde\030\uffde\031\uffde\034\uffde\035\uffde\036\uffde\044" +
    "\uffde\045\uffde\060\uffde\063\uffde\064\uffde\065\uffde\066\uffde" +
    "\067\uffde\070\uffde\074\uffde\075\uffde\076\uffde\077\uffde\100" +
    "\uffde\101\uffde\102\uffde\103\uffde\104\uffde\105\uffde\106\uffde" +
    "\107\uffde\110\uffde\001\002\000\034\004\052\034\062\036" +
    "\060\044\044\045\064\046\301\060\047\063\042\064\056" +
    "\065\061\066\043\067\066\070\055\001\002\000\004\070" +
    "\055\001\002\000\044\041\303\042\102\043\100\044\101" +
    "\045\073\046\106\047\076\050\077\051\104\052\103\053" +
    "\072\054\071\055\105\056\074\057\110\111\075\112\107" +
    "\001\002\000\134\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\026" +
    "\uffdd\030\uffdd\031\uffdd\034\uffdd\035\uffdd\036\uffdd\044\uffdd" +
    "\045\uffdd\060\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067" +
    "\uffdd\070\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd" +
    "\101\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd\107" +
    "\uffdd\110\uffdd\001\002\000\010\032\127\041\305\061\130" +
    "\001\002\000\134\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\026" +
    "\uffdc\030\uffdc\031\uffdc\034\uffdc\035\uffdc\036\uffdc\044\uffdc" +
    "\045\uffdc\060\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067" +
    "\uffdc\070\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc" +
    "\101\uffdc\102\uffdc\103\uffdc\104\uffdc\105\uffdc\106\uffdc\107" +
    "\uffdc\110\uffdc\001\002\000\044\033\310\042\102\043\100" +
    "\044\101\045\073\046\106\047\076\050\077\051\104\052" +
    "\103\053\072\054\071\055\105\056\074\057\110\111\075" +
    "\112\107\001\002\000\014\032\uffe0\037\uffe0\040\uffe0\070" +
    "\uffe0\114\uffe0\001\002\000\010\032\uffe2\041\uffe2\114\uffe2" +
    "\001\002\000\004\033\320\001\002\000\034\004\052\034" +
    "\062\036\060\044\044\045\064\046\313\060\047\063\042" +
    "\064\056\065\061\066\043\067\066\070\055\001\002\000" +
    "\004\070\055\001\002\000\044\041\315\042\102\043\100" +
    "\044\101\045\073\046\106\047\076\050\077\051\104\052" +
    "\103\053\072\054\071\055\105\056\074\057\110\111\075" +
    "\112\107\001\002\000\134\002\uffdb\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\026\uffdb\030\uffdb\031\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\044\uffdb\045\uffdb\060\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\067\uffdb\070\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb" +
    "\100\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb\106" +
    "\uffdb\107\uffdb\110\uffdb\001\002\000\010\032\127\041\317" +
    "\061\130\001\002\000\134\002\uffda\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\026\uffda\030\uffda\031\uffda\034\uffda\035\uffda\036\uffda" +
    "\044\uffda\045\uffda\060\uffda\063\uffda\064\uffda\065\uffda\066" +
    "\uffda\067\uffda\070\uffda\074\uffda\075\uffda\076\uffda\077\uffda" +
    "\100\uffda\101\uffda\102\uffda\103\uffda\104\uffda\105\uffda\106" +
    "\uffda\107\uffda\110\uffda\001\002\000\014\032\uffe1\037\uffe1" +
    "\040\uffe1\070\uffe1\114\uffe1\001\002\000\032\004\052\034" +
    "\062\036\060\044\044\045\064\060\047\063\042\064\056" +
    "\065\061\066\043\067\066\070\055\001\002\000\134\002" +
    "\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\026\uffd9\030\uffd9\031\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\044\uffd9\045\uffd9\060\uffd9\063" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\074\uffd9" +
    "\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\103" +
    "\uffd9\104\uffd9\105\uffd9\106\uffd9\107\uffd9\110\uffd9\001\002" +
    "\000\034\004\052\034\062\036\060\044\044\045\064\046" +
    "\324\060\047\063\042\064\056\065\061\066\043\067\066" +
    "\070\055\001\002\000\004\070\055\001\002\000\044\041" +
    "\326\042\102\043\100\044\101\045\073\046\106\047\076" +
    "\050\077\051\104\052\103\053\072\054\071\055\105\056" +
    "\074\057\110\111\075\112\107\001\002\000\134\002\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\026\uffd8\030\uffd8\031\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\044\uffd8\045\uffd8\060\uffd8\063\uffd8" +
    "\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\074\uffd8\075" +
    "\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\103\uffd8" +
    "\104\uffd8\105\uffd8\106\uffd8\107\uffd8\110\uffd8\001\002\000" +
    "\010\032\127\041\330\061\130\001\002\000\134\002\uffd7" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\026\uffd7\030\uffd7\031\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\044\uffd7\045\uffd7\060\uffd7\063\uffd7" +
    "\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\074\uffd7\075" +
    "\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103\uffd7" +
    "\104\uffd7\105\uffd7\106\uffd7\107\uffd7\110\uffd7\001\002\000" +
    "\044\033\332\042\102\043\100\044\101\045\073\046\106" +
    "\047\076\050\077\051\104\052\103\053\072\054\071\055" +
    "\105\056\074\057\110\111\075\112\107\001\002\000\010" +
    "\032\uffe3\041\uffe3\114\uffe3\001\002\000\012\032\uffd6\040" +
    "\uffd6\041\uffd6\114\uffd6\001\002\000\032\004\052\034\062" +
    "\036\060\044\044\045\064\060\047\063\042\064\056\065" +
    "\061\066\043\067\066\070\055\001\002\000\044\037\336" +
    "\042\102\043\100\044\101\045\073\046\106\047\076\050" +
    "\077\051\104\052\103\053\072\054\071\055\105\056\074" +
    "\057\110\111\075\112\107\001\002\000\004\034\337\001" +
    "\002\000\074\006\011\010\034\011\016\012\033\013\214" +
    "\014\224\015\222\016\177\017\204\022\163\023\221\026" +
    "\216\030\012\034\173\035\uffc9\070\202\074\005\075\025" +
    "\076\035\077\023\100\024\101\006\102\205\103\172\104" +
    "\166\105\167\106\207\107\170\110\175\001\002\000\004" +
    "\035\341\001\002\000\102\006\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\026\uffb5\030\uffb5\034\uffb5\035" +
    "\uffb5\070\uffb5\071\343\074\uffb5\075\uffb5\076\uffb5\077\uffb5" +
    "\100\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\106" +
    "\uffb5\107\uffb5\110\uffb5\001\002\000\100\006\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\026\uffb4\030\uffb4" +
    "\034\uffb4\035\uffb4\070\uffb4\074\uffb4\075\uffb4\076\uffb4\077" +
    "\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4" +
    "\106\uffb4\107\uffb4\110\uffb4\001\002\000\006\013\214\034" +
    "\345\001\002\000\100\006\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\026\uffb3\030\uffb3\034\uffb3\035\uffb3" +
    "\070\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101" +
    "\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3" +
    "\110\uffb3\001\002\000\074\006\011\010\034\011\016\012" +
    "\033\013\214\014\224\015\222\016\177\017\204\022\163" +
    "\023\221\026\216\030\012\034\173\035\uffc9\070\202\074" +
    "\005\075\025\076\035\077\023\100\024\101\006\102\205" +
    "\103\172\104\166\105\167\106\207\107\170\110\175\001" +
    "\002\000\004\035\347\001\002\000\100\006\uffb2\010\uffb2" +
    "\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\026\uffb2\030\uffb2" +
    "\034\uffb2\035\uffb2\070\uffb2\074\uffb2\075\uffb2\076\uffb2\077" +
    "\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2" +
    "\106\uffb2\107\uffb2\110\uffb2\001\002\000\100\006\uffa7\010" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7" +
    "\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\026\uffa7\030" +
    "\uffa7\034\uffa7\035\uffa7\070\uffa7\074\uffa7\075\uffa7\076\uffa7" +
    "\077\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105" +
    "\uffa7\106\uffa7\107\uffa7\110\uffa7\001\002\000\032\004\052" +
    "\034\062\036\060\044\044\045\064\060\047\063\042\064" +
    "\056\065\061\066\043\067\066\070\055\001\002\000\044" +
    "\037\353\042\102\043\100\044\101\045\073\046\106\047" +
    "\076\050\077\051\104\052\103\053\072\054\071\055\105" +
    "\056\074\057\110\111\075\112\107\001\002\000\004\041" +
    "\354\001\002\000\100\006\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\026\uffa1\030\uffa1\034\uffa1\035\uffa1" +
    "\070\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101" +
    "\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1" +
    "\110\uffa1\001\002\000\032\004\052\034\062\036\060\044" +
    "\044\045\064\060\047\063\042\064\056\065\061\066\043" +
    "\067\066\070\055\001\002\000\006\037\357\040\136\001" +
    "\002\000\004\041\360\001\002\000\100\006\uff9c\010\uff9c" +
    "\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017" +
    "\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\026\uff9c\030\uff9c" +
    "\034\uff9c\035\uff9c\070\uff9c\074\uff9c\075\uff9c\076\uff9c\077" +
    "\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c" +
    "\106\uff9c\107\uff9c\110\uff9c\001\002\000\032\004\052\034" +
    "\062\036\060\044\044\045\064\060\047\063\042\064\056" +
    "\065\061\066\043\067\066\070\055\001\002\000\044\037" +
    "\363\042\102\043\100\044\101\045\073\046\106\047\076" +
    "\050\077\051\104\052\103\053\072\054\071\055\105\056" +
    "\074\057\110\111\075\112\107\001\002\000\004\034\364" +
    "\001\002\000\004\020\365\001\002\000\032\004\052\034" +
    "\062\036\060\044\044\045\064\060\047\063\042\064\056" +
    "\065\061\066\043\067\066\070\055\001\002\000\010\020" +
    "\371\021\370\035\uffa9\001\002\000\004\035\377\001\002" +
    "\000\004\062\375\001\002\000\032\004\052\034\062\036" +
    "\060\044\044\045\064\060\047\063\042\064\056\065\061" +
    "\066\043\067\066\070\055\001\002\000\044\042\102\043" +
    "\100\044\101\045\073\046\106\047\076\050\077\051\104" +
    "\052\103\053\072\054\071\055\105\056\074\057\110\062" +
    "\373\111\075\112\107\001\002\000\100\006\011\010\034" +
    "\011\016\012\033\013\214\014\224\015\222\016\177\017" +
    "\204\020\uffc9\021\uffc9\022\163\023\221\026\216\030\012" +
    "\034\173\035\uffc9\070\202\074\005\075\025\076\035\077" +
    "\023\100\024\101\006\102\205\103\172\104\166\105\167" +
    "\106\207\107\170\110\175\001\002\000\010\020\uffac\021" +
    "\uffac\035\uffac\001\002\000\074\006\011\010\034\011\016" +
    "\012\033\013\214\014\224\015\222\016\177\017\204\022" +
    "\163\023\221\026\216\030\012\034\173\035\uffc9\070\202" +
    "\074\005\075\025\076\035\077\023\100\024\101\006\102" +
    "\205\103\172\104\166\105\167\106\207\107\170\110\175" +
    "\001\002\000\004\035\uffaa\001\002\000\100\006\uffad\010" +
    "\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\026\uffad\030" +
    "\uffad\034\uffad\035\uffad\070\uffad\074\uffad\075\uffad\076\uffad" +
    "\077\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105" +
    "\uffad\106\uffad\107\uffad\110\uffad\001\002\000\044\042\102" +
    "\043\100\044\101\045\073\046\106\047\076\050\077\051" +
    "\104\052\103\053\072\054\071\055\105\056\074\057\110" +
    "\062\u0101\111\075\112\107\001\002\000\100\006\011\010" +
    "\034\011\016\012\033\013\214\014\224\015\222\016\177" +
    "\017\204\020\uffc9\021\uffc9\022\163\023\221\026\216\030" +
    "\012\034\173\035\uffc9\070\202\074\005\075\025\076\035" +
    "\077\023\100\024\101\006\102\205\103\172\104\166\105" +
    "\167\106\207\107\170\110\175\001\002\000\010\020\uffab" +
    "\021\uffab\035\uffab\001\002\000\074\006\011\010\034\011" +
    "\016\012\033\013\214\014\224\015\222\016\177\017\204" +
    "\022\163\023\221\026\216\030\012\034\173\035\uffc9\070" +
    "\202\074\005\075\025\076\035\077\023\100\024\101\006" +
    "\102\205\103\172\104\166\105\167\106\207\107\170\110" +
    "\175\001\002\000\004\035\u0105\001\002\000\004\027\u0106" +
    "\001\002\000\004\036\u0107\001\002\000\032\004\052\034" +
    "\062\036\060\044\044\045\064\060\047\063\042\064\056" +
    "\065\061\066\043\067\066\070\055\001\002\000\044\037" +
    "\u0109\042\102\043\100\044\101\045\073\046\106\047\076" +
    "\050\077\051\104\052\103\053\072\054\071\055\105\056" +
    "\074\057\110\111\075\112\107\001\002\000\004\041\u010a" +
    "\001\002\000\100\006\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\026\uffb0\030\uffb0\034\uffb0\035\uffb0\070" +
    "\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0" +
    "\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110" +
    "\uffb0\001\002\000\032\004\052\034\062\036\060\044\044" +
    "\045\064\060\047\063\042\064\056\065\061\066\043\067" +
    "\066\070\055\001\002\000\006\037\u010d\040\136\001\002" +
    "\000\004\041\u010e\001\002\000\100\006\uff9f\010\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\020\uff9f\021\uff9f\022\uff9f\023\uff9f\026\uff9f\030\uff9f\034" +
    "\uff9f\035\uff9f\070\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f" +
    "\100\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106" +
    "\uff9f\107\uff9f\110\uff9f\001\002\000\042\002\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\030\ufff6\031" +
    "\ufff6\070\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6" +
    "\101\ufff6\001\002\000\004\035\u0111\001\002\000\100\006" +
    "\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\026" +
    "\uffa8\030\uffa8\034\uffa8\035\uffa8\070\uffa8\074\uffa8\075\uffa8" +
    "\076\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8\104" +
    "\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8\001\002\000\032" +
    "\004\052\034\062\036\060\044\044\045\064\060\047\063" +
    "\042\064\056\065\061\066\043\067\066\070\055\001\002" +
    "\000\044\040\u0114\042\102\043\100\044\101\045\073\046" +
    "\106\047\076\050\077\051\104\052\103\053\072\054\071" +
    "\055\105\056\074\057\110\111\075\112\107\001\002\000" +
    "\032\004\052\034\062\036\060\044\044\045\064\060\047" +
    "\063\042\064\056\065\061\066\043\067\066\070\055\001" +
    "\002\000\044\037\u0116\042\102\043\100\044\101\045\073" +
    "\046\106\047\076\050\077\051\104\052\103\053\072\054" +
    "\071\055\105\056\074\057\110\111\075\112\107\001\002" +
    "\000\004\041\u0117\001\002\000\100\006\uff9d\010\uff9d\011" +
    "\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\026\uff9d\030\uff9d\034" +
    "\uff9d\035\uff9d\070\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d" +
    "\100\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d\106" +
    "\uff9d\107\uff9d\110\uff9d\001\002\000\032\004\052\034\062" +
    "\036\060\044\044\045\064\060\047\063\042\064\056\065" +
    "\061\066\043\067\066\070\055\001\002\000\006\037\u011a" +
    "\040\136\001\002\000\004\041\u011b\001\002\000\100\006" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\026" +
    "\uffa2\030\uffa2\034\uffa2\035\uffa2\070\uffa2\074\uffa2\075\uffa2" +
    "\076\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2\104" +
    "\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\001\002\000\004" +
    "\037\u011d\001\002\000\004\041\u011e\001\002\000\100\006" +
    "\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\026" +
    "\uff9e\030\uff9e\034\uff9e\035\uff9e\070\uff9e\074\uff9e\075\uff9e" +
    "\076\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e\104" +
    "\uff9e\105\uff9e\106\uff9e\107\uff9e\110\uff9e\001\002\000\032" +
    "\004\052\034\062\036\060\044\044\045\064\060\047\063" +
    "\042\064\056\065\061\066\043\067\066\070\055\001\002" +
    "\000\044\037\u0121\042\102\043\100\044\101\045\073\046" +
    "\106\047\076\050\077\051\104\052\103\053\072\054\071" +
    "\055\105\056\074\057\110\111\075\112\107\001\002\000" +
    "\004\041\u0122\001\002\000\100\006\uffa0\010\uffa0\011\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\026\uffa0\030\uffa0\034\uffa0" +
    "\035\uffa0\070\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100" +
    "\uffa0\101\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0" +
    "\107\uffa0\110\uffa0\001\002\000\100\006\uffb7\010\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\020\uffb7\021\uffb7\022\uffb7\023\uffb7\026\uffb7\030\uffb7\034" +
    "\uffb7\035\uffb7\070\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7" +
    "\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106" +
    "\uffb7\107\uffb7\110\uffb7\001\002\000\100\006\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\026\uffc8\030\uffc8" +
    "\034\uffc8\035\uffc8\070\uffc8\074\uffc8\075\uffc8\076\uffc8\077" +
    "\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8" +
    "\106\uffc8\107\uffc8\110\uffc8\001\002\000\034\006\011\010" +
    "\034\011\016\012\033\030\012\037\uffcf\070\017\074\005" +
    "\075\025\076\035\077\023\100\024\101\006\001\002\000" +
    "\004\070\u0127\001\002\000\004\036\u0128\001\002\000\004" +
    "\037\u0129\001\002\000\004\034\u012a\001\002\000\074\006" +
    "\011\010\034\011\016\012\033\013\214\014\224\015\222" +
    "\016\177\017\204\022\163\023\221\026\216\030\012\034" +
    "\173\035\uffc9\070\202\074\005\075\025\076\035\077\023" +
    "\100\024\101\006\102\205\103\172\104\166\105\167\106" +
    "\207\107\170\110\175\001\002\000\004\035\u012c\001\002" +
    "\000\042\002\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\030\uffd1\031\uffd1\070\uffd1\074\uffd1\075\uffd1" +
    "\076\uffd1\077\uffd1\100\uffd1\101\uffd1\001\002\000\006\037" +
    "\uffcd\040\uffcd\001\002\000\004\070\u0137\001\002\000\006" +
    "\037\uffd0\040\u0135\001\002\000\004\037\u0131\001\002\000" +
    "\004\034\u0132\001\002\000\074\006\011\010\034\011\016" +
    "\012\033\013\214\014\224\015\222\016\177\017\204\022" +
    "\163\023\221\026\216\030\012\034\173\035\uffc9\070\202" +
    "\074\005\075\025\076\035\077\023\100\024\101\006\102" +
    "\205\103\172\104\166\105\167\106\207\107\170\110\175" +
    "\001\002\000\004\035\u0134\001\002\000\042\002\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\030\uffd4" +
    "\031\uffd4\070\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100" +
    "\uffd4\101\uffd4\001\002\000\032\006\011\010\034\011\016" +
    "\012\033\030\012\070\017\074\005\075\025\076\035\077" +
    "\023\100\024\101\006\001\002\000\006\037\uffce\040\uffce" +
    "\001\002\000\010\032\u0139\037\uffcc\040\uffcc\001\002\000" +
    "\010\032\311\037\uffcb\040\uffcb\001\002\000\004\033\307" +
    "\001\002\000\004\034\u013b\001\002\000\032\006\011\010" +
    "\034\011\016\012\033\030\012\070\017\074\005\075\025" +
    "\076\035\077\023\100\024\101\006\001\002\000\004\070" +
    "\u0142\001\002\000\034\006\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\030\ufff2\035\ufff2\070\ufff2\074\ufff2\075\ufff2\076\ufff2\077" +
    "\ufff2\100\ufff2\101\ufff2\001\002\000\034\006\011\010\034" +
    "\011\016\012\033\030\012\035\u0140\070\017\074\005\075" +
    "\025\076\035\077\023\100\024\101\006\001\002\000\034" +
    "\006\ufff3\010\ufff3\011\ufff3\012\ufff3\030\ufff3\035\ufff3\070" +
    "\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3" +
    "\001\002\000\004\041\u0141\001\002\000\042\002\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\030\ufff4" +
    "\031\ufff4\070\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4\100" +
    "\ufff4\101\ufff4\001\002\000\006\032\u0144\041\u0145\001\002" +
    "\000\006\032\321\041\u0146\001\002\000\032\004\052\034" +
    "\062\036\060\044\044\045\064\060\047\063\042\064\056" +
    "\065\061\066\043\067\066\070\055\001\002\000\034\006" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\030\ufff1\035\ufff1\070\ufff1" +
    "\074\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\001" +
    "\002\000\034\006\ufff0\010\ufff0\011\ufff0\012\ufff0\030\ufff0" +
    "\035\ufff0\070\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0\100" +
    "\ufff0\101\ufff0\001\002\000\014\032\uffd5\036\u0150\040\uffd5" +
    "\041\uffd5\114\uffd5\001\002\000\006\032\311\070\u0149\001" +
    "\002\000\004\036\u014a\001\002\000\034\006\011\010\034" +
    "\011\016\012\033\030\012\037\uffcf\070\017\074\005\075" +
    "\025\076\035\077\023\100\024\101\006\001\002\000\004" +
    "\037\u014c\001\002\000\004\034\u014d\001\002\000\074\006" +
    "\011\010\034\011\016\012\033\013\214\014\224\015\222" +
    "\016\177\017\204\022\163\023\221\026\216\030\012\034" +
    "\173\035\uffc9\070\202\074\005\075\025\076\035\077\023" +
    "\100\024\101\006\102\205\103\172\104\166\105\167\106" +
    "\207\107\170\110\175\001\002\000\004\035\u014f\001\002" +
    "\000\042\002\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\030\uffd2\031\uffd2\070\uffd2\074\uffd2\075\uffd2" +
    "\076\uffd2\077\uffd2\100\uffd2\101\uffd2\001\002\000\034\006" +
    "\011\010\034\011\016\012\033\030\012\037\uffcf\070\017" +
    "\074\005\075\025\076\035\077\023\100\024\101\006\001" +
    "\002\000\004\037\u0152\001\002\000\004\034\u0153\001\002" +
    "\000\074\006\011\010\034\011\016\012\033\013\214\014" +
    "\224\015\222\016\177\017\204\022\163\023\221\026\216" +
    "\030\012\034\173\035\uffc9\070\202\074\005\075\025\076" +
    "\035\077\023\100\024\101\006\102\205\103\172\104\166" +
    "\105\167\106\207\107\170\110\175\001\002\000\004\035" +
    "\u0155\001\002\000\042\002\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\030\uffd3\031\uffd3\070\uffd3\074" +
    "\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3\001\002" +
    "\000\042\002\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011" +
    "\uffff\012\uffff\030\uffff\031\uffff\070\uffff\074\uffff\075\uffff" +
    "\076\uffff\077\uffff\100\uffff\101\uffff\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0155\000\030\002\007\006\013\025\003\026\012\027" +
    "\006\030\026\031\021\032\014\033\031\034\020\043\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\025\003\026" +
    "\012\027\u0155\030\026\031\021\032\014\033\031\034\020" +
    "\043\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\044\271\060\u0147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\046" +
    "\044\047\047\050\064\051\045\052\066\053\056\054\050" +
    "\055\062\056\053\057\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\046\044\047\047\050\064\051\045" +
    "\052\066\053\056\054\050\055\062\056\153\057\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\046\044" +
    "\047\047\050\064\051\045\052\066\053\056\054\050\055" +
    "\062\056\152\057\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\046\044\047\047\050\064\051\045\052\066\053" +
    "\056\054\050\055\062\056\144\057\052\001\001\000\002" +
    "\001\001\000\030\045\142\046\044\047\047\050\064\051" +
    "\045\052\066\053\056\054\050\055\062\056\133\057\052" +
    "\001\001\000\002\001\001\000\026\046\044\047\047\050" +
    "\064\051\045\052\066\053\056\054\050\055\062\056\067" +
    "\057\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\046\044\047\047" +
    "\050\064\051\045\052\066\053\056\054\050\055\062\056" +
    "\125\057\052\001\001\000\026\046\044\047\047\050\064" +
    "\051\045\052\066\053\056\054\050\055\062\056\124\057" +
    "\052\001\001\000\026\046\044\047\047\050\064\051\045" +
    "\052\066\053\056\054\050\055\062\056\123\057\052\001" +
    "\001\000\026\046\044\047\047\050\064\051\045\052\066" +
    "\053\056\054\050\055\062\056\122\057\052\001\001\000" +
    "\002\001\001\000\026\046\044\047\047\050\064\051\045" +
    "\052\066\053\056\054\050\055\062\056\121\057\052\001" +
    "\001\000\026\046\044\047\047\050\064\051\045\052\066" +
    "\053\056\054\050\055\062\056\120\057\052\001\001\000" +
    "\026\046\044\047\047\050\064\051\045\052\066\053\056" +
    "\054\050\055\062\056\117\057\052\001\001\000\026\046" +
    "\044\047\047\050\064\051\045\052\066\053\056\054\050" +
    "\055\062\056\116\057\052\001\001\000\026\046\044\047" +
    "\047\050\064\051\045\052\066\053\056\054\050\055\062" +
    "\056\115\057\052\001\001\000\026\046\044\047\047\050" +
    "\064\051\045\052\066\053\056\054\050\055\062\056\114" +
    "\057\052\001\001\000\026\046\044\047\047\050\064\051" +
    "\045\052\066\053\056\054\050\055\062\056\113\057\052" +
    "\001\001\000\026\046\044\047\047\050\064\051\045\052" +
    "\066\053\056\054\050\055\062\056\112\057\052\001\001" +
    "\000\026\046\044\047\047\050\064\051\045\052\066\053" +
    "\056\054\050\055\062\056\111\057\052\001\001\000\002" +
    "\001\001\000\026\046\044\047\047\050\064\051\045\052" +
    "\066\053\056\054\050\055\062\056\110\057\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\046\044\047\047\050\064\051" +
    "\045\052\066\053\056\054\050\055\062\056\140\057\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\045" +
    "\132\046\044\047\047\050\064\051\045\052\066\053\056" +
    "\054\050\055\062\056\133\057\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\046\044" +
    "\047\047\050\064\051\045\052\066\053\056\054\050\055" +
    "\062\056\137\057\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\045\147\046\044\047\047\050\064\051\045\052" +
    "\066\053\056\054\050\055\062\056\133\057\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\161\004\173\007\177\010\222\011\205\012\217\013\163" +
    "\014\202\015\175\016\170\017\207\020\216\021\164\024" +
    "\212\025\211\035\200\043\214\055\210\001\001\000\042" +
    "\007\u0123\010\222\011\205\012\217\013\163\014\202\015" +
    "\175\016\170\017\207\020\216\021\164\024\212\025\211" +
    "\035\200\043\214\055\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\161\004\u010f\007\177\010\222\011\205" +
    "\012\217\013\163\014\202\015\175\016\170\017\207\020" +
    "\216\021\164\024\212\025\211\035\200\043\214\055\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\271\001\001\000\026" +
    "\046\044\047\047\050\064\051\045\052\066\053\056\054" +
    "\050\055\062\056\266\057\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\046\044\047\047" +
    "\050\064\051\045\052\066\053\056\054\050\055\062\056" +
    "\225\057\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\003\161\004\230\007\177\010\222\011\205\012" +
    "\217\013\163\014\202\015\175\016\170\017\207\020\216" +
    "\021\164\024\212\025\211\035\200\043\214\055\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\233" +
    "\025\235\043\214\055\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\046\044\047\047\050\064\051\045" +
    "\052\066\053\056\054\050\055\062\056\236\057\052\001" +
    "\001\000\002\001\001\000\006\020\240\055\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\161\004" +
    "\243\007\177\010\222\011\205\012\217\013\163\014\202" +
    "\015\175\016\170\017\207\020\216\021\164\024\212\025" +
    "\211\035\200\043\214\055\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\046\044\047" +
    "\047\050\064\051\045\052\066\053\056\054\050\055\062" +
    "\056\251\057\052\001\001\000\002\001\001\000\004\055" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\046\044\047\047\050\064\051\045\052\066\053\056\054" +
    "\050\055\062\056\254\057\052\001\001\000\002\001\001" +
    "\000\006\020\256\055\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\161\004\261\007\177\010\222" +
    "\011\205\012\217\013\163\014\202\015\175\016\170\017" +
    "\207\020\216\021\164\024\212\025\211\035\200\043\214" +
    "\055\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\060" +
    "\274\061\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\046\044\047\047\050\064\051" +
    "\045\052\066\053\056\054\050\055\062\056\305\057\052" +
    "\001\001\000\002\001\001\000\026\046\044\047\047\050" +
    "\064\051\045\052\066\053\056\054\050\055\062\056\301" +
    "\057\052\001\001\000\004\055\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\046\044\047\047\050\064\051\045" +
    "\052\066\053\056\054\050\055\062\056\313\057\052\001" +
    "\001\000\004\055\315\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\046\044\047\047\050\064\051\045\052\066" +
    "\053\056\054\050\055\062\056\330\057\052\001\001\000" +
    "\002\001\001\000\026\046\044\047\047\050\064\051\045" +
    "\052\066\053\056\054\050\055\062\056\324\057\052\001" +
    "\001\000\004\055\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\046\044" +
    "\047\047\050\064\051\045\052\066\053\056\054\050\055" +
    "\062\056\334\057\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\161\004\337\007\177\010\222\011" +
    "\205\012\217\013\163\014\202\015\175\016\170\017\207" +
    "\020\216\021\164\024\212\025\211\035\200\043\214\055" +
    "\210\001\001\000\002\001\001\000\004\022\341\001\001" +
    "\000\002\001\001\000\004\010\343\001\001\000\002\001" +
    "\001\000\046\003\161\004\345\007\177\010\222\011\205" +
    "\012\217\013\163\014\202\015\175\016\170\017\207\020" +
    "\216\021\164\024\212\025\211\035\200\043\214\055\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\046\044\047\047\050\064\051\045\052\066" +
    "\053\056\054\050\055\062\056\351\057\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\045\355\046\044\047\047\050\064\051\045\052\066\053" +
    "\056\054\050\055\062\056\133\057\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\046" +
    "\044\047\047\050\064\051\045\052\066\053\056\054\050" +
    "\055\062\056\361\057\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\365\001\001\000\026\046\044" +
    "\047\047\050\064\051\045\052\066\053\056\054\050\055" +
    "\062\056\377\057\052\001\001\000\004\023\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\046\044\047" +
    "\047\050\064\051\045\052\066\053\056\054\050\055\062" +
    "\056\371\057\052\001\001\000\002\001\001\000\046\003" +
    "\161\004\373\007\177\010\222\011\205\012\217\013\163" +
    "\014\202\015\175\016\170\017\207\020\216\021\164\024" +
    "\212\025\211\035\200\043\214\055\210\001\001\000\002" +
    "\001\001\000\046\003\161\004\375\007\177\010\222\011" +
    "\205\012\217\013\163\014\202\015\175\016\170\017\207" +
    "\020\216\021\164\024\212\025\211\035\200\043\214\055" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\161\004\u0101\007\177\010\222\011" +
    "\205\012\217\013\163\014\202\015\175\016\170\017\207" +
    "\020\216\021\164\024\212\025\211\035\200\043\214\055" +
    "\210\001\001\000\002\001\001\000\046\003\161\004\u0103" +
    "\007\177\010\222\011\205\012\217\013\163\014\202\015" +
    "\175\016\170\017\207\020\216\021\164\024\212\025\211" +
    "\035\200\043\214\055\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\046\044\047\047" +
    "\050\064\051\045\052\066\053\056\054\050\055\062\056" +
    "\u0107\057\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\045\u010b\046\044\047\047\050" +
    "\064\051\045\052\066\053\056\054\050\055\062\056\133" +
    "\057\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\046\044\047\047\050\064\051\045\052" +
    "\066\053\056\054\050\055\062\056\u0112\057\052\001\001" +
    "\000\002\001\001\000\026\046\044\047\047\050\064\051" +
    "\045\052\066\053\056\054\050\055\062\056\u0114\057\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\045\u0118\046\044\047\047\050\064\051\045" +
    "\052\066\053\056\054\050\055\062\056\133\057\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\046\044\047\047\050\064\051\045\052\066\053\056" +
    "\054\050\055\062\056\u011f\057\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\037\u012c\041\u012e\042\u012f\043" +
    "\u012d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\161\004\u012a\007" +
    "\177\010\222\011\205\012\217\013\163\014\202\015\175" +
    "\016\170\017\207\020\216\021\164\024\212\025\211\035" +
    "\200\043\214\055\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\161" +
    "\004\u0132\007\177\010\222\011\205\012\217\013\163\014" +
    "\202\015\175\016\170\017\207\020\216\021\164\024\212" +
    "\025\211\035\200\043\214\055\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\037\u0135\043\u012d\001\001" +
    "\000\002\001\001\000\004\060\u0137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\036\u013c" +
    "\040\u013d\043\u013b\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\u013e\043\u013b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\u0142\001" +
    "\001\000\002\001\001\000\026\046\044\047\047\050\064" +
    "\051\045\052\066\053\056\054\050\055\062\056\305\057" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\037" +
    "\u012c\041\u012e\042\u014a\043\u012d\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\161\004\u014d\007\177\010" +
    "\222\011\205\012\217\013\163\014\202\015\175\016\170" +
    "\017\207\020\216\021\164\024\212\025\211\035\200\043" +
    "\214\055\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\037\u012c\041\u012e\042\u0150\043\u012d\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\161\004\u0153" +
    "\007\177\010\222\011\205\012\217\013\163\014\202\015" +
    "\175\016\170\017\207\020\216\021\164\024\212\025\211" +
    "\035\200\043\214\055\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* RAIZ */
    Principal p;

    /**
    *   Metodo que retorna la raiz del arbol
    **/
    public Principal GetAst(){
        return p;
    }
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/
    public void syntax_error(Symbol s){
            System.err.println("Error sintactico en la linea: " + (s.left) +" Columna: " +s.right+ ". No se esperaba este componente: " + s.value+"."); 
            Singleton.getInstance().addError(s.left,s.right,"Sintactico : No se esperaba este componente: " + s.value+".");
           
    }
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.err.println("Error Sintactico irrecuperable en la Lienea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
            Singleton.getInstance().addError(s.left,s.right,"Sintactico : No se esperaba este componente: " + s.value+".");
           
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= Declarations 
            {
              Object RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> arg0 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        p = new Principal(arg0);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Declarations ::= Declarations Declaration 
            {
              LinkedList<Instruction> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> arg0 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        arg0.add(arg1);
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declarations",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declarations ::= Declaration 
            {
              LinkedList<Instruction> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(arg0);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declarations",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaration ::= ImportDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaration ::= StructDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaration ::= ConstDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaration ::= VarDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaration ::= FunctionsDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= NucleoDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= FunctionsDefGui 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NucleoDef ::= ZROR MAIN LEFT_PARENT RIGHT_PARENT LEFT_BRACES Instructions RIGHT_BRACES 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> arg1 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Main(arg0left,arg0right,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NucleoDef",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ImportDef ::= NUMERAL IMPORTARR STRING_LIT 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ImportDef(arg0,arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportDef",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // StructDef ::= FUSIONR ID LEFT_BRACES AttributeList RIGHT_BRACES SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Parameter> arg1 = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new FusionDef(arg0,arg1,arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StructDef",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AttributeList ::= AttributeList Attribute 
            {
              LinkedList<Parameter> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Parameter> arg0 = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter arg1 = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        arg0.add(arg1);
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AttributeList",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AttributeList ::= Attribute 
            {
              LinkedList<Parameter> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter arg0 = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(arg0);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AttributeList",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Attribute ::= Type ID SEMI 
            {
              Parameter RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto arg0 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Parameter(arg1,arg0,arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Attribute",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Attribute ::= Type ID ArrayList SEMI 
            {
              Parameter RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto arg0 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arreglo arg2 = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        arg2.setTipoarreglo(arg0);
        RESULT = new Parameter(arg1,arg2,arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Attribute",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= ENTR 
            {
              Objeto RESULT =null;
		
        RESULT = new Primitivo(Objeto.Tipo.INT,null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= CHRR 
            {
              Objeto RESULT =null;
		
        RESULT = new Primitivo(Objeto.Tipo.CHAR,null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= DECR 
            {
              Objeto RESULT =null;
		
        RESULT = new Primitivo(Objeto.Tipo.DECIMAL,null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= BULR 
            {
              Objeto RESULT =null;
		
        RESULT = new Primitivo(Objeto.Tipo.BOOLEAN,null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= ID 
            {
              Objeto RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Fusion(arg0,null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= RLBL 
            {
              Objeto RESULT =null;
		
        RESULT = new RLabel();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= RTXT 
            {
              Objeto RESULT =null;
		
        RESULT = new Rtxt();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= RTXTA 
            {
              Objeto RESULT =null;
		
        RESULT = new RtxtA();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= RTXTN 
            {
              Objeto RESULT =null;
		
        RESULT = new RtxtN();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= RTXTP 
            {
              Objeto RESULT =null;
		
        RESULT = new RtxtP();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= RBTON 
            {
              Objeto RESULT =null;
		
        RESULT = new Rboton();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= RSTRINGR 
            {
              Objeto RESULT =null;
		
        RESULT = new RString("");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ArrayList ::= ArrayList LEFT_BRACKET Expr RIGHT_BRACKET 
            {
              Arreglo RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Arreglo arg0 = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        arg0.setTipoarreglo(new Arreglo(null,arg1));
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayList",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ArrayList ::= LEFT_BRACKET Expr RIGHT_BRACKET 
            {
              Arreglo RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Arreglo(null,arg0);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayList",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ArrayParam ::= ArrayParam LEFT_BRACKET RIGHT_BRACKET 
            {
              Arreglo RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arreglo arg0 = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        arg0.setTipoarreglo(new Arreglo(null));
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayParam",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ArrayParam ::= LEFT_BRACKET RIGHT_BRACKET 
            {
              Arreglo RESULT =null;
		
        RESULT = new Arreglo(null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayParam",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ConstDef ::= NUMERAL DEFINIRR ID Expr 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ConstDef(arg0left,arg0right,arg0,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstDef",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarDef ::= Type IdList SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto arg0 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> arg1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new VarDef(arg1,null,arg0,arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDef ::= Type IdList ASIG Expr SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Objeto arg0 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> arg1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new VarDef(arg1,arg2,arg0,arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarDef ::= Type IdList ASIG TIMES Access SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto arg0 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<String> arg1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VarDef ::= Type IdList ArrayParam ASIG Expr SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto arg0 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<String> arg1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Arreglo arg2 = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg3 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        arg2.setTipoarreglo(arg0);
        RESULT = new VarDef(arg1,arg3,arg2,arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VarDef ::= Type IdList ArrayParam ASIG TIMES Access SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Objeto arg0 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<String> arg1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Arreglo arg2 = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg3 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        arg2.setTipoarreglo(arg0);
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VarDef ::= Type IdList ArrayList SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto arg0 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> arg1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arreglo arg2 = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        arg2.setTipoarreglo(arg0);
        RESULT = new VarDef(arg1,null,arg2,arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VarDef ::= Type IdList ArrayList ASIG Expr SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto arg0 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<String> arg1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Arreglo arg2 = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg3 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        arg2.setTipoarreglo(arg0);
        RESULT = new VarDef(arg1,arg3,arg2,arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VarDef ::= Type IdList ArrayList ASIG TIMES Access SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Objeto arg0 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<String> arg1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Arreglo arg2 = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg3 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        arg2.setTipoarreglo(arg0);
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IdList ::= IdList COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> arg0 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        arg0.add(arg1);
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IdList ::= ID 
            {
              LinkedList<String> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(arg0);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FunctionsDef ::= ZROR ID LEFT_PARENT Params RIGHT_PARENT LEFT_BRACES Instructions RIGHT_BRACES 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Parameter> arg1 = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> arg2 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Function(arg0,arg1,arg2,null,arg0right,arg0left,true);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionsDef",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FunctionsDef ::= Type ID LEFT_PARENT Params RIGHT_PARENT LEFT_BRACES Instructions RIGHT_BRACES 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Objeto arg0 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Parameter> arg2 = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> arg3 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Function(arg1,arg2,arg3,arg0,arg1right,arg1left,false);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionsDef",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FunctionsDef ::= Type ArrayParam ID LEFT_PARENT Params RIGHT_PARENT LEFT_BRACES Instructions RIGHT_BRACES 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Objeto arg0 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Arreglo arg1 = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String arg2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int arg3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Parameter> arg3 = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> arg4 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        arg1.setTipoarreglo(arg0);
        RESULT = new Function(arg2,arg3,arg4,arg1,arg1right,arg1left,false);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionsDef",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FunctionsDefGui ::= ZROR ID TWO_POINTS ID LEFT_PARENT RIGHT_PARENT LEFT_BRACES Instructions RIGHT_BRACES 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> arg2 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new FunctionGui(arg0,arg1,arg2,arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionsDefGui",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Params ::= ParamList 
            {
              LinkedList<Parameter> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Parameter> arg0 = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Params",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Params ::= 
            {
              LinkedList<Parameter> RESULT =null;
		
        RESULT = new LinkedList<>();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Params",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ParamList ::= ParamList COMMA Param 
            {
              LinkedList<Parameter> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Parameter> arg0 = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter arg1 = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        arg0.add(arg1);
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamList",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ParamList ::= Param 
            {
              LinkedList<Parameter> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter arg0 = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(arg0);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamList",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Param ::= Type ID 
            {
              Parameter RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto arg0 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Parameter(arg1,arg0,arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Param",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Param ::= Type ID ArrayParam 
            {
              Parameter RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto arg0 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arreglo arg2 = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        arg2.setTipoarreglo(arg0);
        RESULT = new Parameter(arg1,arg2,arg1left,arg1right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Param",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Instructions ::= InstructionList 
            {
              LinkedList<Instruction> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> arg0 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Instructions ::= 
            {
              LinkedList<Instruction> RESULT =null;
		
        RESULT = new LinkedList<>();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // InstructionList ::= InstructionList Instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> arg0 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg1 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        arg0.add(arg1);
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InstructionList ::= Instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(arg0);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Instruction ::= ReturnDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Instruction ::= RomperDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Instruction ::= SigaDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Instruction ::= IfDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Instruction ::= SwitchDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Instruction ::= WhileDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Instruction ::= RepeatDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Instruction ::= ForDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Instruction ::= AssigmentDef SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Instruction ::= CallDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Instruction ::= VarDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Instruction ::= StatementDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Instruction ::= InputOutputDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ReturnDef ::= REGRESARR Expr SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Return(arg0left,arg0right,arg0);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnDef",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ReturnDef ::= REGRESARR SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Return(arg0left,arg0right,null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnDef",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RomperDef ::= ROMPERR SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Break(arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RomperDef",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SigaDef ::= SIGAR SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Continue(arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SigaDef",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IfDef ::= IFR LEFT_PARENT Expr RIGHT_PARENT LEFT_BRACES Instructions RIGHT_BRACES 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> arg1 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new If(arg0left,arg0right,arg0,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfDef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IfDef ::= IFR LEFT_PARENT Expr RIGHT_PARENT LEFT_BRACES Instructions RIGHT_BRACES ElseDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> arg1 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new IfElse(arg0left,arg0right,arg0,arg1,arg2);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfDef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ElseDef ::= ELSER IfDef 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseDef",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ElseDef ::= ELSER LEFT_BRACES Instructions RIGHT_BRACES 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> arg1 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Else(arg0left,arg0right,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseDef",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // WhileDef ::= WHILER LEFT_PARENT Expr RIGHT_PARENT LEFT_BRACES Instructions RIGHT_BRACES 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> arg1 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new While(arg0left,arg0right,arg0,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileDef",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RepeatDef ::= REPEATR LEFT_BRACES Instructions RIGHT_BRACES WHENR LEFT_PARENT Expr RIGHT_PARENT SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruction> arg0 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new Repeat(arg1left,arg1right,arg1,arg0);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RepeatDef",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ForDef ::= FORR LEFT_PARENT VarDef Expr SEMI AssigmentDef RIGHT_PARENT LEFT_BRACES Instructions RIGHT_BRACES 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction arg2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> arg3 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new For(arg0left,arg0right,arg0,arg2,arg1,arg3);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForDef",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ForDef ::= FORR LEFT_PARENT AssigmentDef SEMI Expr SEMI AssigmentDef RIGHT_PARENT LEFT_BRACES Instructions RIGHT_BRACES 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruction arg0 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction arg2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> arg3 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new For(arg0left,arg0right,arg0,arg2,arg1,arg3);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForDef",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SwitchDef ::= SWITCHR LEFT_PARENT Expr RIGHT_PARENT LEFT_BRACES CaseList DefaultCase RIGHT_BRACES 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> arg1 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction arg2 = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Switch(arg0left,arg0right,arg0,arg1,arg2);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchDef",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CaseList ::= CaseList CASER Expr TWO_POINTS Instructions 
            {
              LinkedList<Instruction> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruction> arg0 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> arg2 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        arg0.add(new Case(arg1left,arg1right,arg1,arg2));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CaseList ::= CASER Expr TWO_POINTS Instructions 
            {
              LinkedList<Instruction> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> arg1 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(new Case(arg0left,arg0right,arg0,arg1));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DefaultCase ::= DEFAULTR TWO_POINTS Instructions 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> arg1 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Else(arg0left,arg0right,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefaultCase",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DefaultCase ::= 
            {
              Instruction RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefaultCase",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // StatementDef ::= LEFT_BRACES Instructions RIGHT_BRACES 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> arg0 = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Statement(arg0left,arg0right,arg0);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementDef",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CallDef ::= Access SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Call(arg0,arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallDef",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // AssigmentDef ::= Access ASIG Expr 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Assignment(arg0left,arg0right,arg0,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssigmentDef",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AssigmentDef ::= Access ASIG TIMES Access 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssigmentDef",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AssigmentDef ::= Access PLUSPLUS 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Assignment(arg0left,arg0right,new PostExpr(arg0left,arg0right,arg0,'+'),null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssigmentDef",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AssigmentDef ::= Access MINUSMINUS 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Assignment(arg0left,arg0right,new PostExpr(arg0left,arg0right,arg0,'-'),null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssigmentDef",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // InputOutputDef ::= RIMP LEFT_PARENT ExprList RIGHT_PARENT SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Operation> arg1 = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new Imp(arg0left,arg0right,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InputOutputDef",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // InputOutputDef ::= RWRITE LEFT_PARENT Expr RIGHT_PARENT SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new Write(arg0left,arg0right,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InputOutputDef",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // InputOutputDef ::= RAPEND LEFT_PARENT Expr RIGHT_PARENT SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new Apend(arg0left,arg0right,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InputOutputDef",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // InputOutputDef ::= RWF LEFT_PARENT ExprList RIGHT_PARENT SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Operation> arg1 = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new Wf(arg0left,arg0right,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InputOutputDef",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // InputOutputDef ::= RCLOSE LEFT_PARENT RIGHT_PARENT SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = new Close(arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InputOutputDef",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // InputOutputDef ::= RREAD LEFT_PARENT Expr COMMA Expr RIGHT_PARENT SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg2 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new Read(arg0left,arg0right,arg1,arg2);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InputOutputDef",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // InputOutputDef ::= RMENSAGE LEFT_PARENT ExprList RIGHT_PARENT SEMI 
            {
              Instruction RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Operation> arg1 = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new Rmensage(arg0left,arg0right,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InputOutputDef",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExprList ::= ExprList COMMA Expr 
            {
              LinkedList<Operation> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Operation> arg0 = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        arg0.add(arg1);
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExprList ::= Expr 
            {
              LinkedList<Operation> RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(arg0);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr ::= Constant 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= BinExpr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expr ::= UnExpr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expr ::= Access 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expr ::= LEFT_PARENT Expr RIGHT_PARENT 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expr ::= ArrayDec 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Constant ::= ENT_LIT 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new  Constant(Objeto.Tipo.INT,Integer.parseInt(arg0),arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Constant ::= CHAR_LIT 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new  Constant(Objeto.Tipo.CHAR,arg0,arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Constant ::= BOOL_LIT 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new  Constant(Objeto.Tipo.BOOLEAN,Boolean.parseBoolean(arg0),arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Constant ::= DEC_LIT 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new  Constant(Objeto.Tipo.DECIMAL,Double.parseDouble(arg0),arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Constant ::= NLO 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new  Constant(Objeto.Tipo.NULL,null,arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Constant ::= STRING_LIT 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new  Constant(Objeto.Tipo.STRING,arg0.substring(1, arg0.length() - 1),arg0left,arg0right);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // BinExpr ::= Arithmetic 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BinExpr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BinExpr ::= Logical 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BinExpr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // BinExpr ::= Relational 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BinExpr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BinExpr ::= PostExpr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = arg0;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BinExpr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // UnExpr ::= MINUS Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new UnExpr(arg0left,arg0right,arg0,'-');
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnExpr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // UnExpr ::= NOT Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new UnExpr(arg0left,arg0right,arg0,'!');
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnExpr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // UnExpr ::= PLUS Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new UnExpr(arg0left,arg0right,arg0,'+');
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnExpr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PostExpr ::= Expr PLUSPLUS 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new PostExpr(arg0left,arg0right,arg0,'+');
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PostExpr",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PostExpr ::= Expr MINUSMINUS 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new PostExpr(arg0left,arg0right,arg0,'-');
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PostExpr",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Arithmetic ::= Expr PLUS Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Arithmetic(arg0left,arg0right,arg0,arg1,'+');
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arithmetic",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Arithmetic ::= Expr MINUS Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Arithmetic(arg0left,arg0right,arg0,arg1,'-');
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arithmetic",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Arithmetic ::= Expr TIMES Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Arithmetic(arg0left,arg0right,arg0,arg1,'*');
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arithmetic",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Arithmetic ::= Expr DIV Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Arithmetic(arg0left,arg0right,arg0,arg1,'/');
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arithmetic",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Arithmetic ::= Expr POT Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Arithmetic(arg0left,arg0right,arg0,arg1,'^');
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arithmetic",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Arithmetic ::= Expr MOD Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Arithmetic(arg0left,arg0right,arg0,arg1,'%');
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arithmetic",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Logical ::= Expr OR Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Logical(arg0left,arg0right,arg0,arg1,'|');
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Logical",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Logical ::= Expr AND Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Logical(arg0left,arg0right,arg0,arg1,'&');
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Logical",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Relational ::= Expr LSS Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Relational(arg0left,arg0right,arg0,arg1,"<");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relational",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Relational ::= Expr LSS_EQ Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Relational(arg0left,arg0right,arg0,arg1,"<=");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relational",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Relational ::= Expr GTR Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Relational(arg0left,arg0right,arg0,arg1,">");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relational",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Relational ::= Expr GTR_EQ Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Relational(arg0left,arg0right,arg0,arg1,">=");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relational",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Relational ::= Expr EQ Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Relational(arg0left,arg0right,arg0,arg1,"=");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relational",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Relational ::= Expr NOT_EQ Expr 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Relational(arg0left,arg0right,arg0,arg1,"<>");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relational",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Access ::= ID 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Access(arg0left,arg0right,null,arg0);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Access",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Access ::= ID LEFT_PARENT ExprList RIGHT_PARENT 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Operation> arg1 = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new AccessFunction(arg0left,arg0right,null,arg0,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Access",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Access ::= ID LEFT_PARENT RIGHT_PARENT 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new AccessFunction(arg0left,arg0right,null,arg0,new LinkedList<>());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Access",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Access ::= Access DOT ID 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Access(arg1left,arg1right,arg0,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Access",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Access ::= Access LEFT_BRACKET Expr RIGHT_BRACKET 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation arg1 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new AccessArray(arg1left,arg1right,arg0,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Access",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Access ::= Access DOT ID LEFT_PARENT ExprList RIGHT_PARENT 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Operation> arg2 = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new AccessFunction(arg1left,arg1right,arg0,arg1,arg2);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Access",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Access ::= Access DOT ID LEFT_PARENT RIGHT_PARENT 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operation arg0 = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String arg1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new AccessFunction(arg1left,arg1right,arg0,arg1,new LinkedList<>());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Access",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ArrayDec ::= LEFT_BRACES ExprList RIGHT_BRACES 
            {
              Operation RESULT =null;
		int arg0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String arg0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Operation> arg1 = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new NewArray(arg0left,arg0right,arg1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayDec",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
