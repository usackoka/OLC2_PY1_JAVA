
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Configuration;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\006\005\000\002\006\003\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\007\000" +
    "\002\004\005\000\002\004\003\000\002\005\003\000\002" +
    "\005\003\000\002\010\007\000\002\011\007\000\002\012" +
    "\005\000\002\012\003\000\002\013\005\000\002\013\003" +
    "\000\002\014\005\000\002\014\005\000\002\015\005\000" +
    "\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\004\014\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\074\001\002\000\004\004\007\001\002" +
    "\000\004\017\010\001\002\000\012\007\011\010\014\011" +
    "\016\012\015\001\002\000\004\017\072\001\002\000\006" +
    "\015\070\016\067\001\002\000\006\015\ufffd\016\ufffd\001" +
    "\002\000\004\017\065\001\002\000\004\017\021\001\002" +
    "\000\004\017\017\001\002\000\004\020\020\001\002\000" +
    "\006\015\ufffa\016\ufffa\001\002\000\004\014\022\001\002" +
    "\000\006\005\024\006\027\001\002\000\006\015\ufff6\016" +
    "\ufff6\001\002\000\004\017\050\001\002\000\006\015\046" +
    "\016\045\001\002\000\006\015\ufff7\016\ufff7\001\002\000" +
    "\004\017\031\001\002\000\006\015\ufff5\016\ufff5\001\002" +
    "\000\004\014\032\001\002\000\010\005\024\006\027\010" +
    "\036\001\002\000\006\015\uffeb\016\uffeb\001\002\000\006" +
    "\015\043\016\042\001\002\000\006\015\uffef\016\uffef\001" +
    "\002\000\004\017\040\001\002\000\006\015\uffea\016\uffea" +
    "\001\002\000\004\020\041\001\002\000\006\015\uffec\016" +
    "\uffec\001\002\000\010\005\024\006\027\010\036\001\002" +
    "\000\006\015\ufff3\016\ufff3\001\002\000\006\015\ufff0\016" +
    "\ufff0\001\002\000\006\005\024\006\027\001\002\000\006" +
    "\015\ufff9\016\ufff9\001\002\000\006\015\ufff8\016\ufff8\001" +
    "\002\000\004\014\051\001\002\000\006\010\054\013\052" +
    "\001\002\000\004\017\063\001\002\000\006\015\ufff1\016" +
    "\ufff1\001\002\000\004\017\061\001\002\000\006\015\057" +
    "\016\056\001\002\000\006\010\054\013\052\001\002\000" +
    "\006\015\ufff4\016\ufff4\001\002\000\006\015\ufff2\016\ufff2" +
    "\001\002\000\004\020\062\001\002\000\006\015\uffee\016" +
    "\uffee\001\002\000\004\020\064\001\002\000\006\015\uffed" +
    "\016\uffed\001\002\000\004\020\066\001\002\000\006\015" +
    "\ufffb\016\ufffb\001\002\000\012\007\011\010\014\011\016" +
    "\012\015\001\002\000\004\002\uffff\001\002\000\006\015" +
    "\ufffe\016\ufffe\001\002\000\004\020\073\001\002\000\006" +
    "\015\ufffc\016\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\011\007\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\024\005\025\010\022" +
    "\011\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\032\011\036\013" +
    "\033\015\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\032\011\036" +
    "\015\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\046\010\022\011\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\054\014" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* RAIZ */
        //Principal p;

    /**
    *   Metodo que retorna la raiz del arbol
    **/
    /*public Principal GetAst(){
        return p;
    }*/
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/
    public void syntax_error(Symbol s){
            System.err.println("Error sintactico en la linea: " + (s.left) +" Columna: " +s.right+ ". No se esperaba este componente: " + s.value+"."); 
    }
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.err.println("Error Sintactico irrecuperable en la Lienea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ProyectoDef 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProyectoDef ::= LEFT_BRACES PROYECTO TWO_POINTS AtributoList RIGHT_BRACES 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProyectoDef",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // AtributoList ::= AtributoList COMMA AtributoDef 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AtributoList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // AtributoList ::= AtributoDef 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AtributoList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // AtributoDef ::= RUTA TWO_POINTS CADENA 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AtributoDef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // AtributoDef ::= NOMBRE TWO_POINTS CADENA 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AtributoDef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // AtributoDef ::= CORRER TWO_POINTS CADENA 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AtributoDef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // AtributoDef ::= CONFIGURACION TWO_POINTS LEFT_BRACES ConfigurationList RIGHT_BRACES 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AtributoDef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConfigurationList ::= ConfigurationList COMMA ConfigurationDef 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConfigurationList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConfigurationList ::= ConfigurationDef 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConfigurationList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConfigurationDef ::= ArchivoDef 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConfigurationDef",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConfigurationDef ::= CarpetaDef 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConfigurationDef",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ArchivoDef ::= ARCHIVO TWO_POINTS LEFT_BRACES ArchivoList RIGHT_BRACES 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArchivoDef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CarpetaDef ::= CARPETA TWO_POINTS LEFT_BRACES CarpetaList RIGHT_BRACES 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CarpetaDef",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ArchivoList ::= ArchivoList COMMA AtributoArchivo 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArchivoList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ArchivoList ::= AtributoArchivo 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArchivoList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CarpetaList ::= CarpetaList COMMA AtributoCarpeta 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CarpetaList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CarpetaList ::= AtributoCarpeta 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CarpetaList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AtributoArchivo ::= NOMBRE TWO_POINTS CADENA 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AtributoArchivo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AtributoArchivo ::= FECHAMOD TWO_POINTS CADENA 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AtributoArchivo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AtributoCarpeta ::= NOMBRE TWO_POINTS CADENA 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AtributoCarpeta",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AtributoCarpeta ::= ArchivoDef 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AtributoCarpeta",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AtributoCarpeta ::= CarpetaDef 
            {
              Object RESULT =null;
		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AtributoCarpeta",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
